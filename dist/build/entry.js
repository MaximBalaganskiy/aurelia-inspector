var entry;entry =
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@aurelia/fetch-client/dist/esm/http-client-configuration.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aurelia/fetch-client/dist/esm/http-client-configuration.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HttpClientConfiguration": () => /* binding */ HttpClientConfiguration
/* harmony export */ });
/* harmony import */ var _retry_interceptor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./retry-interceptor.js */ "./node_modules/@aurelia/fetch-client/dist/esm/retry-interceptor.js");

/**
 * A class for configuring HttpClients.
 */
class HttpClientConfiguration {
    constructor() {
        /**
         * The base URL to be prepended to each Request's url before sending.
         */
        this.baseUrl = '';
        /**
         * Default values to apply to init objects when creating Requests. Note that
         * defaults cannot be applied when Request objects are manually created because
         * Request provides its own defaults and discards the original init object.
         * See also https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
         */
        this.defaults = {};
        /**
         * Interceptors to be added to the HttpClient.
         */
        this.interceptors = [];
        this.dispatcher = null;
    }
    /**
     * Sets the baseUrl.
     *
     * @param baseUrl - The base URL.
     * @returns The chainable instance of this configuration object.
     * @chainable
     */
    withBaseUrl(baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }
    /**
     * Sets the defaults.
     *
     * @param defaults - The defaults.
     * @returns The chainable instance of this configuration object.
     * @chainable
     */
    withDefaults(defaults) {
        this.defaults = defaults;
        return this;
    }
    /**
     * Adds an interceptor to be run on all requests or responses.
     *
     * @param interceptor - An object with request, requestError,
     * response, or responseError methods. request and requestError act as
     * resolve and reject handlers for the Request before it is sent.
     * response and responseError act as resolve and reject handlers for
     * the Response after it has been received.
     * @returns The chainable instance of this configuration object.
     * @chainable
     */
    withInterceptor(interceptor) {
        this.interceptors.push(interceptor);
        return this;
    }
    /**
     * Applies a configuration that addresses common application needs, including
     * configuring same-origin credentials, and using rejectErrorResponses.
     *
     * @returns The chainable instance of this configuration object.
     * @chainable
     */
    useStandardConfiguration() {
        const standardConfig = { credentials: 'same-origin' };
        Object.assign(this.defaults, standardConfig, this.defaults);
        return this.rejectErrorResponses();
    }
    /**
     * Causes Responses whose status codes fall outside the range 200-299 to reject.
     * The fetch API only rejects on network errors or other conditions that prevent
     * the request from completing, meaning consumers must inspect Response.ok in the
     * Promise continuation to determine if the server responded with a success code.
     * This method adds a response interceptor that causes Responses with error codes
     * to be rejected, which is common behavior in HTTP client libraries.
     *
     * @returns The chainable instance of this configuration object.
     * @chainable
     */
    rejectErrorResponses() {
        return this.withInterceptor({ response: rejectOnError });
    }
    withRetry(config) {
        const interceptor = new _retry_interceptor_js__WEBPACK_IMPORTED_MODULE_0__.RetryInterceptor(config);
        return this.withInterceptor(interceptor);
    }
    withDispatcher(dispatcher) {
        this.dispatcher = dispatcher;
        return this;
    }
}
function rejectOnError(response) {
    if (!response.ok) {
        throw response;
    }
    return response;
}
//# sourceMappingURL=http-client-configuration.js.map

/***/ }),

/***/ "./node_modules/@aurelia/fetch-client/dist/esm/http-client.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aurelia/fetch-client/dist/esm/http-client.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IHttpClient": () => /* binding */ IHttpClient,
/* harmony export */   "HttpClient": () => /* binding */ HttpClient
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _http_client_configuration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http-client-configuration.js */ "./node_modules/@aurelia/fetch-client/dist/esm/http-client-configuration.js");
/* harmony import */ var _retry_interceptor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./retry-interceptor.js */ "./node_modules/@aurelia/fetch-client/dist/esm/retry-interceptor.js");



const absoluteUrlRegexp = /^([a-z][a-z0-9+\-.]*:)?\/\//i;
const IHttpClient = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IHttpClient', x => x.singleton(HttpClient));
/**
 * An HTTP client based on the Fetch API.
 */
class HttpClient {
    /**
     * Creates an instance of HttpClient.
     */
    constructor() {
        this.dispatcher = null;
        this.activeRequestCount = 0;
        this.isRequesting = false;
        this.isConfigured = false;
        this.baseUrl = '';
        this.defaults = null;
        this.interceptors = [];
    }
    /**
     * Configure this client with default settings to be used by all requests.
     *
     * @param config - A configuration object, or a function that takes a config
     * object and configures it.
     * @returns The chainable instance of this HttpClient.
     * @chainable
     */
    configure(config) {
        let normalizedConfig;
        if (typeof config === 'object') {
            const requestInitConfiguration = { defaults: config };
            normalizedConfig = requestInitConfiguration;
        }
        else if (typeof config === 'function') {
            normalizedConfig = new _http_client_configuration_js__WEBPACK_IMPORTED_MODULE_1__.HttpClientConfiguration();
            normalizedConfig.baseUrl = this.baseUrl;
            normalizedConfig.defaults = { ...this.defaults };
            normalizedConfig.interceptors = this.interceptors;
            normalizedConfig.dispatcher = this.dispatcher;
            const c = config(normalizedConfig);
            if (Object.prototype.isPrototypeOf.call(_http_client_configuration_js__WEBPACK_IMPORTED_MODULE_1__.HttpClientConfiguration.prototype, c)) {
                normalizedConfig = c;
            }
        }
        else {
            throw new Error('invalid config');
        }
        const defaults = normalizedConfig.defaults;
        if (defaults !== undefined && Object.prototype.isPrototypeOf.call(Headers.prototype, defaults.headers)) {
            // Headers instances are not iterable in all browsers. Require a plain
            // object here to allow default headers to be merged into request headers.
            throw new Error('Default headers must be a plain object.');
        }
        const interceptors = normalizedConfig.interceptors;
        if (interceptors !== undefined && interceptors.length) {
            // find if there is a RetryInterceptor
            if (interceptors.filter(x => Object.prototype.isPrototypeOf.call(_retry_interceptor_js__WEBPACK_IMPORTED_MODULE_2__.RetryInterceptor.prototype, x)).length > 1) {
                throw new Error('Only one RetryInterceptor is allowed.');
            }
            const retryInterceptorIndex = interceptors.findIndex(x => Object.prototype.isPrototypeOf.call(_retry_interceptor_js__WEBPACK_IMPORTED_MODULE_2__.RetryInterceptor.prototype, x));
            if (retryInterceptorIndex >= 0 && retryInterceptorIndex !== interceptors.length - 1) {
                throw new Error('The retry interceptor must be the last interceptor defined.');
            }
        }
        this.baseUrl = normalizedConfig.baseUrl;
        this.defaults = defaults;
        this.interceptors = normalizedConfig.interceptors !== undefined ? normalizedConfig.interceptors : [];
        this.dispatcher = normalizedConfig.dispatcher;
        this.isConfigured = true;
        return this;
    }
    /**
     * Starts the process of fetching a resource. Default configuration parameters
     * will be applied to the Request. The constructed Request will be passed to
     * registered request interceptors before being sent. The Response will be passed
     * to registered Response interceptors before it is returned.
     *
     * See also https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    fetch(input, init) {
        this.trackRequestStart();
        let request = this.buildRequest(input, init);
        return this.processRequest(request, this.interceptors).then(result => {
            let response;
            if (Object.prototype.isPrototypeOf.call(Response.prototype, result)) {
                response = Promise.resolve(result);
            }
            else if (Object.prototype.isPrototypeOf.call(Request.prototype, result)) {
                request = result;
                response = fetch(request);
            }
            else {
                throw new Error(`An invalid result was returned by the interceptor chain. Expected a Request or Response instance, but got [${result}]`);
            }
            return this.processResponse(response, this.interceptors, request);
        })
            .then(result => {
            if (Object.prototype.isPrototypeOf.call(Request.prototype, result)) {
                return this.fetch(result);
            }
            return result;
        })
            .then(result => {
            this.trackRequestEnd();
            return result;
        }, error => {
            this.trackRequestEnd();
            throw error;
        });
    }
    buildRequest(input, init) {
        const defaults = this.defaults !== null ? this.defaults : {};
        let request;
        let body;
        let requestContentType;
        const parsedDefaultHeaders = parseHeaderValues(defaults.headers);
        if (Object.prototype.isPrototypeOf.call(Request.prototype, input)) {
            request = input;
            requestContentType = new Headers(request.headers).get('Content-Type');
        }
        else {
            if (!init) {
                init = {};
            }
            body = init.body;
            const bodyObj = body !== undefined ? { body: body } : null;
            const requestInit = { ...defaults, headers: {}, ...init, ...bodyObj };
            requestContentType = new Headers(requestInit.headers).get('Content-Type');
            request = new Request(getRequestUrl(this.baseUrl, input), requestInit);
        }
        if (!requestContentType) {
            if (new Headers(parsedDefaultHeaders).has('content-type')) {
                request.headers.set('Content-Type', new Headers(parsedDefaultHeaders).get('content-type'));
            }
            else if (body !== undefined && isJSON(body)) {
                request.headers.set('Content-Type', 'application/json');
            }
        }
        setDefaultHeaders(request.headers, parsedDefaultHeaders);
        if (body !== undefined && Object.prototype.isPrototypeOf.call(Blob.prototype, body) && body.type) {
            // work around bug in IE & Edge where the Blob type is ignored in the request
            // https://connect.microsoft.com/IE/feedback/details/2136163
            request.headers.set('Content-Type', body.type);
        }
        return request;
    }
    /**
     * Calls fetch as a GET request.
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    get(input, init) {
        return this.fetch(input, init);
    }
    /**
     * Calls fetch with request method set to POST.
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param body - The body of the request.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    post(input, body, init) {
        return this.callFetch(input, body, init, 'POST');
    }
    /**
     * Calls fetch with request method set to PUT.
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param body - The body of the request.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    put(input, body, init) {
        return this.callFetch(input, body, init, 'PUT');
    }
    /**
     * Calls fetch with request method set to PATCH.
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param body - The body of the request.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    patch(input, body, init) {
        return this.callFetch(input, body, init, 'PATCH');
    }
    /**
     * Calls fetch with request method set to DELETE.
     *
     * @param input - The resource that you wish to fetch. Either a
     * Request object, or a string containing the URL of the resource.
     * @param body - The body of the request.
     * @param init - An options object containing settings to be applied to
     * the Request.
     * @returns A Promise for the Response from the fetch request.
     */
    delete(input, body, init) {
        return this.callFetch(input, body, init, 'DELETE');
    }
    trackRequestStart() {
        this.isRequesting = !!(++this.activeRequestCount);
        if (this.isRequesting && this.dispatcher !== null) {
            const evt = new this.dispatcher.ownerDocument.defaultView.CustomEvent('aurelia-fetch-client-request-started', { bubbles: true, cancelable: true });
            setTimeout(() => { this.dispatcher.dispatchEvent(evt); }, 1);
        }
    }
    trackRequestEnd() {
        this.isRequesting = !!(--this.activeRequestCount);
        if (!this.isRequesting && this.dispatcher !== null) {
            const evt = new this.dispatcher.ownerDocument.defaultView.CustomEvent('aurelia-fetch-client-requests-drained', { bubbles: true, cancelable: true });
            setTimeout(() => { this.dispatcher.dispatchEvent(evt); }, 1);
        }
    }
    processRequest(request, interceptors) {
        return this.applyInterceptors(request, interceptors, 'request', 'requestError', this);
    }
    processResponse(response, interceptors, request) {
        return this.applyInterceptors(response, interceptors, 'response', 'responseError', request, this);
    }
    applyInterceptors(input, interceptors, successName, errorName, ...interceptorArgs) {
        return (interceptors !== undefined ? interceptors : [])
            .reduce((chain, interceptor) => {
            const successHandler = interceptor[successName];
            const errorHandler = interceptor[errorName];
            // TODO: Fix this, as it violates `strictBindCallApply`.
            return chain.then(successHandler ? (value => successHandler.call(interceptor, value, ...interceptorArgs)) : identity, errorHandler ? (reason => errorHandler.call(interceptor, reason, ...interceptorArgs)) : thrower);
        }, Promise.resolve(input));
    }
    callFetch(input, body, init, method) {
        if (!init) {
            init = {};
        }
        init.method = method;
        if (body) {
            init.body = body;
        }
        return this.fetch(input, init);
    }
}
function parseHeaderValues(headers) {
    const parsedHeaders = {};
    const $headers = headers !== undefined ? headers : {};
    for (const name in $headers) {
        if (Object.prototype.hasOwnProperty.call($headers, name)) {
            parsedHeaders[name] = (typeof $headers[name] === 'function')
                ? $headers[name]()
                : $headers[name];
        }
    }
    return parsedHeaders;
}
function getRequestUrl(baseUrl, url) {
    if (absoluteUrlRegexp.test(url)) {
        return url;
    }
    return (baseUrl !== undefined ? baseUrl : '') + url;
}
function setDefaultHeaders(headers, defaultHeaders) {
    const $defaultHeaders = defaultHeaders !== undefined ? defaultHeaders : {};
    for (const name in $defaultHeaders) {
        if (Object.prototype.hasOwnProperty.call($defaultHeaders, name) && !headers.has(name)) {
            headers.set(name, $defaultHeaders[name]);
        }
    }
}
function isJSON(str) {
    try {
        JSON.parse(str);
    }
    catch (err) {
        return false;
    }
    return true;
}
function identity(x) {
    return x;
}
function thrower(x) {
    throw x;
}
//# sourceMappingURL=http-client.js.map

/***/ }),

/***/ "./node_modules/@aurelia/fetch-client/dist/esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aurelia/fetch-client/dist/esm/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => /* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_0__.json,
/* harmony export */   "retryStrategy": () => /* reexport safe */ _retry_interceptor_js__WEBPACK_IMPORTED_MODULE_1__.retryStrategy,
/* harmony export */   "RetryInterceptor": () => /* reexport safe */ _retry_interceptor_js__WEBPACK_IMPORTED_MODULE_1__.RetryInterceptor,
/* harmony export */   "HttpClientConfiguration": () => /* reexport safe */ _http_client_configuration_js__WEBPACK_IMPORTED_MODULE_2__.HttpClientConfiguration,
/* harmony export */   "HttpClient": () => /* reexport safe */ _http_client_js__WEBPACK_IMPORTED_MODULE_3__.HttpClient,
/* harmony export */   "IHttpClient": () => /* reexport safe */ _http_client_js__WEBPACK_IMPORTED_MODULE_3__.IHttpClient
/* harmony export */ });
/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ "./node_modules/@aurelia/fetch-client/dist/esm/util.js");
/* harmony import */ var _retry_interceptor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retry-interceptor.js */ "./node_modules/@aurelia/fetch-client/dist/esm/retry-interceptor.js");
/* harmony import */ var _http_client_configuration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http-client-configuration.js */ "./node_modules/@aurelia/fetch-client/dist/esm/http-client-configuration.js");
/* harmony import */ var _http_client_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./http-client.js */ "./node_modules/@aurelia/fetch-client/dist/esm/http-client.js");




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aurelia/fetch-client/dist/esm/retry-interceptor.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aurelia/fetch-client/dist/esm/retry-interceptor.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "retryStrategy": () => /* binding */ retryStrategy,
/* harmony export */   "RetryInterceptor": () => /* binding */ RetryInterceptor
/* harmony export */ });
const retryStrategy = {
    fixed: 0,
    incremental: 1,
    exponential: 2,
    random: 3
};
const defaultRetryConfig = {
    maxRetries: 3,
    interval: 1000,
    strategy: retryStrategy.fixed
};
/**
 * Interceptor that retries requests on error, based on a given RetryConfiguration.
 */
class RetryInterceptor {
    /**
     * Creates an instance of RetryInterceptor.
     */
    constructor(retryConfig) {
        this.retryConfig = { ...defaultRetryConfig, ...(retryConfig !== undefined ? retryConfig : {}) };
        if (this.retryConfig.strategy === retryStrategy.exponential &&
            this.retryConfig.interval <= 1000) {
            throw new Error('An interval less than or equal to 1 second is not allowed when using the exponential retry strategy');
        }
    }
    /**
     * Called with the request before it is sent. It remembers the request so it can be retried on error.
     *
     * @param request - The request to be sent.
     * @returns The existing request, a new request or a response; or a Promise for any of these.
     */
    request(request) {
        if (!request.retryConfig) {
            request.retryConfig = { ...this.retryConfig };
            request.retryConfig.counter = 0;
        }
        // do this on every request
        request.retryConfig.requestClone = request.clone();
        return request;
    }
    /**
     * Called with the response after it is received. Clears the remembered request, as it was succesfull.
     *
     * @param response - The response.
     * @returns The response; or a Promise for one.
     */
    response(response, request) {
        // retry was successful, so clean up after ourselves
        Reflect.deleteProperty(request, 'retryConfig');
        return response;
    }
    /**
     * Handles fetch errors and errors generated by previous interceptors. This
     * function acts as a Promise rejection handler. It wil retry the remembered request based on the
     * configured RetryConfiguration.
     *
     * @param error - The rejection value from the fetch request or from a
     * previous interceptor.
     * @returns The response of the retry; or a Promise for one.
     */
    responseError(error, request, httpClient) {
        const { retryConfig } = request;
        const { requestClone } = retryConfig;
        return Promise.resolve().then(() => {
            if (retryConfig.counter < retryConfig.maxRetries) {
                const result = retryConfig.doRetry !== undefined ? retryConfig.doRetry(error, request) : true;
                return Promise.resolve(result).then(doRetry => {
                    if (doRetry) {
                        retryConfig.counter++;
                        const delay = calculateDelay(retryConfig);
                        return new Promise(resolve => setTimeout(resolve, !isNaN(delay) ? delay : 0))
                            .then(() => {
                            const newRequest = requestClone.clone();
                            if (typeof (retryConfig.beforeRetry) === 'function') {
                                return retryConfig.beforeRetry(newRequest, httpClient);
                            }
                            return newRequest;
                        })
                            .then(newRequest => {
                            const retryableRequest = { ...newRequest, retryConfig };
                            return httpClient.fetch(retryableRequest);
                        });
                    }
                    // no more retries, so clean up
                    Reflect.deleteProperty(request, 'retryConfig');
                    throw error;
                });
            }
            // no more retries, so clean up
            Reflect.deleteProperty(request, 'retryConfig');
            throw error;
        });
    }
}
function calculateDelay(retryConfig) {
    const { interval, strategy, minRandomInterval, maxRandomInterval, counter } = retryConfig;
    if (typeof (strategy) === 'function') {
        return retryConfig.strategy(counter);
    }
    switch (strategy) {
        case (retryStrategy.fixed):
            return retryStrategies[retryStrategy.fixed](interval);
        case (retryStrategy.incremental):
            return retryStrategies[retryStrategy.incremental](counter, interval);
        case (retryStrategy.exponential):
            return retryStrategies[retryStrategy.exponential](counter, interval);
        case (retryStrategy.random):
            return retryStrategies[retryStrategy.random](counter, interval, minRandomInterval, maxRandomInterval);
        default:
            throw new Error('Unrecognized retry strategy');
    }
}
const retryStrategies = [
    // fixed
    interval => interval,
    // incremental
    (retryCount, interval) => interval * retryCount,
    // exponential
    (retryCount, interval) => retryCount === 1 ? interval : interval ** retryCount / 1000,
    // random
    (retryCount, interval, minRandomInterval = 0, maxRandomInterval = 60000) => {
        return Math.random() * (maxRandomInterval - minRandomInterval) + minRandomInterval;
    }
];
//# sourceMappingURL=retry-interceptor.js.map

/***/ }),

/***/ "./node_modules/@aurelia/fetch-client/dist/esm/util.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aurelia/fetch-client/dist/esm/util.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => /* binding */ json
/* harmony export */ });
/**
 * Serialize an object to JSON. Useful for easily creating JSON fetch request bodies.
 *
 * @param body - The object to be serialized to JSON.
 * @param replacer - The JSON.stringify replacer used when serializing.
 * @returns A JSON string.
 */
function json(body, replacer) {
    return JSON.stringify((body !== undefined ? body : {}), replacer);
}
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/@aurelia/kernel/dist/esm/di.js":
/*!*****************************************************!*\
  !*** ./node_modules/@aurelia/kernel/dist/esm/di.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResolverBuilder": () => /* binding */ ResolverBuilder,
/* harmony export */   "DefaultResolver": () => /* binding */ DefaultResolver,
/* harmony export */   "ContainerConfiguration": () => /* binding */ ContainerConfiguration,
/* harmony export */   "DI": () => /* binding */ DI,
/* harmony export */   "IContainer": () => /* binding */ IContainer,
/* harmony export */   "IServiceLocator": () => /* binding */ IServiceLocator,
/* harmony export */   "inject": () => /* binding */ inject,
/* harmony export */   "transient": () => /* binding */ transient,
/* harmony export */   "singleton": () => /* binding */ singleton,
/* harmony export */   "all": () => /* binding */ all,
/* harmony export */   "lazy": () => /* binding */ lazy,
/* harmony export */   "optional": () => /* binding */ optional,
/* harmony export */   "ignore": () => /* binding */ ignore,
/* harmony export */   "newInstanceForScope": () => /* binding */ newInstanceForScope,
/* harmony export */   "newInstanceOf": () => /* binding */ newInstanceOf,
/* harmony export */   "ResolverStrategy": () => /* binding */ ResolverStrategy,
/* harmony export */   "Resolver": () => /* binding */ Resolver,
/* harmony export */   "Factory": () => /* binding */ Factory,
/* harmony export */   "Container": () => /* binding */ Container,
/* harmony export */   "ParameterizedRegistry": () => /* binding */ ParameterizedRegistry,
/* harmony export */   "Registration": () => /* binding */ Registration,
/* harmony export */   "InstanceProvider": () => /* binding */ InstanceProvider,
/* harmony export */   "validateKey": () => /* binding */ validateKey
/* harmony export */ });
/* harmony import */ var _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/metadata */ "./node_modules/@aurelia/metadata/dist/esm/index.js");
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functions.js */ "./node_modules/@aurelia/kernel/dist/esm/functions.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/kernel/dist/esm/platform.js");
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@aurelia/kernel/dist/esm/resource.js");

(0,_aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.applyMetadataPolyfill)(Reflect);



class ResolverBuilder {
    constructor(container, key) {
        this.container = container;
        this.key = key;
    }
    instance(value) {
        return this.registerResolver(0 /* instance */, value);
    }
    singleton(value) {
        return this.registerResolver(1 /* singleton */, value);
    }
    transient(value) {
        return this.registerResolver(2 /* transient */, value);
    }
    callback(value) {
        return this.registerResolver(3 /* callback */, value);
    }
    cachedCallback(value) {
        return this.registerResolver(3 /* callback */, cacheCallbackResult(value));
    }
    aliasTo(destinationKey) {
        return this.registerResolver(5 /* alias */, destinationKey);
    }
    registerResolver(strategy, state) {
        const { container, key } = this;
        this.container = this.key = (void 0);
        return container.registerResolver(key, new Resolver(key, strategy, state));
    }
}
function cloneArrayWithPossibleProps(source) {
    const clone = source.slice();
    const keys = Object.keys(source);
    const len = keys.length;
    let key;
    for (let i = 0; i < len; ++i) {
        key = keys[i];
        if (!(0,_functions_js__WEBPACK_IMPORTED_MODULE_1__.isArrayIndex)(key)) {
            clone[key] = source[key];
        }
    }
    return clone;
}
const DefaultResolver = {
    none(key) { throw Error(`${key.toString()} not registered, did you forget to add @singleton()?`); },
    singleton(key) { return new Resolver(key, 1 /* singleton */, key); },
    transient(key) { return new Resolver(key, 2 /* transient */, key); },
};
class ContainerConfiguration {
    constructor(inheritParentResources, defaultResolver) {
        this.inheritParentResources = inheritParentResources;
        this.defaultResolver = defaultResolver;
    }
    static from(config) {
        if (config === void 0 ||
            config === ContainerConfiguration.DEFAULT) {
            return ContainerConfiguration.DEFAULT;
        }
        return new ContainerConfiguration(config.inheritParentResources ?? false, config.defaultResolver ?? DefaultResolver.singleton);
    }
}
ContainerConfiguration.DEFAULT = ContainerConfiguration.from({});
const DI = {
    createContainer(config) {
        return new Container(null, ContainerConfiguration.from(config));
    },
    getDesignParamtypes(Type) {
        return _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn('design:paramtypes', Type);
    },
    getAnnotationParamtypes(Type) {
        const key = _resource_js__WEBPACK_IMPORTED_MODULE_3__.Protocol.annotation.keyFor('di:paramtypes');
        return _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(key, Type);
    },
    getOrCreateAnnotationParamTypes(Type) {
        const key = _resource_js__WEBPACK_IMPORTED_MODULE_3__.Protocol.annotation.keyFor('di:paramtypes');
        let annotationParamtypes = _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(key, Type);
        if (annotationParamtypes === void 0) {
            _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(key, annotationParamtypes = [], Type);
            _resource_js__WEBPACK_IMPORTED_MODULE_3__.Protocol.annotation.appendTo(Type, key);
        }
        return annotationParamtypes;
    },
    getDependencies(Type) {
        // Note: Every detail of this getDependencies method is pretty deliberate at the moment, and probably not yet 100% tested from every possible angle,
        // so be careful with making changes here as it can have a huge impact on complex end user apps.
        // Preferably, only make changes to the dependency resolution process via a RFC.
        const key = _resource_js__WEBPACK_IMPORTED_MODULE_3__.Protocol.annotation.keyFor('di:dependencies');
        let dependencies = _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(key, Type);
        if (dependencies === void 0) {
            // Type.length is the number of constructor parameters. If this is 0, it could mean the class has an empty constructor
            // but it could also mean the class has no constructor at all (in which case it inherits the constructor from the prototype).
            // Non-zero constructor length + no paramtypes means emitDecoratorMetadata is off, or the class has no decorator.
            // We're not doing anything with the above right now, but it's good to keep in mind for any future issues.
            const inject = Type.inject;
            if (inject === void 0) {
                // design:paramtypes is set by tsc when emitDecoratorMetadata is enabled.
                const designParamtypes = DI.getDesignParamtypes(Type);
                // au:annotation:di:paramtypes is set by the parameter decorator from DI.createInterface or by @inject
                const annotationParamtypes = DI.getAnnotationParamtypes(Type);
                if (designParamtypes === void 0) {
                    if (annotationParamtypes === void 0) {
                        // Only go up the prototype if neither static inject nor any of the paramtypes is defined, as
                        // there is no sound way to merge a type's deps with its prototype's deps
                        const Proto = Object.getPrototypeOf(Type);
                        if (typeof Proto === 'function' && Proto !== Function.prototype) {
                            dependencies = cloneArrayWithPossibleProps(DI.getDependencies(Proto));
                        }
                        else {
                            dependencies = [];
                        }
                    }
                    else {
                        // No design:paramtypes so just use the au:annotation:di:paramtypes
                        dependencies = cloneArrayWithPossibleProps(annotationParamtypes);
                    }
                }
                else if (annotationParamtypes === void 0) {
                    // No au:annotation:di:paramtypes so just use the design:paramtypes
                    dependencies = cloneArrayWithPossibleProps(designParamtypes);
                }
                else {
                    // We've got both, so merge them (in case of conflict on same index, au:annotation:di:paramtypes take precedence)
                    dependencies = cloneArrayWithPossibleProps(designParamtypes);
                    let len = annotationParamtypes.length;
                    let auAnnotationParamtype;
                    for (let i = 0; i < len; ++i) {
                        auAnnotationParamtype = annotationParamtypes[i];
                        if (auAnnotationParamtype !== void 0) {
                            dependencies[i] = auAnnotationParamtype;
                        }
                    }
                    const keys = Object.keys(annotationParamtypes);
                    len = keys.length;
                    let key;
                    for (let i = 0; i < len; ++i) {
                        key = keys[i];
                        if (!(0,_functions_js__WEBPACK_IMPORTED_MODULE_1__.isArrayIndex)(key)) {
                            dependencies[key] = annotationParamtypes[key];
                        }
                    }
                }
            }
            else {
                // Ignore paramtypes if we have static inject
                dependencies = cloneArrayWithPossibleProps(inject);
            }
            _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(key, dependencies, Type);
            _resource_js__WEBPACK_IMPORTED_MODULE_3__.Protocol.annotation.appendTo(Type, key);
        }
        return dependencies;
    },
    /**
     * creates a decorator that also matches an interface and can be used as a {@linkcode Key}.
     * ```ts
     * const ILogger = DI.createInterface<Logger>('Logger');
     * container.register(Registration.singleton(ILogger, getSomeLogger()));
     * const log = container.get(ILogger);
     * log.info('hello world');
     * class Foo {
     *   constructor( @ILogger log: ILogger ) {
     *     log.info('hello world');
     *   }
     * }
     * ```
     * you can also build default registrations into your interface.
     * ```ts
     * export const ILogger = DI.createInterface<Logger>('Logger', builder => builder.cachedCallback(LoggerDefault));
     * const log = container.get(ILogger);
     * log.info('hello world');
     * class Foo {
     *   constructor( @ILogger log: ILogger ) {
     *     log.info('hello world');
     *   }
     * }
     * ```
     * but these default registrations won't work the same with other decorators that take keys, for example
     * ```ts
     * export const MyStr = DI.createInterface<string>('MyStr', builder => builder.instance('somestring'));
     * class Foo {
     *   constructor( @optional(MyStr) public readonly str: string ) {
     *   }
     * }
     * container.get(Foo).str; // returns undefined
     * ```
     * to fix this add this line somewhere before you do a `get`
     * ```ts
     * container.register(MyStr);
     * container.get(Foo).str; // returns 'somestring'
     * ```
     *
     * - @param friendlyName used to improve error messaging
     */
    createInterface(configureOrName, configuror) {
        const configure = typeof configureOrName === 'function' ? configureOrName : configuror;
        const friendlyName = typeof configureOrName === 'string' ? configureOrName : undefined;
        const Interface = function (target, property, index) {
            if (target == null || new.target !== undefined) {
                throw new Error(`No registration for interface: '${Interface.friendlyName}'`); // TODO: add error (trying to resolve an InterfaceSymbol that has no registrations)
            }
            const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
            annotationParamtypes[index] = Interface;
        };
        Interface.$isInterface = true;
        Interface.friendlyName = friendlyName == null ? '(anonymous)' : friendlyName;
        if (configure != null) {
            Interface.register = function (container, key) {
                return configure(new ResolverBuilder(container, key ?? Interface));
            };
        }
        Interface.toString = function toString() {
            return `InterfaceSymbol<${Interface.friendlyName}>`;
        };
        return Interface;
    },
    inject(...dependencies) {
        return function (target, key, descriptor) {
            if (typeof descriptor === 'number') { // It's a parameter decorator.
                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
                const dep = dependencies[0];
                if (dep !== void 0) {
                    annotationParamtypes[descriptor] = dep;
                }
            }
            else if (key) { // It's a property decorator. Not supported by the container without plugins.
                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target.constructor);
                const dep = dependencies[0];
                if (dep !== void 0) {
                    annotationParamtypes[key] = dep;
                }
            }
            else if (descriptor) { // It's a function decorator (not a Class constructor)
                const fn = descriptor.value;
                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(fn);
                let dep;
                for (let i = 0; i < dependencies.length; ++i) {
                    dep = dependencies[i];
                    if (dep !== void 0) {
                        annotationParamtypes[i] = dep;
                    }
                }
            }
            else { // It's a class decorator.
                const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target);
                let dep;
                for (let i = 0; i < dependencies.length; ++i) {
                    dep = dependencies[i];
                    if (dep !== void 0) {
                        annotationParamtypes[i] = dep;
                    }
                }
            }
        };
    },
    /**
     * Registers the `target` class as a transient dependency; each time the dependency is resolved
     * a new instance will be created.
     *
     * @param target - The class / constructor function to register as transient.
     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
     *
     * @example ```ts
     * // On an existing class
     * class Foo { }
     * DI.transient(Foo);
     *
     * // Inline declaration
     * const Foo = DI.transient(class { });
     * // Foo is now strongly typed with register
     * Foo.register(container);
     * ```
     */
    transient(target) {
        target.register = function register(container) {
            const registration = Registration.transient(target, target);
            return registration.register(container, target);
        };
        target.registerInRequestor = false;
        return target;
    },
    /**
     * Registers the `target` class as a singleton dependency; the class will only be created once. Each
     * consecutive time the dependency is resolved, the same instance will be returned.
     *
     * @param target - The class / constructor function to register as a singleton.
     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
     * @example ```ts
     * // On an existing class
     * class Foo { }
     * DI.singleton(Foo);
     *
     * // Inline declaration
     * const Foo = DI.singleton(class { });
     * // Foo is now strongly typed with register
     * Foo.register(container);
     * ```
     */
    singleton(target, options = defaultSingletonOptions) {
        target.register = function register(container) {
            const registration = Registration.singleton(target, target);
            return registration.register(container, target);
        };
        target.registerInRequestor = options.scoped;
        return target;
    },
};
const IContainer = DI.createInterface('IContainer');
const IServiceLocator = IContainer;
function createResolver(getter) {
    return function (key) {
        const resolver = function (target, property, descriptor) {
            DI.inject(resolver)(target, property, descriptor);
        };
        resolver.$isResolver = true;
        resolver.resolve = function (handler, requestor) {
            return getter(key, handler, requestor);
        };
        return resolver;
    };
}
const inject = DI.inject;
function transientDecorator(target) {
    return DI.transient(target);
}
function transient(target) {
    return target == null ? transientDecorator : transientDecorator(target);
}
const defaultSingletonOptions = { scoped: false };
function singletonDecorator(target) {
    return DI.singleton(target);
}
function singleton(targetOrOptions) {
    if (typeof targetOrOptions === 'function') {
        return DI.singleton(targetOrOptions);
    }
    return function ($target) {
        return DI.singleton($target, targetOrOptions);
    };
}
function createAllResolver(getter) {
    return function (key, searchAncestors) {
        searchAncestors = !!searchAncestors;
        const resolver = function (target, property, descriptor) {
            DI.inject(resolver)(target, property, descriptor);
        };
        resolver.$isResolver = true;
        resolver.resolve = function (handler, requestor) {
            return getter(key, handler, requestor, searchAncestors);
        };
        return resolver;
    };
}
const all = createAllResolver((key, handler, requestor, searchAncestors) => requestor.getAll(key, searchAncestors));
/**
 * Lazily inject a dependency depending on whether the [[`Key`]] is present at the time of function call.
 *
 * You need to make your argument a function that returns the type, for example
 * ```ts
 * class Foo {
 *   constructor( @lazy('random') public random: () => number )
 * }
 * const foo = container.get(Foo); // instanceof Foo
 * foo.random(); // throws
 * ```
 * would throw an exception because you haven't registered `'random'` before calling the method. This, would give you a
 * new [['Math.random()']] number each time.
 * ```ts
 * class Foo {
 *   constructor( @lazy('random') public random: () => random )
 * }
 * container.register(Registration.callback('random', Math.random ));
 * container.get(Foo).random(); // some random number
 * container.get(Foo).random(); // another random number
 * ```
 * `@lazy` does not manage the lifecycle of the underlying key. If you want a singleton, you have to register as a
 * `singleton`, `transient` would also behave as you would expect, providing you a new instance each time.
 *
 * - @param key [[`Key`]]
 * see { @link DI.createInterface } on interactions with interfaces
 */
const lazy = createResolver((key, handler, requestor) => {
    return () => requestor.get(key);
});
/**
 * Allows you to optionally inject a dependency depending on whether the [[`Key`]] is present, for example
 * ```ts
 * class Foo {
 *   constructor( @inject('mystring') public str: string = 'somestring' )
 * }
 * container.get(Foo); // throws
 * ```
 * would fail
 * ```ts
 * class Foo {
 *   constructor( @optional('mystring') public str: string = 'somestring' )
 * }
 * container.get(Foo).str // somestring
 * ```
 * if you use it without a default it will inject `undefined`, so rember to mark your input type as
 * possibly `undefined`!
 *
 * - @param key: [[`Key`]]
 *
 * see { @link DI.createInterface } on interactions with interfaces
 */
const optional = createResolver((key, handler, requestor) => {
    if (requestor.has(key, true)) {
        return requestor.get(key);
    }
    else {
        return undefined;
    }
});
/**
 * ignore tells the container not to try to inject a dependency
 */
function ignore(target, property, descriptor) {
    DI.inject(ignore)(target, property, descriptor);
}
ignore.$isResolver = true;
ignore.resolve = () => undefined;
const newInstanceForScope = createResolver((key, handler, requestor) => {
    const instance = createNewInstance(key, handler);
    const instanceProvider = new InstanceProvider(String(key));
    instanceProvider.prepare(instance);
    requestor.registerResolver(key, instanceProvider, true);
    return instance;
});
const newInstanceOf = createResolver((key, handler, _requestor) => createNewInstance(key, handler));
function createNewInstance(key, handler) {
    return handler.getFactory(key).construct(handler);
}
/** @internal */
var ResolverStrategy;
(function (ResolverStrategy) {
    ResolverStrategy[ResolverStrategy["instance"] = 0] = "instance";
    ResolverStrategy[ResolverStrategy["singleton"] = 1] = "singleton";
    ResolverStrategy[ResolverStrategy["transient"] = 2] = "transient";
    ResolverStrategy[ResolverStrategy["callback"] = 3] = "callback";
    ResolverStrategy[ResolverStrategy["array"] = 4] = "array";
    ResolverStrategy[ResolverStrategy["alias"] = 5] = "alias";
})(ResolverStrategy || (ResolverStrategy = {}));
/** @internal */
class Resolver {
    constructor(key, strategy, state) {
        this.key = key;
        this.strategy = strategy;
        this.state = state;
        this.resolving = false;
    }
    get $isResolver() { return true; }
    register(container, key) {
        return container.registerResolver(key || this.key, this);
    }
    resolve(handler, requestor) {
        switch (this.strategy) {
            case 0 /* instance */:
                return this.state;
            case 1 /* singleton */: {
                if (this.resolving) {
                    throw new Error(`Cyclic dependency found: ${this.state.name}`);
                }
                this.resolving = true;
                this.state = handler.getFactory(this.state).construct(requestor);
                this.strategy = 0 /* instance */;
                this.resolving = false;
                return this.state;
            }
            case 2 /* transient */: {
                // Always create transients from the requesting container
                const factory = handler.getFactory(this.state);
                if (factory === null) {
                    throw new Error(`Resolver for ${String(this.key)} returned a null factory`);
                }
                return factory.construct(requestor);
            }
            case 3 /* callback */:
                return this.state(handler, requestor, this);
            case 4 /* array */:
                return this.state[0].resolve(handler, requestor);
            case 5 /* alias */:
                return requestor.get(this.state);
            default:
                throw new Error(`Invalid resolver strategy specified: ${this.strategy}.`);
        }
    }
    getFactory(container) {
        switch (this.strategy) {
            case 1 /* singleton */:
            case 2 /* transient */:
                return container.getFactory(this.state);
            case 5 /* alias */:
                return container.getResolver(this.state)?.getFactory?.(container) ?? null;
            default:
                return null;
        }
    }
}
function containerGetKey(d) {
    return this.get(d);
}
function transformInstance(inst, transform) {
    return transform(inst);
}
/** @internal */
class Factory {
    constructor(Type, dependencies) {
        this.Type = Type;
        this.dependencies = dependencies;
        this.transformers = null;
    }
    construct(container, dynamicDependencies) {
        let instance;
        if (dynamicDependencies === void 0) {
            instance = new this.Type(...this.dependencies.map(containerGetKey, container));
        }
        else {
            instance = new this.Type(...this.dependencies.map(containerGetKey, container), ...dynamicDependencies);
        }
        if (this.transformers == null) {
            return instance;
        }
        return this.transformers.reduce(transformInstance, instance);
    }
    registerTransformer(transformer) {
        (this.transformers ?? (this.transformers = [])).push(transformer);
    }
}
const containerResolver = {
    $isResolver: true,
    resolve(handler, requestor) {
        return requestor;
    }
};
function isRegistry(obj) {
    return typeof obj.register === 'function';
}
function isSelfRegistry(obj) {
    return isRegistry(obj) && typeof obj.registerInRequestor === 'boolean';
}
function isRegisterInRequester(obj) {
    return isSelfRegistry(obj) && obj.registerInRequestor;
}
function isClass(obj) {
    return obj.prototype !== void 0;
}
function isResourceKey(key) {
    return typeof key === 'string' && key.indexOf(':') > 0;
}
const InstrinsicTypeNames = new Set([
    'Array',
    'ArrayBuffer',
    'Boolean',
    'DataView',
    'Date',
    'Error',
    'EvalError',
    'Float32Array',
    'Float64Array',
    'Function',
    'Int8Array',
    'Int16Array',
    'Int32Array',
    'Map',
    'Number',
    'Object',
    'Promise',
    'RangeError',
    'ReferenceError',
    'RegExp',
    'Set',
    'SharedArrayBuffer',
    'String',
    'SyntaxError',
    'TypeError',
    'Uint8Array',
    'Uint8ClampedArray',
    'Uint16Array',
    'Uint32Array',
    'URIError',
    'WeakMap',
    'WeakSet',
]);
const factoryKey = 'di:factory';
const factoryAnnotationKey = _resource_js__WEBPACK_IMPORTED_MODULE_3__.Protocol.annotation.keyFor(factoryKey);
/** @internal */
class Container {
    constructor(parent, config) {
        this.parent = parent;
        this.config = config;
        this.registerDepth = 0;
        this.disposableResolvers = new Set();
        if (parent === null) {
            this.root = this;
            this.resolvers = new Map();
            this.factories = new Map();
            this.resourceResolvers = Object.create(null);
        }
        else {
            this.root = parent.root;
            this.resolvers = new Map();
            this.factories = parent.factories;
            if (config.inheritParentResources) {
                this.resourceResolvers = Object.assign(Object.create(null), parent.resourceResolvers, this.root.resourceResolvers);
            }
            else {
                this.resourceResolvers = Object.assign(Object.create(null), this.root.resourceResolvers);
            }
        }
        this.resolvers.set(IContainer, containerResolver);
    }
    get depth() {
        return this.parent === null ? 0 : this.parent.depth + 1;
    }
    register(...params) {
        if (++this.registerDepth === 100) {
            throw new Error(`Unable to autoregister dependency: [${params.map(String)}]`);
            // TODO: change to reporter.error and add various possible causes in description.
            // Most likely cause is trying to register a plain object that does not have a
            // register method and is not a class constructor
        }
        let current;
        let keys;
        let value;
        let j;
        let jj;
        for (let i = 0, ii = params.length; i < ii; ++i) {
            current = params[i];
            if (!(0,_aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.isObject)(current)) {
                continue;
            }
            if (isRegistry(current)) {
                current.register(this);
            }
            else if (_resource_js__WEBPACK_IMPORTED_MODULE_3__.Protocol.resource.has(current)) {
                const defs = _resource_js__WEBPACK_IMPORTED_MODULE_3__.Protocol.resource.getAll(current);
                if (defs.length === 1) {
                    // Fast path for the very common case
                    defs[0].register(this);
                }
                else {
                    const len = defs.length;
                    for (let d = 0; d < len; ++d) {
                        defs[d].register(this);
                    }
                }
            }
            else if (isClass(current)) {
                Registration.singleton(current, current).register(this);
            }
            else {
                keys = Object.keys(current);
                j = 0;
                jj = keys.length;
                for (; j < jj; ++j) {
                    value = current[keys[j]];
                    if (!(0,_aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {
                        continue;
                    }
                    // note: we could remove this if-branch and call this.register directly
                    // - the extra check is just a perf tweak to create fewer unnecessary arrays by the spread operator
                    if (isRegistry(value)) {
                        value.register(this);
                    }
                    else {
                        this.register(value);
                    }
                }
            }
        }
        --this.registerDepth;
        return this;
    }
    registerResolver(key, resolver, isDisposable = false) {
        validateKey(key);
        const resolvers = this.resolvers;
        const result = resolvers.get(key);
        if (result == null) {
            resolvers.set(key, resolver);
            if (isResourceKey(key)) {
                this.resourceResolvers[key] = resolver;
            }
        }
        else if (result instanceof Resolver && result.strategy === 4 /* array */) {
            result.state.push(resolver);
        }
        else {
            resolvers.set(key, new Resolver(key, 4 /* array */, [result, resolver]));
        }
        if (isDisposable) {
            this.disposableResolvers.add(resolver);
        }
        return resolver;
    }
    // public deregisterResolverFor<K extends Key, T = K>(key: K): void {
    //   // const console =  (globalThis as any).console;
    //   // console.group("deregisterResolverFor");
    //   validateKey(key);
    //   let current: Container = this;
    //   let resolver: IResolver | undefined;
    //   while (current != null) {
    //     resolver = current.resolvers.get(key);
    //     if (resolver != null) { break; }
    //     if (current.parent == null) { return; }
    //     current = current.parent;
    //   }
    //   if (resolver === void 0) { return; }
    //   if (resolver instanceof Resolver && resolver.strategy === ResolverStrategy.array) {
    //     throw new Error('Cannot deregister a resolver with array strategy');
    //   }
    //   if (this.disposableResolvers.has(resolver as IDisposableResolver<T>)) {
    //     (resolver as IDisposableResolver<T>).dispose();
    //   }
    //   if (isResourceKey(key)) {
    //     // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
    //     delete this.resourceResolvers[key];
    //   }
    //   // console.log(`BEFORE delete ${Array.from(current.resolvers.keys()).map((k) => k.toString())}`);
    //   current.resolvers.delete(key);
    //   // console.log(`AFTER delete ${Array.from(current.resolvers.keys()).map((k) => k.toString())}`);
    //   // console.groupEnd();
    // }
    registerTransformer(key, transformer) {
        const resolver = this.getResolver(key);
        if (resolver == null) {
            return false;
        }
        if (resolver.getFactory) {
            const factory = resolver.getFactory(this);
            if (factory == null) {
                return false;
            }
            // This type cast is a bit of a hacky one, necessary due to the duplicity of IResolverLike.
            // Problem is that that interface's type arg can be of type Key, but the getFactory method only works on
            // type Constructable. So the return type of that optional method has this additional constraint, which
            // seems to confuse the type checker.
            factory.registerTransformer(transformer);
            return true;
        }
        return false;
    }
    getResolver(key, autoRegister = true) {
        validateKey(key);
        if (key.resolve !== void 0) {
            return key;
        }
        let current = this;
        let resolver;
        while (current != null) {
            resolver = current.resolvers.get(key);
            if (resolver == null) {
                if (current.parent == null) {
                    const handler = (isRegisterInRequester(key)) ? this : current;
                    return autoRegister ? this.jitRegister(key, handler) : null;
                }
                current = current.parent;
            }
            else {
                return resolver;
            }
        }
        return null;
    }
    has(key, searchAncestors = false) {
        return this.resolvers.has(key)
            ? true
            : searchAncestors && this.parent != null
                ? this.parent.has(key, true)
                : false;
    }
    get(key) {
        validateKey(key);
        if (key.$isResolver) {
            return key.resolve(this, this);
        }
        let current = this;
        let resolver;
        while (current != null) {
            resolver = current.resolvers.get(key);
            if (resolver == null) {
                if (current.parent == null) {
                    const handler = (isRegisterInRequester(key)) ? this : current;
                    resolver = this.jitRegister(key, handler);
                    return resolver.resolve(current, this);
                }
                current = current.parent;
            }
            else {
                return resolver.resolve(current, this);
            }
        }
        throw new Error(`Unable to resolve key: ${key}`);
    }
    getAll(key, searchAncestors = false) {
        validateKey(key);
        const requestor = this;
        let current = requestor;
        let resolver;
        if (searchAncestors) {
            let resolutions = _platform_js__WEBPACK_IMPORTED_MODULE_2__.emptyArray;
            while (current != null) {
                resolver = current.resolvers.get(key);
                if (resolver != null) {
                    resolutions = resolutions.concat(buildAllResponse(resolver, current, requestor));
                }
                current = current.parent;
            }
            return resolutions;
        }
        else {
            while (current != null) {
                resolver = current.resolvers.get(key);
                if (resolver == null) {
                    current = current.parent;
                    if (current == null) {
                        return _platform_js__WEBPACK_IMPORTED_MODULE_2__.emptyArray;
                    }
                }
                else {
                    return buildAllResponse(resolver, current, requestor);
                }
            }
        }
        return _platform_js__WEBPACK_IMPORTED_MODULE_2__.emptyArray;
    }
    getFactory(Type) {
        let factory = this.factories.get(Type);
        if (factory === void 0) {
            if ((0,_functions_js__WEBPACK_IMPORTED_MODULE_1__.isNativeFunction)(Type)) {
                throw new Error(`${Type.name} is a native function and therefore cannot be safely constructed by DI. If this is intentional, please use a callback or cachedCallback resolver.`);
            }
            this.factories.set(Type, factory = new Factory(Type, DI.getDependencies(Type)));
        }
        return factory;
    }
    registerFactory(key, factory) {
        this.factories.set(key, factory);
    }
    createChild(config) {
        if (config === void 0 && this.config.inheritParentResources) {
            if (this.config === ContainerConfiguration.DEFAULT) {
                return new Container(this, this.config);
            }
            return new Container(this, ContainerConfiguration.from({
                ...this.config,
                inheritParentResources: false,
            }));
        }
        return new Container(this, ContainerConfiguration.from(config ?? this.config));
    }
    disposeResolvers() {
        const disposables = Array.from(this.disposableResolvers);
        while (disposables.length > 0) {
            disposables.pop()?.dispose();
        }
    }
    find(kind, name) {
        const key = kind.keyFrom(name);
        let resolver = this.resourceResolvers[key];
        if (resolver === void 0) {
            resolver = this.root.resourceResolvers[key];
            if (resolver === void 0) {
                return null;
            }
        }
        if (resolver === null) {
            return null;
        }
        if (typeof resolver.getFactory === 'function') {
            const factory = resolver.getFactory(this);
            if (factory === null || factory === void 0) {
                return null;
            }
            const definition = _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(kind.name, factory.Type);
            if (definition === void 0) {
                // TODO: we may want to log a warning here, or even throw. This would happen if a dependency is registered with a resource-like key
                // but does not actually have a definition associated via the type's metadata. That *should* generally not happen.
                return null;
            }
            return definition;
        }
        return null;
    }
    create(kind, name) {
        const key = kind.keyFrom(name);
        let resolver = this.resourceResolvers[key];
        if (resolver === void 0) {
            resolver = this.root.resourceResolvers[key];
            if (resolver === void 0) {
                return null;
            }
            return resolver.resolve(this.root, this) ?? null;
        }
        return resolver.resolve(this, this) ?? null;
    }
    dispose() {
        this.disposeResolvers();
        this.resolvers.clear();
    }
    jitRegister(keyAsValue, handler) {
        if (typeof keyAsValue !== 'function') {
            throw new Error(`Attempted to jitRegister something that is not a constructor: '${keyAsValue}'. Did you forget to register this resource?`);
        }
        if (InstrinsicTypeNames.has(keyAsValue.name)) {
            throw new Error(`Attempted to jitRegister an intrinsic type: ${keyAsValue.name}. Did you forget to add @inject(Key)`);
        }
        if (isRegistry(keyAsValue)) {
            const registrationResolver = keyAsValue.register(handler, keyAsValue);
            if (!(registrationResolver instanceof Object) || registrationResolver.resolve == null) {
                const newResolver = handler.resolvers.get(keyAsValue);
                if (newResolver != void 0) {
                    return newResolver;
                }
                throw new Error(`Invalid resolver returned from the static register method`);
            }
            return registrationResolver;
        }
        else if (_resource_js__WEBPACK_IMPORTED_MODULE_3__.Protocol.resource.has(keyAsValue)) {
            const defs = _resource_js__WEBPACK_IMPORTED_MODULE_3__.Protocol.resource.getAll(keyAsValue);
            if (defs.length === 1) {
                // Fast path for the very common case
                defs[0].register(handler);
            }
            else {
                const len = defs.length;
                for (let d = 0; d < len; ++d) {
                    defs[d].register(handler);
                }
            }
            const newResolver = handler.resolvers.get(keyAsValue);
            if (newResolver != void 0) {
                return newResolver;
            }
            throw new Error(`Invalid resolver returned from the static register method`);
        }
        else if (keyAsValue.$isInterface) {
            throw new Error(`Attempted to jitRegister an interface: ${keyAsValue.friendlyName}`);
        }
        else {
            const resolver = this.config.defaultResolver(keyAsValue, handler);
            handler.resolvers.set(keyAsValue, resolver);
            return resolver;
        }
    }
}
/**
 * An implementation of IRegistry that delegates registration to a
 * separately registered class. The ParameterizedRegistry facilitates the
 * passing of parameters to the final registry.
 */
class ParameterizedRegistry {
    constructor(key, params) {
        this.key = key;
        this.params = params;
    }
    register(container) {
        if (container.has(this.key, true)) {
            const registry = container.get(this.key);
            registry.register(container, ...this.params);
        }
        else {
            container.register(...this.params.filter(x => typeof x === 'object'));
        }
    }
}
const cache = new WeakMap();
function cacheCallbackResult(fun) {
    return function (handler, requestor, resolver) {
        if (cache.has(resolver)) {
            return cache.get(resolver);
        }
        const t = fun(handler, requestor, resolver);
        cache.set(resolver, t);
        return t;
    };
}
/**
 * you can use the resulting {@linkcode IRegistration} of any of the factory methods
 * to register with the container, e.g.
 * ```
 * class Foo {}
 * const container = DI.createContainer();
 * container.register(Registration.instance(Foo, new Foo()));
 * container.get(Foo);
 * ```
 */
const Registration = {
    /**
     * allows you to pass an instance.
     * Every time you request this {@linkcode Key} you will get this instance back.
     * ```
     * Registration.instance(Foo, new Foo()));
     * ```
     *
     * @param key
     * @param value
     */
    instance(key, value) {
        return new Resolver(key, 0 /* instance */, value);
    },
    /**
     * Creates an instance from the class.
     * Every time you request this {@linkcode Key} you will get the same one back.
     * ```
     * Registration.singleton(Foo, Foo);
     * ```
     *
     * @param key
     * @param value
     */
    singleton(key, value) {
        return new Resolver(key, 1 /* singleton */, value);
    },
    /**
     * Creates an instance from a class.
     * Every time you request this {@linkcode Key} you will get a new instance.
     * ```
     * Registration.instance(Foo, Foo);
     * ```
     *
     * @param key
     * @param value
     */
    transient(key, value) {
        return new Resolver(key, 2 /* transient */, value);
    },
    /**
     * Creates an instance from the method passed.
     * Every time you request this {@linkcode Key} you will get a new instance.
     * ```
     * Registration.callback(Foo, () => new Foo());
     * Registration.callback(Bar, (c: IContainer) => new Bar(c.get(Foo)));
     * ```
     *
     * @param key
     * @param callback
     */
    callback(key, callback) {
        return new Resolver(key, 3 /* callback */, callback);
    },
    /**
     * Creates an instance from the method passed.
     * On the first request for the {@linkcode Key} your callback is called and returns an instance.
     * subsequent requests for the {@linkcode Key}, the initial instance returned will be returned.
     * If you pass the same {@linkcode Registration} to another container the same cached value will be used.
     * Should all references to the resolver returned be removed, the cache will expire.
     * ```
     * Registration.cachedCallback(Foo, () => new Foo());
     * Registration.cachedCallback(Bar, (c: IContainer) => new Bar(c.get(Foo)));
     * ```
     *
     * @param key
     * @param callback
     */
    cachedCallback(key, callback) {
        return new Resolver(key, 3 /* callback */, cacheCallbackResult(callback));
    },
    /**
     * creates an alternate {@linkcode Key} to retrieve an instance by.
     * Returns the same scope as the original {@linkcode Key}.
     * ```
     * Register.singleton(Foo, Foo)
     * Register.aliasTo(Foo, MyFoos);
     *
     * container.getAll(MyFoos) // contains an instance of Foo
     * ```
     *
     * @param originalKey
     * @param aliasKey
     */
    aliasTo(originalKey, aliasKey) {
        return new Resolver(aliasKey, 5 /* alias */, originalKey);
    },
    /**
     * @internal
     * @param key
     * @param params
     */
    defer(key, ...params) {
        return new ParameterizedRegistry(key, params);
    }
};
class InstanceProvider {
    constructor(friendlyName) {
        this.friendlyName = friendlyName;
        this.instance = null;
    }
    prepare(instance) {
        this.instance = instance;
    }
    get $isResolver() { return true; }
    resolve() {
        if (this.instance == null) {
            throw new Error(`Cannot call resolve ${this.friendlyName} before calling prepare or after calling dispose.`);
        }
        return this.instance;
    }
    dispose() {
        this.instance = null;
    }
}
/** @internal */
function validateKey(key) {
    if (key === null || key === void 0) {
        throw new Error('key/value cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?');
    }
}
function buildAllResponse(resolver, handler, requestor) {
    if (resolver instanceof Resolver && resolver.strategy === 4 /* array */) {
        const state = resolver.state;
        let i = state.length;
        const results = new Array(i);
        while (i--) {
            results[i] = state[i].resolve(handler, requestor);
        }
        return results;
    }
    return [resolver.resolve(handler, requestor)];
}
//# sourceMappingURL=di.js.map

/***/ }),

/***/ "./node_modules/@aurelia/kernel/dist/esm/eventaggregator.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aurelia/kernel/dist/esm/eventaggregator.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IEventAggregator": () => /* binding */ IEventAggregator,
/* harmony export */   "EventAggregator": () => /* binding */ EventAggregator
/* harmony export */ });
/* harmony import */ var _di_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./di.js */ "./node_modules/@aurelia/kernel/dist/esm/di.js");
/* eslint-disable @typescript-eslint/restrict-template-expressions */

/**
 * Represents a handler for an EventAggregator event.
 */
class Handler {
    constructor(messageType, callback) {
        this.messageType = messageType;
        this.callback = callback;
    }
    handle(message) {
        if (message instanceof this.messageType) {
            this.callback.call(null, message);
        }
    }
}
const IEventAggregator = _di_js__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IEventAggregator', x => x.singleton(EventAggregator));
/**
 * Enables loosely coupled publish/subscribe messaging.
 */
class EventAggregator {
    constructor() {
        /** @internal */
        this.eventLookup = {};
        /** @internal */
        this.messageHandlers = [];
    }
    publish(channelOrInstance, message) {
        if (!channelOrInstance) {
            throw new Error(`Invalid channel name or instance: ${channelOrInstance}.`);
        }
        if (typeof channelOrInstance === 'string') {
            let subscribers = this.eventLookup[channelOrInstance];
            if (subscribers !== void 0) {
                subscribers = subscribers.slice();
                let i = subscribers.length;
                while (i-- > 0) {
                    subscribers[i](message, channelOrInstance);
                }
            }
        }
        else {
            const subscribers = this.messageHandlers.slice();
            let i = subscribers.length;
            while (i-- > 0) {
                subscribers[i].handle(channelOrInstance);
            }
        }
    }
    subscribe(channelOrType, callback) {
        if (!channelOrType) {
            throw new Error(`Invalid channel name or type: ${channelOrType}.`);
        }
        let handler;
        let subscribers;
        if (typeof channelOrType === 'string') {
            if (this.eventLookup[channelOrType] === void 0) {
                this.eventLookup[channelOrType] = [];
            }
            handler = callback;
            subscribers = this.eventLookup[channelOrType];
        }
        else {
            handler = new Handler(channelOrType, callback);
            subscribers = this.messageHandlers;
        }
        subscribers.push(handler);
        return {
            dispose() {
                const idx = subscribers.indexOf(handler);
                if (idx !== -1) {
                    subscribers.splice(idx, 1);
                }
            }
        };
    }
    subscribeOnce(channelOrType, callback) {
        const sub = this.subscribe(channelOrType, function (message, event) {
            sub.dispose();
            callback(message, event);
        });
        return sub;
    }
}
//# sourceMappingURL=eventaggregator.js.map

/***/ }),

/***/ "./node_modules/@aurelia/kernel/dist/esm/functions.js":
/*!************************************************************!*\
  !*** ./node_modules/@aurelia/kernel/dist/esm/functions.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArrayIndex": () => /* binding */ isArrayIndex,
/* harmony export */   "isNumberOrBigInt": () => /* binding */ isNumberOrBigInt,
/* harmony export */   "isStringOrDate": () => /* binding */ isStringOrDate,
/* harmony export */   "camelCase": () => /* binding */ camelCase,
/* harmony export */   "pascalCase": () => /* binding */ pascalCase,
/* harmony export */   "kebabCase": () => /* binding */ kebabCase,
/* harmony export */   "toArray": () => /* binding */ toArray,
/* harmony export */   "nextId": () => /* binding */ nextId,
/* harmony export */   "resetId": () => /* binding */ resetId,
/* harmony export */   "compareNumber": () => /* binding */ compareNumber,
/* harmony export */   "mergeDistinct": () => /* binding */ mergeDistinct,
/* harmony export */   "bound": () => /* binding */ bound,
/* harmony export */   "mergeArrays": () => /* binding */ mergeArrays,
/* harmony export */   "mergeObjects": () => /* binding */ mergeObjects,
/* harmony export */   "firstDefined": () => /* binding */ firstDefined,
/* harmony export */   "getPrototypeChain": () => /* binding */ getPrototypeChain,
/* harmony export */   "toLookup": () => /* binding */ toLookup,
/* harmony export */   "isNativeFunction": () => /* binding */ isNativeFunction,
/* harmony export */   "onResolve": () => /* binding */ onResolve,
/* harmony export */   "resolveAll": () => /* binding */ resolveAll
/* harmony export */ });
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/kernel/dist/esm/platform.js");

const isNumericLookup = {};
/**
 * Efficiently determine whether the provided property key is numeric
 * (and thus could be an array indexer) or not.
 *
 * Always returns true for values of type `'number'`.
 *
 * Otherwise, only returns true for strings that consist only of positive integers.
 *
 * Results are cached.
 */
function isArrayIndex(value) {
    switch (typeof value) {
        case 'number':
            return value >= 0 && (value | 0) === value;
        case 'string': {
            const result = isNumericLookup[value];
            if (result !== void 0) {
                return result;
            }
            const length = value.length;
            if (length === 0) {
                return isNumericLookup[value] = false;
            }
            let ch = 0;
            for (let i = 0; i < length; ++i) {
                ch = value.charCodeAt(i);
                if (i === 0 && ch === 0x30 && length > 1 /* must not start with 0 */ || ch < 0x30 /* 0 */ || ch > 0x39 /* 9 */) {
                    return isNumericLookup[value] = false;
                }
            }
            return isNumericLookup[value] = true;
        }
        default:
            return false;
    }
}
/**
 * Determines if the value passed is a number or bigint for parsing purposes
 *
 * @param value - Value to evaluate
 */
function isNumberOrBigInt(value) {
    switch (typeof value) {
        case 'number':
        case 'bigint':
            return true;
        default:
            return false;
    }
}
/**
 * Determines if the value passed is a number or bigint for parsing purposes
 *
 * @param value - Value to evaluate
 */
function isStringOrDate(value) {
    switch (typeof value) {
        case 'string':
            return true;
        case 'object':
            return value instanceof Date;
        default:
            return false;
    }
}
/**
 * Base implementation of camel and kebab cases
 */
const baseCase = (function () {
    let CharKind;
    (function (CharKind) {
        CharKind[CharKind["none"] = 0] = "none";
        CharKind[CharKind["digit"] = 1] = "digit";
        CharKind[CharKind["upper"] = 2] = "upper";
        CharKind[CharKind["lower"] = 3] = "lower";
    })(CharKind || (CharKind = {}));
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    const isDigit = Object.assign(Object.create(null), {
        '0': true,
        '1': true,
        '2': true,
        '3': true,
        '4': true,
        '5': true,
        '6': true,
        '7': true,
        '8': true,
        '9': true,
    });
    function charToKind(char) {
        if (char === '') {
            // We get this if we do charAt() with an index out of range
            return 0 /* none */;
        }
        if (char !== char.toUpperCase()) {
            return 3 /* lower */;
        }
        if (char !== char.toLowerCase()) {
            return 2 /* upper */;
        }
        if (isDigit[char] === true) {
            return 1 /* digit */;
        }
        return 0 /* none */;
    }
    return function (input, cb) {
        const len = input.length;
        if (len === 0) {
            return input;
        }
        let sep = false;
        let output = '';
        let prevKind;
        let curChar = '';
        let curKind = 0 /* none */;
        let nextChar = input.charAt(0);
        let nextKind = charToKind(nextChar);
        for (let i = 0; i < len; ++i) {
            prevKind = curKind;
            curChar = nextChar;
            curKind = nextKind;
            nextChar = input.charAt(i + 1);
            nextKind = charToKind(nextChar);
            if (curKind === 0 /* none */) {
                if (output.length > 0) {
                    // Only set sep to true if it's not at the beginning of output.
                    sep = true;
                }
            }
            else {
                if (!sep && output.length > 0 && curKind === 2 /* upper */) {
                    // Separate UAFoo into UA Foo.
                    // Separate uaFOO into ua FOO.
                    sep = prevKind === 3 /* lower */ || nextKind === 3 /* lower */;
                }
                output += cb(curChar, sep);
                sep = false;
            }
        }
        return output;
    };
})();
/**
 * Efficiently convert a string to camelCase.
 *
 * Non-alphanumeric characters are treated as separators.
 *
 * Primarily used by Aurelia to convert DOM attribute names to ViewModel property names.
 *
 * Results are cached.
 */
const camelCase = (function () {
    const cache = Object.create(null);
    function callback(char, sep) {
        return sep ? char.toUpperCase() : char.toLowerCase();
    }
    return function (input) {
        let output = cache[input];
        if (output === void 0) {
            output = cache[input] = baseCase(input, callback);
        }
        return output;
    };
})();
/**
 * Efficiently convert a string to PascalCase.
 *
 * Non-alphanumeric characters are treated as separators.
 *
 * Primarily used by Aurelia to convert element names to class names for synthetic types.
 *
 * Results are cached.
 */
const pascalCase = (function () {
    const cache = Object.create(null);
    return function (input) {
        let output = cache[input];
        if (output === void 0) {
            output = camelCase(input);
            if (output.length > 0) {
                output = output[0].toUpperCase() + output.slice(1);
            }
            cache[input] = output;
        }
        return output;
    };
})();
/**
 * Efficiently convert a string to kebab-case.
 *
 * Non-alphanumeric characters are treated as separators.
 *
 * Primarily used by Aurelia to convert ViewModel property names to DOM attribute names.
 *
 * Results are cached.
 */
const kebabCase = (function () {
    const cache = Object.create(null);
    function callback(char, sep) {
        return sep ? `-${char.toLowerCase()}` : char.toLowerCase();
    }
    return function (input) {
        let output = cache[input];
        if (output === void 0) {
            output = cache[input] = baseCase(input, callback);
        }
        return output;
    };
})();
/**
 * Efficiently (up to 10x faster than `Array.from`) convert an `ArrayLike` to a real array.
 *
 * Primarily used by Aurelia to convert DOM node lists to arrays.
 */
function toArray(input) {
    // benchmark: http://jsben.ch/xjsyF
    const { length } = input;
    const arr = Array(length);
    for (let i = 0; i < length; ++i) {
        arr[i] = input[i];
    }
    return arr;
}
const ids = {};
/**
 * Retrieve the next ID in a sequence for a given string, starting with `1`.
 *
 * Used by Aurelia to assign unique ID's to controllers and resources.
 *
 * Aurelia will always prepend the context name with `au$`, so as long as you avoid
 * using that convention you should be safe from collisions.
 */
function nextId(context) {
    if (ids[context] === void 0) {
        ids[context] = 0;
    }
    return ++ids[context];
}
/**
 * Reset the ID for the given string, so that `nextId` will return `1` again for the next call.
 *
 * Used by Aurelia to reset ID's in between unit tests.
 */
function resetId(context) {
    ids[context] = 0;
}
/**
 * A compare function to pass to `Array.prototype.sort` for sorting numbers.
 * This is needed for numeric sort, since the default sorts them as strings.
 */
function compareNumber(a, b) {
    return a - b;
}
/**
 * Efficiently merge and deduplicate the (primitive) values in two arrays.
 *
 * Does not deduplicate existing values in the first array.
 *
 * Guards against null or undefined arrays.
 *
 * Returns `emptyArray` if both arrays are either `null`, `undefined` or `emptyArray`
 *
 * @param slice - If `true`, always returns a new array copy (unless neither array is/has a value)
 */
function mergeDistinct(arr1, arr2, slice) {
    if (arr1 === void 0 || arr1 === null || arr1 === _platform_js__WEBPACK_IMPORTED_MODULE_0__.emptyArray) {
        if (arr2 === void 0 || arr2 === null || arr2 === _platform_js__WEBPACK_IMPORTED_MODULE_0__.emptyArray) {
            return _platform_js__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
        }
        else {
            return slice ? arr2.slice(0) : arr2;
        }
    }
    else if (arr2 === void 0 || arr2 === null || arr2 === _platform_js__WEBPACK_IMPORTED_MODULE_0__.emptyArray) {
        return slice ? arr1.slice(0) : arr1;
    }
    const lookup = {};
    const arr3 = slice ? arr1.slice(0) : arr1;
    let len1 = arr1.length;
    let len2 = arr2.length;
    while (len1-- > 0) {
        lookup[arr1[len1]] = true;
    }
    let item;
    while (len2-- > 0) {
        item = arr2[len2];
        if (lookup[item] === void 0) {
            arr3.push(item);
            lookup[item] = true;
        }
    }
    return arr3;
}
/**
 * Decorator. (lazily) bind the method to the class instance on first call.
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function bound(target, key, descriptor) {
    return {
        configurable: true,
        enumerable: descriptor.enumerable,
        get() {
            const boundFn = descriptor.value.bind(this);
            Reflect.defineProperty(this, key, {
                value: boundFn,
                writable: true,
                configurable: true,
                enumerable: descriptor.enumerable,
            });
            return boundFn;
        },
    };
}
function mergeArrays(...arrays) {
    const result = [];
    let k = 0;
    const arraysLen = arrays.length;
    let arrayLen = 0;
    let array;
    for (let i = 0; i < arraysLen; ++i) {
        array = arrays[i];
        if (array !== void 0) {
            arrayLen = array.length;
            for (let j = 0; j < arrayLen; ++j) {
                result[k++] = array[j];
            }
        }
    }
    return result;
}
function mergeObjects(...objects) {
    const result = {};
    const objectsLen = objects.length;
    let object;
    let key;
    for (let i = 0; i < objectsLen; ++i) {
        object = objects[i];
        if (object !== void 0) {
            for (key in object) {
                result[key] = object[key];
            }
        }
    }
    return result;
}
function firstDefined(...values) {
    const len = values.length;
    let value;
    for (let i = 0; i < len; ++i) {
        value = values[i];
        if (value !== void 0) {
            return value;
        }
    }
    throw new Error(`No default value found`);
}
const getPrototypeChain = (function () {
    const functionPrototype = Function.prototype;
    const getPrototypeOf = Object.getPrototypeOf;
    const cache = new WeakMap();
    let proto = functionPrototype;
    let i = 0;
    let chain = void 0;
    return function (Type) {
        chain = cache.get(Type);
        if (chain === void 0) {
            cache.set(Type, chain = [proto = Type]);
            i = 0;
            while ((proto = getPrototypeOf(proto)) !== functionPrototype) {
                chain[++i] = proto;
            }
        }
        return chain;
    };
})();
function toLookup(...objs) {
    return Object.assign(Object.create(null), ...objs);
}
/**
 * Determine whether the value is a native function.
 *
 * @param fn - The function to check.
 * @returns `true` is the function is a native function, otherwise `false`
 */
const isNativeFunction = (function () {
    // eslint-disable-next-line @typescript-eslint/ban-types
    const lookup = new WeakMap();
    let isNative = false;
    let sourceText = '';
    let i = 0;
    // eslint-disable-next-line @typescript-eslint/ban-types
    return function (fn) {
        isNative = lookup.get(fn);
        if (isNative === void 0) {
            sourceText = fn.toString();
            i = sourceText.length;
            // http://www.ecma-international.org/ecma-262/#prod-NativeFunction
            isNative = (
            // 29 is the length of 'function () { [native code] }' which is the smallest length of a native function string
            i >= 29 &&
                // 100 seems to be a safe upper bound of the max length of a native function. In Chrome and FF it's 56, in Edge it's 61.
                i <= 100 &&
                // This whole heuristic *could* be tricked by a comment. Do we need to care about that?
                sourceText.charCodeAt(i - 1) === 0x7D && // }
                // TODO: the spec is a little vague about the precise constraints, so we do need to test this across various browsers to make sure just one whitespace is a safe assumption.
                sourceText.charCodeAt(i - 2) <= 0x20 && // whitespace
                sourceText.charCodeAt(i - 3) === 0x5D && // ]
                sourceText.charCodeAt(i - 4) === 0x65 && // e
                sourceText.charCodeAt(i - 5) === 0x64 && // d
                sourceText.charCodeAt(i - 6) === 0x6F && // o
                sourceText.charCodeAt(i - 7) === 0x63 && // c
                sourceText.charCodeAt(i - 8) === 0x20 && //
                sourceText.charCodeAt(i - 9) === 0x65 && // e
                sourceText.charCodeAt(i - 10) === 0x76 && // v
                sourceText.charCodeAt(i - 11) === 0x69 && // i
                sourceText.charCodeAt(i - 12) === 0x74 && // t
                sourceText.charCodeAt(i - 13) === 0x61 && // a
                sourceText.charCodeAt(i - 14) === 0x6E && // n
                sourceText.charCodeAt(i - 15) === 0x58 // [
            );
            lookup.set(fn, isNative);
        }
        return isNative;
    };
})();
/**
 * Normalize a potential promise via a callback, to ensure things stay synchronous when they can.
 *
 * If the value is a promise, it is `then`ed before the callback is invoked. Otherwise the callback is invoked synchronously.
 */
function onResolve(maybePromise, resolveCallback) {
    if (maybePromise instanceof Promise) {
        return maybePromise.then(resolveCallback);
    }
    return resolveCallback(maybePromise);
}
/**
 * Normalize an array of potential promises, to ensure things stay synchronous when they can.
 *
 * If exactly one value is a promise, then that promise is returned.
 *
 * If more than one value is a promise, a new `Promise.all` is returned.
 *
 * If none of the values is a promise, nothing is returned, to indicate that things can stay synchronous.
 */
function resolveAll(...maybePromises) {
    let maybePromise = void 0;
    let firstPromise = void 0;
    let promises = void 0;
    for (let i = 0, ii = maybePromises.length; i < ii; ++i) {
        maybePromise = maybePromises[i];
        if ((maybePromise = maybePromises[i]) instanceof Promise) {
            if (firstPromise === void 0) {
                firstPromise = maybePromise;
            }
            else if (promises === void 0) {
                promises = [firstPromise, maybePromise];
            }
            else {
                promises.push(maybePromise);
            }
        }
    }
    if (promises === void 0) {
        return firstPromise;
    }
    return Promise.all(promises);
}
//# sourceMappingURL=functions.js.map

/***/ }),

/***/ "./node_modules/@aurelia/kernel/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@aurelia/kernel/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IPlatform": () => /* binding */ IPlatform,
/* harmony export */   "Platform": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.Platform,
/* harmony export */   "TaskQueue": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.TaskQueue,
/* harmony export */   "Task": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.Task,
/* harmony export */   "TaskAbortError": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.TaskAbortError,
/* harmony export */   "TaskQueuePriority": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.TaskQueuePriority,
/* harmony export */   "TaskStatus": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.TaskStatus,
/* harmony export */   "all": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.all,
/* harmony export */   "DI": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.DI,
/* harmony export */   "IContainer": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.IContainer,
/* harmony export */   "inject": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.inject,
/* harmony export */   "IServiceLocator": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.IServiceLocator,
/* harmony export */   "lazy": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.lazy,
/* harmony export */   "optional": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.optional,
/* harmony export */   "ignore": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.ignore,
/* harmony export */   "Registration": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.Registration,
/* harmony export */   "singleton": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.singleton,
/* harmony export */   "transient": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.transient,
/* harmony export */   "InstanceProvider": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.InstanceProvider,
/* harmony export */   "newInstanceForScope": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.newInstanceForScope,
/* harmony export */   "newInstanceOf": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.newInstanceOf,
/* harmony export */   "ContainerConfiguration": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.ContainerConfiguration,
/* harmony export */   "DefaultResolver": () => /* reexport safe */ _di_js__WEBPACK_IMPORTED_MODULE_0__.DefaultResolver,
/* harmony export */   "metadata": () => /* reexport safe */ _aurelia_metadata__WEBPACK_IMPORTED_MODULE_2__.metadata,
/* harmony export */   "Metadata": () => /* reexport safe */ _aurelia_metadata__WEBPACK_IMPORTED_MODULE_2__.Metadata,
/* harmony export */   "isNullOrUndefined": () => /* reexport safe */ _aurelia_metadata__WEBPACK_IMPORTED_MODULE_2__.isNullOrUndefined,
/* harmony export */   "isObject": () => /* reexport safe */ _aurelia_metadata__WEBPACK_IMPORTED_MODULE_2__.isObject,
/* harmony export */   "applyMetadataPolyfill": () => /* reexport safe */ _aurelia_metadata__WEBPACK_IMPORTED_MODULE_2__.applyMetadataPolyfill,
/* harmony export */   "LogLevel": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.LogLevel,
/* harmony export */   "ColorOptions": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.ColorOptions,
/* harmony export */   "ILogConfig": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.ILogConfig,
/* harmony export */   "ILogEventFactory": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.ILogEventFactory,
/* harmony export */   "ISink": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.ISink,
/* harmony export */   "ILogger": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.ILogger,
/* harmony export */   "LogConfig": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.LogConfig,
/* harmony export */   "DefaultLogEvent": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.DefaultLogEvent,
/* harmony export */   "DefaultLogEventFactory": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.DefaultLogEventFactory,
/* harmony export */   "DefaultLogger": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.DefaultLogger,
/* harmony export */   "ConsoleSink": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.ConsoleSink,
/* harmony export */   "LoggerConfiguration": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.LoggerConfiguration,
/* harmony export */   "format": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.format,
/* harmony export */   "sink": () => /* reexport safe */ _logger_js__WEBPACK_IMPORTED_MODULE_3__.sink,
/* harmony export */   "IModuleLoader": () => /* reexport safe */ _module_loader_js__WEBPACK_IMPORTED_MODULE_4__.IModuleLoader,
/* harmony export */   "AnalyzedModule": () => /* reexport safe */ _module_loader_js__WEBPACK_IMPORTED_MODULE_4__.AnalyzedModule,
/* harmony export */   "ModuleItem": () => /* reexport safe */ _module_loader_js__WEBPACK_IMPORTED_MODULE_4__.ModuleItem,
/* harmony export */   "noop": () => /* reexport safe */ _platform_js__WEBPACK_IMPORTED_MODULE_5__.noop,
/* harmony export */   "emptyArray": () => /* reexport safe */ _platform_js__WEBPACK_IMPORTED_MODULE_5__.emptyArray,
/* harmony export */   "emptyObject": () => /* reexport safe */ _platform_js__WEBPACK_IMPORTED_MODULE_5__.emptyObject,
/* harmony export */   "Protocol": () => /* reexport safe */ _resource_js__WEBPACK_IMPORTED_MODULE_6__.Protocol,
/* harmony export */   "fromAnnotationOrDefinitionOrTypeOrDefault": () => /* reexport safe */ _resource_js__WEBPACK_IMPORTED_MODULE_6__.fromAnnotationOrDefinitionOrTypeOrDefault,
/* harmony export */   "fromAnnotationOrTypeOrDefault": () => /* reexport safe */ _resource_js__WEBPACK_IMPORTED_MODULE_6__.fromAnnotationOrTypeOrDefault,
/* harmony export */   "fromDefinitionOrDefault": () => /* reexport safe */ _resource_js__WEBPACK_IMPORTED_MODULE_6__.fromDefinitionOrDefault,
/* harmony export */   "EventAggregator": () => /* reexport safe */ _eventaggregator_js__WEBPACK_IMPORTED_MODULE_7__.EventAggregator,
/* harmony export */   "IEventAggregator": () => /* reexport safe */ _eventaggregator_js__WEBPACK_IMPORTED_MODULE_7__.IEventAggregator,
/* harmony export */   "isArrayIndex": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.isArrayIndex,
/* harmony export */   "camelCase": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.camelCase,
/* harmony export */   "kebabCase": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.kebabCase,
/* harmony export */   "pascalCase": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.pascalCase,
/* harmony export */   "toArray": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.toArray,
/* harmony export */   "nextId": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.nextId,
/* harmony export */   "resetId": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.resetId,
/* harmony export */   "compareNumber": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.compareNumber,
/* harmony export */   "mergeDistinct": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.mergeDistinct,
/* harmony export */   "isNumberOrBigInt": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.isNumberOrBigInt,
/* harmony export */   "isStringOrDate": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.isStringOrDate,
/* harmony export */   "bound": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.bound,
/* harmony export */   "mergeArrays": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.mergeArrays,
/* harmony export */   "mergeObjects": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.mergeObjects,
/* harmony export */   "firstDefined": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.firstDefined,
/* harmony export */   "getPrototypeChain": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.getPrototypeChain,
/* harmony export */   "isNativeFunction": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.isNativeFunction,
/* harmony export */   "onResolve": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.onResolve,
/* harmony export */   "resolveAll": () => /* reexport safe */ _functions_js__WEBPACK_IMPORTED_MODULE_8__.resolveAll
/* harmony export */ });
/* harmony import */ var _di_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./di.js */ "./node_modules/@aurelia/kernel/dist/esm/di.js");
/* harmony import */ var _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/platform */ "./node_modules/@aurelia/platform/dist/esm/index.js");
/* harmony import */ var _aurelia_metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aurelia/metadata */ "./node_modules/@aurelia/metadata/dist/esm/index.js");
/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logger.js */ "./node_modules/@aurelia/kernel/dist/esm/logger.js");
/* harmony import */ var _module_loader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./module-loader.js */ "./node_modules/@aurelia/kernel/dist/esm/module-loader.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/kernel/dist/esm/platform.js");
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@aurelia/kernel/dist/esm/resource.js");
/* harmony import */ var _eventaggregator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./eventaggregator.js */ "./node_modules/@aurelia/kernel/dist/esm/eventaggregator.js");
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./functions.js */ "./node_modules/@aurelia/kernel/dist/esm/functions.js");

const IPlatform = _di_js__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IPlatform');









//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aurelia/kernel/dist/esm/logger.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aurelia/kernel/dist/esm/logger.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LogLevel": () => /* binding */ LogLevel,
/* harmony export */   "ColorOptions": () => /* binding */ ColorOptions,
/* harmony export */   "ILogConfig": () => /* binding */ ILogConfig,
/* harmony export */   "ISink": () => /* binding */ ISink,
/* harmony export */   "ILogEventFactory": () => /* binding */ ILogEventFactory,
/* harmony export */   "ILogger": () => /* binding */ ILogger,
/* harmony export */   "ILogScopes": () => /* binding */ ILogScopes,
/* harmony export */   "LoggerSink": () => /* binding */ LoggerSink,
/* harmony export */   "sink": () => /* binding */ sink,
/* harmony export */   "format": () => /* binding */ format,
/* harmony export */   "LogConfig": () => /* binding */ LogConfig,
/* harmony export */   "DefaultLogEvent": () => /* binding */ DefaultLogEvent,
/* harmony export */   "DefaultLogEventFactory": () => /* binding */ DefaultLogEventFactory,
/* harmony export */   "ConsoleSink": () => /* binding */ ConsoleSink,
/* harmony export */   "DefaultLogger": () => /* binding */ DefaultLogger,
/* harmony export */   "LoggerConfiguration": () => /* binding */ LoggerConfiguration
/* harmony export */ });
/* harmony import */ var _di_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./di.js */ "./node_modules/@aurelia/kernel/dist/esm/di.js");
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functions.js */ "./node_modules/@aurelia/kernel/dist/esm/functions.js");
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@aurelia/kernel/dist/esm/resource.js");
/* harmony import */ var _aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aurelia/metadata */ "./node_modules/@aurelia/metadata/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};




var LogLevel;
(function (LogLevel) {
    /**
     * The most detailed information about internal app state.
     *
     * Disabled by default and should never be enabled in a production environment.
     */
    LogLevel[LogLevel["trace"] = 0] = "trace";
    /**
     * Information that is useful for debugging during development and has no long-term value.
     */
    LogLevel[LogLevel["debug"] = 1] = "debug";
    /**
     * Information about the general flow of the application that has long-term value.
     */
    LogLevel[LogLevel["info"] = 2] = "info";
    /**
     * Unexpected circumstances that require attention but do not otherwise cause the current flow of execution to stop.
     */
    LogLevel[LogLevel["warn"] = 3] = "warn";
    /**
     * Unexpected circumstances that cause the flow of execution in the current activity to stop but do not cause an app-wide failure.
     */
    LogLevel[LogLevel["error"] = 4] = "error";
    /**
     * Unexpected circumstances that cause an app-wide failure or otherwise require immediate attention.
     */
    LogLevel[LogLevel["fatal"] = 5] = "fatal";
    /**
     * No messages should be written.
     */
    LogLevel[LogLevel["none"] = 6] = "none";
})(LogLevel || (LogLevel = {}));
/**
 * Flags to enable/disable color usage in the logging output.
 */
var ColorOptions;
(function (ColorOptions) {
    /**
     * Do not use ASCII color codes in logging output.
     */
    ColorOptions[ColorOptions["noColors"] = 0] = "noColors";
    /**
     * Use ASCII color codes in logging output. By default, timestamps and the TRC and DBG prefix are colored grey. INF white, WRN yellow, and ERR and FTL red.
     */
    ColorOptions[ColorOptions["colors"] = 1] = "colors";
})(ColorOptions || (ColorOptions = {}));
const ILogConfig = _di_js__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ILogConfig', x => x.instance(new LogConfig(0 /* noColors */, 3 /* warn */)));
const ISink = _di_js__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ISink');
const ILogEventFactory = _di_js__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ILogEventFactory', x => x.singleton(DefaultLogEventFactory));
const ILogger = _di_js__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ILogger', x => x.singleton(DefaultLogger));
const ILogScopes = _di_js__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ILogScope');
const LoggerSink = Object.freeze({
    key: _resource_js__WEBPACK_IMPORTED_MODULE_2__.Protocol.annotation.keyFor('logger-sink-handles'),
    define(target, definition) {
        _aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__.Metadata.define(this.key, definition.handles, target.prototype);
        return target;
    },
    getHandles(target) {
        return _aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__.Metadata.get(this.key, target);
    },
});
function sink(definition) {
    return function (target) {
        return LoggerSink.define(target, definition);
    };
}
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
const format = (0,_functions_js__WEBPACK_IMPORTED_MODULE_1__.toLookup)({
    red(str) {
        return `\u001b[31m${str}\u001b[39m`;
    },
    green(str) {
        return `\u001b[32m${str}\u001b[39m`;
    },
    yellow(str) {
        return `\u001b[33m${str}\u001b[39m`;
    },
    blue(str) {
        return `\u001b[34m${str}\u001b[39m`;
    },
    magenta(str) {
        return `\u001b[35m${str}\u001b[39m`;
    },
    cyan(str) {
        return `\u001b[36m${str}\u001b[39m`;
    },
    white(str) {
        return `\u001b[37m${str}\u001b[39m`;
    },
    grey(str) {
        return `\u001b[90m${str}\u001b[39m`;
    },
});
class LogConfig {
    constructor(colorOptions, level) {
        this.colorOptions = colorOptions;
        this.level = level;
    }
}
const getLogLevelString = (function () {
    const logLevelString = [
        (0,_functions_js__WEBPACK_IMPORTED_MODULE_1__.toLookup)({
            TRC: 'TRC',
            DBG: 'DBG',
            INF: 'INF',
            WRN: 'WRN',
            ERR: 'ERR',
            FTL: 'FTL',
            QQQ: '???',
        }),
        (0,_functions_js__WEBPACK_IMPORTED_MODULE_1__.toLookup)({
            TRC: format.grey('TRC'),
            DBG: format.grey('DBG'),
            INF: format.white('INF'),
            WRN: format.yellow('WRN'),
            ERR: format.red('ERR'),
            FTL: format.red('FTL'),
            QQQ: format.grey('???'),
        }),
    ];
    return function (level, colorOptions) {
        if (level <= 0 /* trace */) {
            return logLevelString[colorOptions].TRC;
        }
        if (level <= 1 /* debug */) {
            return logLevelString[colorOptions].DBG;
        }
        if (level <= 2 /* info */) {
            return logLevelString[colorOptions].INF;
        }
        if (level <= 3 /* warn */) {
            return logLevelString[colorOptions].WRN;
        }
        if (level <= 4 /* error */) {
            return logLevelString[colorOptions].ERR;
        }
        if (level <= 5 /* fatal */) {
            return logLevelString[colorOptions].FTL;
        }
        return logLevelString[colorOptions].QQQ;
    };
})();
function getScopeString(scope, colorOptions) {
    if (colorOptions === 0 /* noColors */) {
        return scope.join('.');
    }
    return scope.map(format.cyan).join('.');
}
function getIsoString(timestamp, colorOptions) {
    if (colorOptions === 0 /* noColors */) {
        return new Date(timestamp).toISOString();
    }
    return format.grey(new Date(timestamp).toISOString());
}
class DefaultLogEvent {
    constructor(severity, message, optionalParams, scope, colorOptions, timestamp) {
        this.severity = severity;
        this.message = message;
        this.optionalParams = optionalParams;
        this.scope = scope;
        this.colorOptions = colorOptions;
        this.timestamp = timestamp;
    }
    toString() {
        const { severity, message, scope, colorOptions, timestamp } = this;
        if (scope.length === 0) {
            return `${getIsoString(timestamp, colorOptions)} [${getLogLevelString(severity, colorOptions)}] ${message}`;
        }
        return `${getIsoString(timestamp, colorOptions)} [${getLogLevelString(severity, colorOptions)} ${getScopeString(scope, colorOptions)}] ${message}`;
    }
}
let DefaultLogEventFactory = class DefaultLogEventFactory {
    constructor(config) {
        this.config = config;
    }
    createLogEvent(logger, level, message, optionalParams) {
        return new DefaultLogEvent(level, message, optionalParams, logger.scope, this.config.colorOptions, Date.now());
    }
};
DefaultLogEventFactory = __decorate([
    __param(0, ILogConfig)
], DefaultLogEventFactory);

class ConsoleSink {
    constructor($console) {
        this.handleEvent = function emit(event) {
            const optionalParams = event.optionalParams;
            if (optionalParams === void 0 || optionalParams.length === 0) {
                switch (event.severity) {
                    case 0 /* trace */:
                    case 1 /* debug */:
                        return $console.debug(event.toString());
                    case 2 /* info */:
                        return $console.info(event.toString());
                    case 3 /* warn */:
                        return $console.warn(event.toString());
                    case 4 /* error */:
                    case 5 /* fatal */:
                        return $console.error(event.toString());
                }
            }
            else {
                switch (event.severity) {
                    case 0 /* trace */:
                    case 1 /* debug */:
                        return $console.debug(event.toString(), ...optionalParams);
                    case 2 /* info */:
                        return $console.info(event.toString(), ...optionalParams);
                    case 3 /* warn */:
                        return $console.warn(event.toString(), ...optionalParams);
                    case 4 /* error */:
                    case 5 /* fatal */:
                        return $console.error(event.toString(), ...optionalParams);
                }
            }
        };
    }
}
let DefaultLogger = class DefaultLogger {
    constructor(
    /**
     * The global logger configuration.
     */
    config, factory, sinks, 
    /**
     * The scopes that this logger was created for, if any.
     */
    scope = [], parent = null) {
        this.config = config;
        this.factory = factory;
        this.scope = scope;
        this.scopedLoggers = Object.create(null);
        let traceSinks;
        let debugSinks;
        let infoSinks;
        let warnSinks;
        let errorSinks;
        let fatalSinks;
        if (parent === null) {
            this.root = this;
            this.parent = this;
            traceSinks = this.traceSinks = [];
            debugSinks = this.debugSinks = [];
            infoSinks = this.infoSinks = [];
            warnSinks = this.warnSinks = [];
            errorSinks = this.errorSinks = [];
            fatalSinks = this.fatalSinks = [];
            for (const $sink of sinks) {
                const handles = LoggerSink.getHandles($sink);
                if (handles?.includes(0 /* trace */) ?? true) {
                    traceSinks.push($sink);
                }
                if (handles?.includes(1 /* debug */) ?? true) {
                    debugSinks.push($sink);
                }
                if (handles?.includes(2 /* info */) ?? true) {
                    infoSinks.push($sink);
                }
                if (handles?.includes(3 /* warn */) ?? true) {
                    warnSinks.push($sink);
                }
                if (handles?.includes(4 /* error */) ?? true) {
                    errorSinks.push($sink);
                }
                if (handles?.includes(5 /* fatal */) ?? true) {
                    fatalSinks.push($sink);
                }
            }
        }
        else {
            this.root = parent.root;
            this.parent = parent;
            traceSinks = this.traceSinks = parent.traceSinks;
            debugSinks = this.debugSinks = parent.debugSinks;
            infoSinks = this.infoSinks = parent.infoSinks;
            warnSinks = this.warnSinks = parent.warnSinks;
            errorSinks = this.errorSinks = parent.errorSinks;
            fatalSinks = this.fatalSinks = parent.fatalSinks;
        }
    }
    trace(messageOrGetMessage, ...optionalParams) {
        if (this.config.level <= 0 /* trace */) {
            this.emit(this.traceSinks, 0 /* trace */, messageOrGetMessage, optionalParams);
        }
    }
    debug(messageOrGetMessage, ...optionalParams) {
        if (this.config.level <= 1 /* debug */) {
            this.emit(this.debugSinks, 1 /* debug */, messageOrGetMessage, optionalParams);
        }
    }
    info(messageOrGetMessage, ...optionalParams) {
        if (this.config.level <= 2 /* info */) {
            this.emit(this.infoSinks, 2 /* info */, messageOrGetMessage, optionalParams);
        }
    }
    warn(messageOrGetMessage, ...optionalParams) {
        if (this.config.level <= 3 /* warn */) {
            this.emit(this.warnSinks, 3 /* warn */, messageOrGetMessage, optionalParams);
        }
    }
    error(messageOrGetMessage, ...optionalParams) {
        if (this.config.level <= 4 /* error */) {
            this.emit(this.errorSinks, 4 /* error */, messageOrGetMessage, optionalParams);
        }
    }
    fatal(messageOrGetMessage, ...optionalParams) {
        if (this.config.level <= 5 /* fatal */) {
            this.emit(this.fatalSinks, 5 /* fatal */, messageOrGetMessage, optionalParams);
        }
    }
    /**
     * Create a new logger with an additional permanent prefix added to the logging outputs.
     * When chained, multiple scopes are separated by a dot.
     *
     * This is preliminary API and subject to change before alpha release.
     *
     * @example
     *
     * ```ts
     * export class MyComponent {
     *   constructor(@ILogger private logger: ILogger) {
     *     this.logger.debug('before scoping');
     *     // console output: '[DBG] before scoping'
     *     this.logger = logger.scopeTo('MyComponent');
     *     this.logger.debug('after scoping');
     *     // console output: '[DBG MyComponent] after scoping'
     *   }
     *
     *   public doStuff(): void {
     *     const logger = this.logger.scopeTo('doStuff()');
     *     logger.debug('doing stuff');
     *     // console output: '[DBG MyComponent.doStuff()] doing stuff'
     *   }
     * }
     * ```
     */
    scopeTo(name) {
        const scopedLoggers = this.scopedLoggers;
        let scopedLogger = scopedLoggers[name];
        if (scopedLogger === void 0) {
            scopedLogger = scopedLoggers[name] = new DefaultLogger(this.config, this.factory, (void 0), this.scope.concat(name), this);
        }
        return scopedLogger;
    }
    emit(sinks, level, msgOrGetMsg, optionalParams) {
        const message = typeof msgOrGetMsg === 'function' ? msgOrGetMsg() : msgOrGetMsg;
        const event = this.factory.createLogEvent(this, level, message, optionalParams);
        for (let i = 0, ii = sinks.length; i < ii; ++i) {
            sinks[i].handleEvent(event);
        }
    }
};
__decorate([
    _functions_js__WEBPACK_IMPORTED_MODULE_1__.bound
], DefaultLogger.prototype, "trace", null);
__decorate([
    _functions_js__WEBPACK_IMPORTED_MODULE_1__.bound
], DefaultLogger.prototype, "debug", null);
__decorate([
    _functions_js__WEBPACK_IMPORTED_MODULE_1__.bound
], DefaultLogger.prototype, "info", null);
__decorate([
    _functions_js__WEBPACK_IMPORTED_MODULE_1__.bound
], DefaultLogger.prototype, "warn", null);
__decorate([
    _functions_js__WEBPACK_IMPORTED_MODULE_1__.bound
], DefaultLogger.prototype, "error", null);
__decorate([
    _functions_js__WEBPACK_IMPORTED_MODULE_1__.bound
], DefaultLogger.prototype, "fatal", null);
DefaultLogger = __decorate([
    __param(0, ILogConfig),
    __param(1, ILogEventFactory),
    __param(2, (0,_di_js__WEBPACK_IMPORTED_MODULE_0__.all)(ISink)),
    __param(3, (0,_di_js__WEBPACK_IMPORTED_MODULE_0__.optional)(ILogScopes)),
    __param(4, _di_js__WEBPACK_IMPORTED_MODULE_0__.ignore)
], DefaultLogger);

/**
 * A basic `ILogger` configuration that configures a single `console` sink based on provided options.
 *
 * NOTE: You *must* register the return value of `.create` with the container / au instance, not this `LoggerConfiguration` object itself.
 *
 * @example
 * ```ts
 * container.register(LoggerConfiguration.create());
 *
 * container.register(LoggerConfiguration.create({$console: console}))
 *
 * container.register(LoggerConfiguration.create({$console: console, level: LogLevel.debug}))
 *
 * container.register(LoggerConfiguration.create({
 *  $console: {
 *     debug: noop,
 *     info: noop,
 *     warn: noop,
 *     error: msg => {
 *       throw new Error(msg);
 *     }
 *  },
 *  level: LogLevel.debug
 * }))
 *
 * ```
 */
const LoggerConfiguration = (0,_functions_js__WEBPACK_IMPORTED_MODULE_1__.toLookup)({
    /**
     * @param $console - The `console` object to use. Can be the native `window.console` / `global.console`, but can also be a wrapper or mock that implements the same interface.
     * @param level - The global `LogLevel` to configure. Defaults to `warn` or higher.
     * @param colorOptions - Whether to use colors or not. Defaults to `noColors`. Colors are especially nice in nodejs environments but don't necessarily work (well) in all environments, such as browsers.
     */
    create({ $console, level = 3 /* warn */, colorOptions = 0 /* noColors */, sinks = [], } = {}) {
        return (0,_functions_js__WEBPACK_IMPORTED_MODULE_1__.toLookup)({
            register(container) {
                container.register(_di_js__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(ILogConfig, new LogConfig(colorOptions, level)));
                if ($console !== void 0 && $console !== null) {
                    container.register(_di_js__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(ISink, new ConsoleSink($console)));
                }
                for (const $sink of sinks) {
                    container.register(_di_js__WEBPACK_IMPORTED_MODULE_0__.Registration.singleton(ISink, $sink));
                }
                return container;
            },
        });
    },
});
//# sourceMappingURL=logger.js.map

/***/ }),

/***/ "./node_modules/@aurelia/kernel/dist/esm/module-loader.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aurelia/kernel/dist/esm/module-loader.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IModuleLoader": () => /* binding */ IModuleLoader,
/* harmony export */   "ModuleLoader": () => /* binding */ ModuleLoader,
/* harmony export */   "AnalyzedModule": () => /* binding */ AnalyzedModule,
/* harmony export */   "ModuleItem": () => /* binding */ ModuleItem
/* harmony export */ });
/* harmony import */ var _di_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./di.js */ "./node_modules/@aurelia/kernel/dist/esm/di.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/kernel/dist/esm/platform.js");
/* harmony import */ var _resource_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resource.js */ "./node_modules/@aurelia/kernel/dist/esm/resource.js");



const IModuleLoader = _di_js__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface(x => x.singleton(ModuleLoader));
function noTransform(m) {
    return m;
}
class ModuleTransformer {
    constructor($transform) {
        this.$transform = $transform;
        this.promiseCache = new Map();
        this.objectCache = new Map();
    }
    transform(objOrPromise) {
        if (objOrPromise instanceof Promise) {
            return this.transformPromise(objOrPromise);
        }
        else if (typeof objOrPromise === 'object' && objOrPromise !== null) {
            return this.transformObject(objOrPromise);
        }
        else {
            throw new Error(`Invalid input: ${String(objOrPromise)}. Expected Promise or Object.`);
        }
    }
    transformPromise(promise) {
        if (this.promiseCache.has(promise)) {
            return this.promiseCache.get(promise);
        }
        const ret = promise.then(obj => {
            return this.transformObject(obj);
        });
        this.promiseCache.set(promise, ret);
        void ret.then(value => {
            // make it synchronous for future requests
            this.promiseCache.set(promise, value);
        });
        return ret;
    }
    transformObject(obj) {
        if (this.objectCache.has(obj)) {
            return this.objectCache.get(obj);
        }
        const ret = this.$transform(this.analyze(obj));
        this.objectCache.set(obj, ret);
        if (ret instanceof Promise) {
            void ret.then(value => {
                // make it synchronous for future requests
                this.objectCache.set(obj, value);
            });
        }
        return ret;
    }
    analyze(m) {
        let value;
        let isRegistry;
        let isConstructable;
        let definitions;
        const items = [];
        for (const key in m) {
            switch (typeof (value = m[key])) {
                case 'object':
                    if (value === null) {
                        continue;
                    }
                    isRegistry = typeof value.register === 'function';
                    isConstructable = false;
                    definitions = _platform_js__WEBPACK_IMPORTED_MODULE_1__.emptyArray;
                    break;
                case 'function':
                    isRegistry = typeof value.register === 'function';
                    isConstructable = value.prototype !== void 0;
                    definitions = _resource_js__WEBPACK_IMPORTED_MODULE_2__.Protocol.resource.getAll(value);
                    break;
                default:
                    continue;
            }
            items.push(new ModuleItem(key, value, isRegistry, isConstructable, definitions));
        }
        return new AnalyzedModule(m, items);
    }
}
class ModuleLoader {
    constructor() {
        this.transformers = new Map();
    }
    load(objOrPromise, transform = noTransform) {
        const transformers = this.transformers;
        let transformer = transformers.get(transform);
        if (transformer === void 0) {
            transformers.set(transform, transformer = new ModuleTransformer(transform));
        }
        return transformer.transform(objOrPromise);
    }
    dispose() {
        this.transformers.clear();
    }
}
class AnalyzedModule {
    constructor(raw, items) {
        this.raw = raw;
        this.items = items;
    }
}
class ModuleItem {
    constructor(key, value, isRegistry, isConstructable, definitions) {
        this.key = key;
        this.value = value;
        this.isRegistry = isRegistry;
        this.isConstructable = isConstructable;
        this.definitions = definitions;
    }
}
//# sourceMappingURL=module-loader.js.map

/***/ }),

/***/ "./node_modules/@aurelia/kernel/dist/esm/platform.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aurelia/kernel/dist/esm/platform.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "emptyArray": () => /* binding */ emptyArray,
/* harmony export */   "emptyObject": () => /* binding */ emptyObject,
/* harmony export */   "noop": () => /* binding */ noop
/* harmony export */ });
/* eslint-disable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any */
const emptyArray = Object.freeze([]);
const emptyObject = Object.freeze({});
/* eslint-enable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any */
// eslint-disable-next-line @typescript-eslint/no-empty-function
function noop() { }
//# sourceMappingURL=platform.js.map

/***/ }),

/***/ "./node_modules/@aurelia/kernel/dist/esm/resource.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aurelia/kernel/dist/esm/resource.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Protocol": () => /* binding */ Protocol,
/* harmony export */   "fromAnnotationOrDefinitionOrTypeOrDefault": () => /* binding */ fromAnnotationOrDefinitionOrTypeOrDefault,
/* harmony export */   "fromAnnotationOrTypeOrDefault": () => /* binding */ fromAnnotationOrTypeOrDefault,
/* harmony export */   "fromDefinitionOrDefault": () => /* binding */ fromDefinitionOrDefault
/* harmony export */ });
/* harmony import */ var _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/metadata */ "./node_modules/@aurelia/metadata/dist/esm/index.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/kernel/dist/esm/platform.js");


const annotation = {
    name: 'au:annotation',
    appendTo(target, key) {
        const keys = _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(annotation.name, target);
        if (keys === void 0) {
            _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(annotation.name, [key], target);
        }
        else {
            keys.push(key);
        }
    },
    set(target, prop, value) {
        _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(annotation.keyFor(prop), value, target);
    },
    get(target, prop) {
        return _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(annotation.keyFor(prop), target);
    },
    getKeys(target) {
        let keys = _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(annotation.name, target);
        if (keys === void 0) {
            _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(annotation.name, keys = [], target);
        }
        return keys;
    },
    isKey(key) {
        return key.startsWith(annotation.name);
    },
    keyFor(name, context) {
        if (context === void 0) {
            return `${annotation.name}:${name}`;
        }
        return `${annotation.name}:${name}:${context}`;
    },
};
const resource = {
    name: 'au:resource',
    appendTo(target, key) {
        const keys = _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(resource.name, target);
        if (keys === void 0) {
            _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(resource.name, [key], target);
        }
        else {
            keys.push(key);
        }
    },
    has(target) {
        return _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.hasOwn(resource.name, target);
    },
    getAll(target) {
        const keys = _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(resource.name, target);
        if (keys === void 0) {
            return _platform_js__WEBPACK_IMPORTED_MODULE_1__.emptyArray;
        }
        else {
            return keys.map(k => _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(k, target));
        }
    },
    getKeys(target) {
        let keys = _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(resource.name, target);
        if (keys === void 0) {
            _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(resource.name, keys = [], target);
        }
        return keys;
    },
    isKey(key) {
        return key.startsWith(resource.name);
    },
    keyFor(name, context) {
        if (context === void 0) {
            return `${resource.name}:${name}`;
        }
        return `${resource.name}:${name}:${context}`;
    },
};
const Protocol = {
    annotation,
    resource,
};
const hasOwn = Object.prototype.hasOwnProperty;
/**
 * The order in which the values are checked:
 * 1. Annotations (usually set by decorators) have the highest priority; they override the definition as well as static properties on the type.
 * 2. Definition properties (usually set by the customElement decorator object literal) come next. They override static properties on the type.
 * 3. Static properties on the type come last. Note that this does not look up the prototype chain (bindables are an exception here, but we do that differently anyway)
 * 4. The default property that is provided last. The function is only called if the default property is needed
 */
function fromAnnotationOrDefinitionOrTypeOrDefault(name, def, Type, getDefault) {
    let value = _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(Protocol.annotation.keyFor(name), Type);
    if (value === void 0) {
        value = def[name];
        if (value === void 0) {
            value = Type[name];
            if (value === void 0 || !hasOwn.call(Type, name)) { // First just check the value (common case is faster), but do make sure it doesn't come from the proto chain
                return getDefault();
            }
            return value;
        }
        return value;
    }
    return value;
}
/**
 * The order in which the values are checked:
 * 1. Annotations (usually set by decorators) have the highest priority; they override static properties on the type.
 * 2. Static properties on the typ. Note that this does not look up the prototype chain (bindables are an exception here, but we do that differently anyway)
 * 3. The default property that is provided last. The function is only called if the default property is needed
 */
function fromAnnotationOrTypeOrDefault(name, Type, getDefault) {
    let value = _aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(Protocol.annotation.keyFor(name), Type);
    if (value === void 0) {
        value = Type[name];
        if (value === void 0 || !hasOwn.call(Type, name)) { // First just check the value (common case is faster), but do make sure it doesn't come from the proto chain
            return getDefault();
        }
        return value;
    }
    return value;
}
/**
 * The order in which the values are checked:
 * 1. Definition properties.
 * 2. The default property that is provided last. The function is only called if the default property is needed
 */
function fromDefinitionOrDefault(name, def, getDefault) {
    const value = def[name];
    if (value === void 0) {
        return getDefault();
    }
    return value;
}
//# sourceMappingURL=resource.js.map

/***/ }),

/***/ "./node_modules/@aurelia/metadata/dist/esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@aurelia/metadata/dist/esm/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isObject": () => /* binding */ isObject,
/* harmony export */   "isNullOrUndefined": () => /* binding */ isNullOrUndefined,
/* harmony export */   "metadata": () => /* binding */ metadata,
/* harmony export */   "Metadata": () => /* binding */ Metadata,
/* harmony export */   "applyMetadataPolyfill": () => /* binding */ applyMetadataPolyfill
/* harmony export */ });
/**
 * Determine whether a value is an object.
 *
 * Uses `typeof` to guarantee this works cross-realm, which is where `instanceof Object` might fail.
 *
 * Some environments where these issues are known to arise:
 * - same-origin iframes (accessing the other realm via `window.top`)
 * - `jest`.
 *
 * The exact test is:
 * ```ts
 * typeof value === 'object' && value !== null || typeof value === 'function'
 * ```
 *
 * @param value - The value to test.
 * @returns `true` if the value is an object, otherwise `false`.
 * Also performs a type assertion that defaults to `value is Object | Function` which, if the input type is a union with an object type, will infer the correct type.
 * This can be overridden with the generic type argument.
 *
 * @example
 *
 * ```ts
 * class Foo {
 *   bar = 42;
 * }
 *
 * function doStuff(input?: Foo | null) {
 *   input.bar; // Object is possibly 'null' or 'undefined'
 *
 *   // input has an object type in its union (Foo) so that type will be extracted for the 'true' condition
 *   if (isObject(input)) {
 *     input.bar; // OK (input is now typed as Foo)
 *   }
 * }
 *
 * function doOtherStuff(input: unknown) {
 *   input.bar; // Object is of type 'unknown'
 *
 *   // input is 'unknown' so there is no union type to match and it will default to 'Object | Function'
 *   if (isObject(input)) {
 *     input.bar; // Property 'bar' does not exist on type 'Object | Function'
 *   }
 *
 *   // if we know for sure that, if input is an object, it must be a specific type, we can explicitly tell the function to assert that for us
 *   if (isObject<Foo>(input)) {
 *    input.bar; // OK (input is now typed as Foo)
 *   }
 * }
 * ```
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function isObject(value) {
    return typeof value === 'object' && value !== null || typeof value === 'function';
}
/**
 * Determine whether a value is `null` or `undefined`.
 *
 * @param value - The value to test.
 * @returns `true` if the value is `null` or `undefined`, otherwise `false`.
 * Also performs a type assertion that ensures TypeScript treats the value appropriately in the `if` and `else` branches after this check.
 */
function isNullOrUndefined(value) {
    return value === null || value === void 0;
}
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/ban-types */
const metadataInternalSlot = new WeakMap();
function $typeError(operation, args, paramName, actualValue, expectedType) {
    return new TypeError(`${operation}(${args.map(String).join(',')}) - Expected '${paramName}' to be of type ${expectedType}, but got: ${Object.prototype.toString.call(actualValue)} (${String(actualValue)})`);
}
function toPropertyKeyOrUndefined(propertyKey) {
    switch (typeof propertyKey) {
        case 'undefined':
        case 'string':
        case 'symbol':
            return propertyKey;
        default:
            return `${propertyKey}`;
    }
}
function toPropertyKey(propertyKey) {
    switch (typeof propertyKey) {
        case 'string':
        case 'symbol':
            return propertyKey;
        default:
            return `${propertyKey}`;
    }
}
function ensurePropertyKeyOrUndefined(propertyKey) {
    switch (typeof propertyKey) {
        case 'undefined':
        case 'string':
        case 'symbol':
            return propertyKey;
        default:
            throw new TypeError(`Invalid metadata propertyKey: ${propertyKey}.`);
    }
}
function GetOrCreateMetadataMap(O, P, Create) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let targetMetadata be the value of O's [[Metadata]] internal slot.
    let targetMetadata = metadataInternalSlot.get(O);
    // 3. If targetMetadata is undefined, then
    if (targetMetadata === void 0) {
        // 3. a. If Create is false, return undefined.
        if (!Create) {
            return void 0;
        }
        // 3. b. Set targetMetadata to be a newly created Map object.
        targetMetadata = new Map();
        // 3. c. Set the [[Metadata]] internal slot of O to targetMetadata.
        metadataInternalSlot.set(O, targetMetadata);
    }
    // 4. Let metadataMap be ? Invoke(targetMetadata, "get", P).
    let metadataMap = targetMetadata.get(P);
    // 5. If metadataMap is undefined, then
    if (metadataMap === void 0) {
        // 5. a. If Create is false, return undefined.
        if (!Create) {
            return void 0;
        }
        // 5. b. Set metadataMap to be a newly created Map object.
        metadataMap = new Map();
        // 5. c. Perform ? Invoke(targetMetadata, "set", P, metadataMap).
        targetMetadata.set(P, metadataMap);
    }
    // 6. Return metadataMap.
    return metadataMap;
}
// 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let metadataMap be ? GetOrCreateMetadataMap(O, P, false).
    const metadataMap = GetOrCreateMetadataMap(O, P, /* Create */ false);
    // 3. If metadataMap is undefined, return false.
    if (metadataMap === void 0) {
        return false;
    }
    // 4. Return ? ToBoolean(? Invoke(metadataMap, "has", MetadataKey)).
    return metadataMap.has(MetadataKey);
}
// 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
function OrdinaryHasMetadata(MetadataKey, O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let hasOwn be ? OrdinaryHasOwnMetadata(MetadataKey, O, P).
    // 3. If hasOwn is true, return true.
    if (OrdinaryHasOwnMetadata(MetadataKey, O, P)) {
        return true;
    }
    // 4. Let parent be ? O.[[GetPrototypeOf]]().
    const parent = Object.getPrototypeOf(O);
    // 5. If parent is not null, Return ? parent.[[HasMetadata]](MetadataKey, P).
    if (parent !== null) {
        return OrdinaryHasMetadata(MetadataKey, parent, P);
    }
    // 6. Return false.
    return false;
}
// 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let metadataMap be ? GetOrCreateMetadataMap(O, P, false).
    const metadataMap = GetOrCreateMetadataMap(O, P, /* Create */ false);
    // 3. If metadataMap is undefined, return undefined.
    if (metadataMap === void 0) {
        return void 0;
    }
    // 4. Return ? Invoke(metadataMap, "get", MetadataKey).
    return metadataMap.get(MetadataKey);
}
// 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
function OrdinaryGetMetadata(MetadataKey, O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let hasOwn be ? OrdinaryHasOwnMetadata(MetadataKey, O, P).
    // 3. If hasOwn is true, return ? OrdinaryGetOwnMetadata(MetadataKey, O, P).
    if (OrdinaryHasOwnMetadata(MetadataKey, O, P)) {
        return OrdinaryGetOwnMetadata(MetadataKey, O, P);
    }
    // 4. Let parent be ? O.[[GetPrototypeOf]]().
    const parent = Object.getPrototypeOf(O);
    // 5. If parent is not null, return ? parent.[[GetMetadata]](MetadataKey, P).
    if (parent !== null) {
        return OrdinaryGetMetadata(MetadataKey, parent, P);
    }
    // 6. Return undefined.
    return void 0;
}
// 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let metadataMap be ? GetOrCreateMetadataMap(O, P, true).
    const metadataMap = GetOrCreateMetadataMap(O, P, /* Create */ true);
    // 3. Return ? Invoke(metadataMap, "set", MetadataKey, MetadataValue).
    metadataMap.set(MetadataKey, MetadataValue);
}
// 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
function OrdinaryOwnMetadataKeys(O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let keys be ? ArrayCreate(0).
    const keys = [];
    // 3. Let metadataMap be ? GetOrCreateMetadataMap(O, P, false).
    const metadataMap = GetOrCreateMetadataMap(O, P, /* Create */ false);
    // 4. If metadataMap is undefined, return keys.
    if (metadataMap === void 0) {
        return keys;
    }
    // 5. Let keysObj be ? Invoke(metadataMap, "keys").
    const keysObj = metadataMap.keys();
    // 6. Let iterator be ? GetIterator(keysObj).
    // 7. Let k be 0.
    let k = 0;
    // 8. Repeat
    for (const key of keysObj) {
        // 8. a. Let Pk be ! ToString(k).
        // 8. b. Let next be ? IteratorStep(iterator).
        // 8. c. If next is false, then
        // 8. c. i. Let setStatus be ? Set(keys, "length", k, true).
        // 8. c. ii. Assert: setStatus is true.
        // 8. c. iii. Return keys.
        // 8. d. Let nextValue be ? IteratorValue(next).
        // 8. e. Let defineStatus be CreateDataPropertyOrThrow(keys, Pk, nextValue).
        keys[k] = key;
        // 8. f. If defineStatus is an abrupt completion, return ? IteratorClose(iterator, defineStatus).
        // 8. g. Increase k by 1.
        ++k;
    }
    return keys;
}
// 3.1.6.1 OrdinaryMetadataKeys(O, P)
// https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
function OrdinaryMetadataKeys(O, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let ownKeys be ? OrdinaryOwnMetadataKeys(O, P).
    const ownKeys = OrdinaryOwnMetadataKeys(O, P);
    // 3. Let parent be ? O.[[GetPrototypeOf]]().
    const parent = Object.getPrototypeOf(O);
    // 4. If parent is null, then return ownKeys.
    if (parent === null) {
        return ownKeys;
    }
    // 5. Let parentKeys be ? O.[[OrdinaryMetadataKeys]](P).
    const parentKeys = OrdinaryMetadataKeys(parent, P);
    // 6. Let ownKeysLen = ? Get(ownKeys, "length").
    const ownKeysLen = ownKeys.length;
    // 7. If ownKeysLen is 0, return parentKeys.
    if (ownKeysLen === 0) {
        return parentKeys;
    }
    // 8. Let parentKeysLen = ? Get(parentKeys, "length").
    const parentKeysLen = parentKeys.length;
    // 9. If parentKeysLen is 0, return ownKeys.
    if (parentKeysLen === 0) {
        return ownKeys;
    }
    // 10. Let set be a newly created Set object.
    const set = new Set();
    // 11. Let keys be ? ArrayCreate(0).
    const keys = [];
    // 12. Let k be 0.
    let k = 0;
    // 13. For each element key of ownKeys
    let key;
    for (let i = 0; i < ownKeysLen; ++i) {
        key = ownKeys[i];
        // 13. a. Let hasKey be ? Invoke(set, "has", key).
        // 13. b. If hasKey is false, then
        if (!set.has(key)) {
            // 13. b. i. Let Pk be ! ToString(k).
            // 13. b. ii. Perform ? Invoke(set, "add", key).
            set.add(key);
            // 13. b. iii. Let defineStatus be CreateDataProperty(keys, Pk, key).
            // 13. b. iv. Assert: defineStatus is true.
            keys[k] = key;
            // 13. b. v. Increase k by 1.
            ++k;
        }
    }
    // 14. For each element key of parentKeys
    for (let i = 0; i < parentKeysLen; ++i) {
        key = parentKeys[i];
        // 14. a. Let hasKey be ? Invoke(set, "has", key).
        // 14. b. If hasKey is false, then
        if (!set.has(key)) {
            // 14. b. i. Let Pk be ! ToString(k).
            // 14. b. ii. Perform ? Invoke(set, "add", key).
            set.add(key);
            // 14. b. iii. Let defineStatus be CreateDataProperty(keys, Pk, key).
            // 14. b. iv. Assert: defineStatus is true.
            keys[k] = key;
            // 14. b. v. Increase k by 1.
            ++k;
        }
    }
    // 15. Perform ? Set(keys, "length", k).
    // 16. return keys.
    return keys;
}
// 3.1.8 DeleteMetadata(MetadataKey, P)
// https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots-deletemetadata
function OrdinaryDeleteMetadata(O, MetadataKey, P) {
    // 1. Assert: P is undefined or IsPropertyKey(P) is true.
    // 2. Let metadataMap be ? GetOrCreateMetadataMap(O, P, false).
    const metadataMap = GetOrCreateMetadataMap(O, P, false);
    // 3. If metadataMap is undefined, return false.
    if (metadataMap === void 0) {
        return false;
    }
    // 4. Return ? Invoke(metadataMap, "delete", MetadataKey).
    return metadataMap.delete(MetadataKey);
}
// 4.1.2 Reflect.metadata(metadataKey, metadataValue)
// https://rbuckton.github.io/reflect-metadata/#reflect.metadata
/**
 * A default metadata decorator factory that can be used on a class, class member, or parameter.
 *
 * @param metadataKey - The key for the metadata entry.
 * If `metadataKey` is already defined for the target and target key, the
 * metadataValue for that key will be overwritten.
 * @param metadataValue - The value for the metadata entry.
 * @returns A decorator function.
 */
function metadata(metadataKey, metadataValue) {
    function decorator(target, propertyKey) {
        // 1. Assert: F has a [[MetadataKey]] internal slot whose value is an ECMAScript language value, or undefined.
        // 2. Assert: F has a [[MetadataValue]] internal slot whose value is an ECMAScript language value, or undefined.
        // 3. If Type(target) is not Object, throw a TypeError exception.
        if (!isObject(target)) {
            throw $typeError('@metadata', [metadataKey, metadataValue, target, propertyKey], 'target', target, 'Object or Function');
        }
        // 4. If key is not undefined and IsPropertyKey(key) is false, throw a TypeError exception.
        // 5. Let metadataKey be the value of F's [[MetadataKey]] internal slot.
        // 6. Let metadataValue be the value of F's [[MetadataValue]] internal slot.
        // 7. Perform ? target.[[DefineMetadata]](metadataKey, metadataValue, target, key).
        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, ensurePropertyKeyOrUndefined(propertyKey));
        // 8. Return undefined.
    }
    return decorator;
}
function decorate(decorators, target, propertyKey, attributes) {
    if (propertyKey !== void 0) {
        if (!Array.isArray(decorators)) {
            throw $typeError('Metadata.decorate', [decorators, target, propertyKey, attributes], 'decorators', decorators, 'Array');
        }
        if (!isObject(target)) {
            throw $typeError('Metadata.decorate', [decorators, target, propertyKey, attributes], 'target', target, 'Object or Function');
        }
        if (!isObject(attributes) && !isNullOrUndefined(attributes)) {
            throw $typeError('Metadata.decorate', [decorators, target, propertyKey, attributes], 'attributes', attributes, 'Object, Function, null, or undefined');
        }
        if (attributes === null) {
            attributes = void 0;
        }
        propertyKey = toPropertyKey(propertyKey);
        return DecorateProperty(decorators, target, propertyKey, attributes);
    }
    else {
        if (!Array.isArray(decorators)) {
            throw $typeError('Metadata.decorate', [decorators, target, propertyKey, attributes], 'decorators', decorators, 'Array');
        }
        if (typeof target !== 'function') {
            throw $typeError('Metadata.decorate', [decorators, target, propertyKey, attributes], 'target', target, 'Function');
        }
        return DecorateConstructor(decorators, target);
    }
}
function DecorateConstructor(decorators, target) {
    for (let i = decorators.length - 1; i >= 0; --i) {
        const decorator = decorators[i];
        const decorated = decorator(target);
        if (!isNullOrUndefined(decorated)) {
            if (typeof decorated !== 'function') {
                throw $typeError('DecorateConstructor', [decorators, target], 'decorated', decorated, 'Function, null, or undefined');
            }
            target = decorated;
        }
    }
    return target;
}
function DecorateProperty(decorators, target, propertyKey, descriptor) {
    for (let i = decorators.length - 1; i >= 0; --i) {
        const decorator = decorators[i];
        const decorated = decorator(target, propertyKey, descriptor);
        if (!isNullOrUndefined(decorated)) {
            if (!isObject(decorated)) {
                throw $typeError('DecorateProperty', [decorators, target, propertyKey, descriptor], 'decorated', decorated, 'Object, Function, null, or undefined');
            }
            descriptor = decorated;
        }
    }
    return descriptor;
}
function $define(metadataKey, metadataValue, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.define', [metadataKey, metadataValue, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[DefineMetadata]](metadataKey, metadataValue, propertyKey).
    return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, toPropertyKeyOrUndefined(propertyKey));
}
function $has(metadataKey, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.has', [metadataKey, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[HasMetadata]](metadataKey, propertyKey).
    return OrdinaryHasMetadata(metadataKey, target, toPropertyKeyOrUndefined(propertyKey));
}
function $hasOwn(metadataKey, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.hasOwn', [metadataKey, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[HasOwn]](metadataKey, propertyKey).
    return OrdinaryHasOwnMetadata(metadataKey, target, toPropertyKeyOrUndefined(propertyKey));
}
function $get(metadataKey, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.get', [metadataKey, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[GetMetadata]](metadataKey, propertyKey).
    return OrdinaryGetMetadata(metadataKey, target, toPropertyKeyOrUndefined(propertyKey));
}
function $getOwn(metadataKey, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.getOwn', [metadataKey, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[GetOwnMetadata]](metadataKey, propertyKey).
    return OrdinaryGetOwnMetadata(metadataKey, target, toPropertyKeyOrUndefined(propertyKey));
}
function $getKeys(target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.getKeys', [target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[GetMetadataKeys]](propertyKey).
    return OrdinaryMetadataKeys(target, toPropertyKeyOrUndefined(propertyKey));
}
function $getOwnKeys(target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.getOwnKeys', [target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[GetOwnMetadataKeys]](propertyKey).
    return OrdinaryOwnMetadataKeys(target, toPropertyKeyOrUndefined(propertyKey));
}
function $delete(metadataKey, target, propertyKey) {
    // 1. If Type(target) is not Object, throw a TypeError exception.
    if (!isObject(target)) {
        throw $typeError('Metadata.delete', [metadataKey, target, propertyKey], 'target', target, 'Object or Function');
    }
    // 2. Return ? target.[[DeleteMetadata]](metadataKey, propertyKey).
    return OrdinaryDeleteMetadata(target, metadataKey, toPropertyKeyOrUndefined(propertyKey));
}
const Metadata = {
    define: $define,
    has: $has,
    hasOwn: $hasOwn,
    get: $get,
    getOwn: $getOwn,
    getKeys: $getKeys,
    getOwnKeys: $getOwnKeys,
    delete: $delete,
};
function def(obj, key, value, writable, configurable) {
    if (!Reflect.defineProperty(obj, key, {
        writable,
        enumerable: false,
        configurable,
        value,
    })) {
        throw new Error(`Unable to apply metadata polyfill: could not add property '${key}' to the global Reflect object`);
    }
}
const internalSlotName = '[[$au]]';
function hasInternalSlot(reflect) {
    return internalSlotName in reflect;
}
function $applyMetadataPolyfill(reflect, writable, configurable) {
    def(reflect, internalSlotName, metadataInternalSlot, writable, configurable);
    def(reflect, 'metadata', metadata, writable, configurable);
    def(reflect, 'decorate', decorate, writable, configurable);
    def(reflect, 'defineMetadata', $define, writable, configurable);
    def(reflect, 'hasMetadata', $has, writable, configurable);
    def(reflect, 'hasOwnMetadata', $hasOwn, writable, configurable);
    def(reflect, 'getMetadata', $get, writable, configurable);
    def(reflect, 'getOwnMetadata', $getOwn, writable, configurable);
    def(reflect, 'getMetadataKeys', $getKeys, writable, configurable);
    def(reflect, 'getOwnMetadataKeys', $getOwnKeys, writable, configurable);
    def(reflect, 'deleteMetadata', $delete, writable, configurable);
}
function applyMetadataPolyfill(reflect, throwIfConflict = true, forceOverwrite = false, writable = true, configurable = true) {
    if (hasInternalSlot(reflect)) {
        if (reflect[internalSlotName] === metadataInternalSlot) {
            return;
        }
        throw new Error(`Conflicting @aurelia/metadata module import detected. Please make sure you have the same version of all Aurelia packages in your dependency tree.`);
    }
    const presentProps = [
        'metadata',
        'decorate',
        'defineMetadata',
        'hasMetadata',
        'hasOwnMetadata',
        'getMetadata',
        'getOwnMetadata',
        'getMetadataKeys',
        'getOwnMetadataKeys',
        'deleteMetadata',
    ].filter(function (p) {
        return p in Reflect;
    });
    if (presentProps.length > 0) {
        if (throwIfConflict) {
            const implementationSummary = presentProps.map(function (p) {
                const impl = `${Reflect[p].toString().slice(0, 100)}...`;
                return `${p}:\n${impl}`;
            }).join('\n\n');
            throw new Error(`Conflicting reflect.metadata polyfill found. If you have 'reflect-metadata' or any other reflect polyfill imported, please remove it, if not (or if you must use a specific polyfill) please file an issue at https://github.com/aurelia/aurelia/issues so that we can look into compatibility options for this scenario. Implementation summary:\n\n${implementationSummary}`);
        }
        else if (forceOverwrite) {
            $applyMetadataPolyfill(reflect, writable, configurable);
        }
    }
    else {
        $applyMetadataPolyfill(reflect, writable, configurable);
    }
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aurelia/platform-browser/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aurelia/platform-browser/dist/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserPlatform": () => /* binding */ BrowserPlatform
/* harmony export */ });
/* harmony import */ var _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/platform */ "./node_modules/@aurelia/platform/dist/esm/index.js");

const lookup = new Map();
function notImplemented(name) {
    return function notImplemented() {
        throw new Error(`The PLATFORM did not receive a valid reference to the global function '${name}'.`); // TODO: link to docs describing how to fix this issue
    };
}
class BrowserPlatform extends _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__.Platform {
    constructor(g, overrides = {}) {
        super(g, overrides);
        this.domReadRequested = false;
        this.domReadHandle = -1;
        this.domWriteRequested = false;
        this.domWriteHandle = -1;
        this.Node = 'Node' in overrides ? overrides.Node : g.Node;
        this.Element = 'Element' in overrides ? overrides.Element : g.Element;
        this.HTMLElement = 'HTMLElement' in overrides ? overrides.HTMLElement : g.HTMLElement;
        this.CustomEvent = 'CustomEvent' in overrides ? overrides.CustomEvent : g.CustomEvent;
        this.CSSStyleSheet = 'CSSStyleSheet' in overrides ? overrides.CSSStyleSheet : g.CSSStyleSheet;
        this.ShadowRoot = 'ShadowRoot' in overrides ? overrides.ShadowRoot : g.ShadowRoot;
        this.MutationObserver = 'MutationObserver' in overrides ? overrides.MutationObserver : g.MutationObserver;
        this.window = 'window' in overrides ? overrides.window : g.window;
        this.document = 'document' in overrides ? overrides.document : g.document;
        this.location = 'location' in overrides ? overrides.location : g.location;
        this.history = 'history' in overrides ? overrides.history : g.history;
        this.navigator = 'navigator' in overrides ? overrides.navigator : g.navigator;
        this.fetch = 'fetch' in overrides ? overrides.fetch : g.fetch?.bind(g) ?? notImplemented('fetch');
        this.requestAnimationFrame = 'requestAnimationFrame' in overrides ? overrides.requestAnimationFrame : g.requestAnimationFrame?.bind(g) ?? notImplemented('requestAnimationFrame');
        this.cancelAnimationFrame = 'cancelAnimationFrame' in overrides ? overrides.cancelAnimationFrame : g.cancelAnimationFrame?.bind(g) ?? notImplemented('cancelAnimationFrame');
        this.customElements = 'customElements' in overrides ? overrides.customElements : g.customElements;
        this.flushDomRead = this.flushDomRead.bind(this);
        this.flushDomWrite = this.flushDomWrite.bind(this);
        this.domReadQueue = new _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__.TaskQueue(this, this.requestDomRead.bind(this), this.cancelDomRead.bind(this));
        this.domWriteQueue = new _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__.TaskQueue(this, this.requestDomWrite.bind(this), this.cancelDomWrite.bind(this));
        /* eslint-enable @typescript-eslint/no-unnecessary-type-assertion */
    }
    static getOrCreate(g, overrides = {}) {
        let platform = lookup.get(g);
        if (platform === void 0) {
            lookup.set(g, platform = new BrowserPlatform(g, overrides));
        }
        return platform;
    }
    static set(g, platform) {
        lookup.set(g, platform);
    }
    requestDomRead() {
        this.domReadRequested = true;
        // Yes, this is intentional: the timing of the read can only be "found" by doing a write first.
        // The flushDomWrite queues the read.
        // If/when requestPostAnimationFrame is implemented in browsers, we can use that instead.
        if (this.domWriteHandle === -1) {
            this.domWriteHandle = this.requestAnimationFrame(this.flushDomWrite);
        }
    }
    cancelDomRead() {
        this.domReadRequested = false;
        if (this.domReadHandle > -1) {
            this.clearTimeout(this.domReadHandle);
            this.domReadHandle = -1;
        }
        if (this.domWriteRequested === false && this.domWriteHandle > -1) {
            this.cancelAnimationFrame(this.domWriteHandle);
            this.domWriteHandle = -1;
        }
    }
    flushDomRead() {
        this.domReadHandle = -1;
        if (this.domReadRequested === true) {
            this.domReadRequested = false;
            this.domReadQueue.flush();
        }
    }
    requestDomWrite() {
        this.domWriteRequested = true;
        if (this.domWriteHandle === -1) {
            this.domWriteHandle = this.requestAnimationFrame(this.flushDomWrite);
        }
    }
    cancelDomWrite() {
        this.domWriteRequested = false;
        if (this.domWriteHandle > -1 &&
            // if dom read is requested and there is no readHandle yet, we need the rAF to proceed regardless.
            // The domWriteRequested=false will prevent the read flush from happening.
            (this.domReadRequested === false || this.domReadHandle > -1)) {
            this.cancelAnimationFrame(this.domWriteHandle);
            this.domWriteHandle = -1;
        }
    }
    flushDomWrite() {
        this.domWriteHandle = -1;
        if (this.domWriteRequested === true) {
            this.domWriteRequested = false;
            this.domWriteQueue.flush();
        }
        if (this.domReadRequested === true && this.domReadHandle === -1) {
            this.domReadHandle = this.setTimeout(this.flushDomRead, 0);
        }
    }
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aurelia/platform/dist/esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@aurelia/platform/dist/esm/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Platform": () => /* binding */ Platform,
/* harmony export */   "TaskQueue": () => /* binding */ TaskQueue,
/* harmony export */   "TaskAbortError": () => /* binding */ TaskAbortError,
/* harmony export */   "TaskStatus": () => /* binding */ TaskStatus,
/* harmony export */   "Task": () => /* binding */ Task,
/* harmony export */   "TaskQueuePriority": () => /* binding */ TaskQueuePriority
/* harmony export */ });
const lookup = new Map();
function notImplemented(name) {
    return function notImplemented() {
        throw new Error(`The PLATFORM did not receive a valid reference to the global function '${name}'.`); // TODO: link to docs describing how to fix this issue
    };
}
class Platform {
    constructor(g, overrides = {}) {
        this.macroTaskRequested = false;
        this.macroTaskHandle = -1;
        this.globalThis = g;
        this.decodeURI = 'decodeURI' in overrides ? overrides.decodeURI : g.decodeURI;
        this.decodeURIComponent = 'decodeURIComponent' in overrides ? overrides.decodeURIComponent : g.decodeURIComponent;
        this.encodeURI = 'encodeURI' in overrides ? overrides.encodeURI : g.encodeURI;
        this.encodeURIComponent = 'encodeURIComponent' in overrides ? overrides.encodeURIComponent : g.encodeURIComponent;
        this.Date = 'Date' in overrides ? overrides.Date : g.Date;
        this.Reflect = 'Reflect' in overrides ? overrides.Reflect : g.Reflect;
        this.clearInterval = 'clearInterval' in overrides ? overrides.clearInterval : g.clearInterval?.bind(g) ?? notImplemented('clearInterval');
        this.clearTimeout = 'clearTimeout' in overrides ? overrides.clearTimeout : g.clearTimeout?.bind(g) ?? notImplemented('clearTimeout');
        this.queueMicrotask = 'queueMicrotask' in overrides ? overrides.queueMicrotask : g.queueMicrotask?.bind(g) ?? notImplemented('queueMicrotask');
        this.setInterval = 'setInterval' in overrides ? overrides.setInterval : g.setInterval?.bind(g) ?? notImplemented('setInterval');
        this.setTimeout = 'setTimeout' in overrides ? overrides.setTimeout : g.setTimeout?.bind(g) ?? notImplemented('setTimeout');
        this.console = 'console' in overrides ? overrides.console : g.console;
        this.performanceNow = 'performanceNow' in overrides ? overrides.performanceNow : g.performance?.now?.bind(g.performance) ?? notImplemented('performance.now');
        this.flushMacroTask = this.flushMacroTask.bind(this);
        this.macroTaskQueue = new TaskQueue(this, this.requestMacroTask.bind(this), this.cancelMacroTask.bind(this));
    }
    static getOrCreate(g, overrides = {}) {
        let platform = lookup.get(g);
        if (platform === void 0) {
            lookup.set(g, platform = new Platform(g, overrides));
        }
        return platform;
    }
    static set(g, platform) {
        lookup.set(g, platform);
    }
    requestMacroTask() {
        this.macroTaskRequested = true;
        if (this.macroTaskHandle === -1) {
            this.macroTaskHandle = this.setTimeout(this.flushMacroTask, 0);
        }
    }
    cancelMacroTask() {
        this.macroTaskRequested = false;
        if (this.macroTaskHandle > -1) {
            this.clearTimeout(this.macroTaskHandle);
            this.macroTaskHandle = -1;
        }
    }
    flushMacroTask() {
        this.macroTaskHandle = -1;
        if (this.macroTaskRequested === true) {
            this.macroTaskRequested = false;
            this.macroTaskQueue.flush();
        }
    }
}
function isPersistent(task) {
    return task.persistent;
}
class TaskQueue {
    constructor(platform, $request, $cancel) {
        this.platform = platform;
        this.$request = $request;
        this.$cancel = $cancel;
        this.processing = [];
        this.suspenderTask = void 0;
        this.pendingAsyncCount = 0;
        this.pending = [];
        this.delayed = [];
        this.flushRequested = false;
        this.yieldPromise = void 0;
        this.taskPool = [];
        this.taskPoolSize = 0;
        this.lastRequest = 0;
        this.lastFlush = 0;
        this.requestFlush = () => {
            if (this.tracer.enabled) {
                this.tracer.enter(this, 'requestFlush');
            }
            if (!this.flushRequested) {
                this.flushRequested = true;
                this.lastRequest = this.platform.performanceNow();
                this.$request();
            }
            if (this.tracer.enabled) {
                this.tracer.leave(this, 'requestFlush');
            }
        };
        this.tracer = new Tracer(platform.console);
    }
    get isEmpty() {
        return this.processing.length === 0 && this.pending.length === 0 && this.delayed.length === 0;
    }
    /**
     * Persistent tasks will re-queue themselves indefinitely until they are explicitly canceled,
     * so we consider them 'infinite work' whereas non-persistent (one-off) tasks are 'finite work'.
     *
     * This `hasNoMoreFiniteWork` getters returns true if either all remaining tasks are persistent, or if there are no more tasks.
     *
     * If that is the case, we can resolve the promise that was created when `yield()` is called.
     */
    get hasNoMoreFiniteWork() {
        return (this.pendingAsyncCount === 0 &&
            this.processing.every(isPersistent) &&
            this.pending.every(isPersistent) &&
            this.delayed.every(isPersistent));
    }
    flush(time = this.platform.performanceNow()) {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'flush');
        }
        this.flushRequested = false;
        this.lastFlush = time;
        // Only process normally if we are *not* currently waiting for an async task to finish
        if (this.suspenderTask === void 0) {
            if (this.pending.length > 0) {
                this.processing.push(...this.pending);
                this.pending.length = 0;
            }
            if (this.delayed.length > 0) {
                let i = -1;
                while (++i < this.delayed.length && this.delayed[i].queueTime <= time) { /* do nothing */ }
                this.processing.push(...this.delayed.splice(0, i));
            }
            let cur;
            while (this.processing.length > 0) {
                (cur = this.processing.shift()).run();
                // If it's still running, it can only be an async task
                if (cur.status === 1 /* running */) {
                    if (cur.suspend === true) {
                        this.suspenderTask = cur;
                        this.requestFlush();
                        if (this.tracer.enabled) {
                            this.tracer.leave(this, 'flush early async');
                        }
                        return;
                    }
                    else {
                        ++this.pendingAsyncCount;
                    }
                }
            }
            if (this.pending.length > 0) {
                this.processing.push(...this.pending);
                this.pending.length = 0;
            }
            if (this.delayed.length > 0) {
                let i = -1;
                while (++i < this.delayed.length && this.delayed[i].queueTime <= time) { /* do nothing */ }
                this.processing.push(...this.delayed.splice(0, i));
            }
            if (this.processing.length > 0 || this.delayed.length > 0 || this.pendingAsyncCount > 0) {
                this.requestFlush();
            }
            if (this.yieldPromise !== void 0 &&
                this.hasNoMoreFiniteWork) {
                const p = this.yieldPromise;
                this.yieldPromise = void 0;
                p.resolve();
            }
        }
        else {
            // If we are still waiting for an async task to finish, just schedule the next flush and do nothing else.
            // Should the task finish before the next flush is invoked,
            // the callback to `completeAsyncTask` will have reset `this.suspenderTask` back to undefined so processing can return back to normal next flush.
            this.requestFlush();
        }
        if (this.tracer.enabled) {
            this.tracer.leave(this, 'flush full');
        }
    }
    /**
     * Cancel the next flush cycle (and/or the macrotask that schedules the next flush cycle, in case this is a microtask queue), if it was requested.
     *
     * This operation is idempotent and will do nothing if no flush is scheduled.
     */
    cancel() {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'cancel');
        }
        if (this.flushRequested) {
            this.$cancel();
            this.flushRequested = false;
        }
        if (this.tracer.enabled) {
            this.tracer.leave(this, 'cancel');
        }
    }
    /**
     * Returns a promise that, when awaited, resolves when:
     * - all *non*-persistent (including async) tasks have finished;
     * - the last-added persistent task has run exactly once;
     *
     * This operation is idempotent: the same promise will be returned until it resolves.
     *
     * If `yield()` is called multiple times in a row when there are one or more persistent tasks in the queue, each call will await exactly one cycle of those tasks.
     */
    async yield() {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'yield');
        }
        if (this.isEmpty) {
            if (this.tracer.enabled) {
                this.tracer.leave(this, 'yield empty');
            }
        }
        else {
            if (this.yieldPromise === void 0) {
                if (this.tracer.enabled) {
                    this.tracer.trace(this, 'yield - creating promise');
                }
                this.yieldPromise = createExposedPromise();
            }
            await this.yieldPromise;
            if (this.tracer.enabled) {
                this.tracer.leave(this, 'yield task');
            }
        }
    }
    queueTask(callback, opts) {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'queueTask');
        }
        const { delay, preempt, persistent, reusable, suspend } = { ...defaultQueueTaskOptions, ...opts };
        if (preempt) {
            if (delay > 0) {
                throw new Error(`Invalid arguments: preempt cannot be combined with a greater-than-zero delay`);
            }
            if (persistent) {
                throw new Error(`Invalid arguments: preempt cannot be combined with persistent`);
            }
        }
        if (this.processing.length === 0) {
            this.requestFlush();
        }
        const time = this.platform.performanceNow();
        let task;
        if (reusable) {
            const taskPool = this.taskPool;
            const index = this.taskPoolSize - 1;
            if (index >= 0) {
                task = taskPool[index];
                taskPool[index] = (void 0);
                this.taskPoolSize = index;
                task.reuse(time, delay, preempt, persistent, suspend, callback);
            }
            else {
                task = new Task(this.tracer, this, time, time + delay, preempt, persistent, suspend, reusable, callback);
            }
        }
        else {
            task = new Task(this.tracer, this, time, time + delay, preempt, persistent, suspend, reusable, callback);
        }
        if (preempt) {
            this.processing[this.processing.length] = task;
        }
        else if (delay === 0) {
            this.pending[this.pending.length] = task;
        }
        else {
            this.delayed[this.delayed.length] = task;
        }
        if (this.tracer.enabled) {
            this.tracer.leave(this, 'queueTask');
        }
        return task;
    }
    /**
     * Remove the task from this queue.
     */
    remove(task) {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'remove');
        }
        let idx = this.processing.indexOf(task);
        if (idx > -1) {
            this.processing.splice(idx, 1);
            if (this.tracer.enabled) {
                this.tracer.leave(this, 'remove processing');
            }
            return;
        }
        idx = this.pending.indexOf(task);
        if (idx > -1) {
            this.pending.splice(idx, 1);
            if (this.tracer.enabled) {
                this.tracer.leave(this, 'remove pending');
            }
            return;
        }
        idx = this.delayed.indexOf(task);
        if (idx > -1) {
            this.delayed.splice(idx, 1);
            if (this.tracer.enabled) {
                this.tracer.leave(this, 'remove delayed');
            }
            return;
        }
        if (this.tracer.enabled) {
            this.tracer.leave(this, 'remove error');
        }
        throw new Error(`Task #${task.id} could not be found`);
    }
    /**
     * Return a reusable task to the shared task pool.
     * The next queued callback will reuse this task object instead of creating a new one, to save overhead of creating additional objects.
     */
    returnToPool(task) {
        if (this.tracer.enabled) {
            this.tracer.trace(this, 'returnToPool');
        }
        this.taskPool[this.taskPoolSize++] = task;
    }
    /**
     * Reset the persistent task back to its pending state, preparing it for being invoked again on the next flush.
     */
    resetPersistentTask(task) {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'resetPersistentTask');
        }
        task.reset(this.platform.performanceNow());
        if (task.createdTime === task.queueTime) {
            this.pending[this.pending.length] = task;
        }
        else {
            this.delayed[this.delayed.length] = task;
        }
        if (this.tracer.enabled) {
            this.tracer.leave(this, 'resetPersistentTask');
        }
    }
    /**
     * Notify the queue that this async task has had its promise resolved, so that the queue can proceed with consecutive tasks on the next flush.
     */
    completeAsyncTask(task) {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'completeAsyncTask');
        }
        if (task.suspend === true) {
            if (this.suspenderTask !== task) {
                if (this.tracer.enabled) {
                    this.tracer.leave(this, 'completeAsyncTask error');
                }
                throw new Error(`Async task completion mismatch: suspenderTask=${this.suspenderTask?.id}, task=${task.id}`);
            }
            this.suspenderTask = void 0;
        }
        else {
            --this.pendingAsyncCount;
        }
        if (this.yieldPromise !== void 0 &&
            this.hasNoMoreFiniteWork) {
            const p = this.yieldPromise;
            this.yieldPromise = void 0;
            p.resolve();
        }
        if (this.isEmpty) {
            this.cancel();
        }
        if (this.tracer.enabled) {
            this.tracer.leave(this, 'completeAsyncTask');
        }
    }
}
class TaskAbortError extends Error {
    constructor(task) {
        super('Task was canceled.');
        this.task = task;
    }
}
let id = 0;
var TaskStatus;
(function (TaskStatus) {
    TaskStatus[TaskStatus["pending"] = 0] = "pending";
    TaskStatus[TaskStatus["running"] = 1] = "running";
    TaskStatus[TaskStatus["completed"] = 2] = "completed";
    TaskStatus[TaskStatus["canceled"] = 3] = "canceled";
})(TaskStatus || (TaskStatus = {}));
class Task {
    constructor(tracer, taskQueue, createdTime, queueTime, preempt, persistent, suspend, reusable, callback) {
        this.tracer = tracer;
        this.taskQueue = taskQueue;
        this.createdTime = createdTime;
        this.queueTime = queueTime;
        this.preempt = preempt;
        this.persistent = persistent;
        this.suspend = suspend;
        this.reusable = reusable;
        this.callback = callback;
        this.id = ++id;
        this.resolve = void 0;
        this.reject = void 0;
        this._result = void 0;
        this._status = 0 /* pending */;
    }
    get result() {
        const result = this._result;
        if (result === void 0) {
            switch (this._status) {
                case 0 /* pending */: {
                    const promise = this._result = createExposedPromise();
                    this.resolve = promise.resolve;
                    this.reject = promise.reject;
                    return promise;
                }
                case 1 /* running */:
                    throw new Error('Trying to await task from within task will cause a deadlock.');
                case 2 /* completed */:
                    return this._result = Promise.resolve();
                case 3 /* canceled */:
                    return this._result = Promise.reject(new TaskAbortError(this));
            }
        }
        return result;
    }
    get status() {
        return this._status;
    }
    run(time = this.taskQueue.platform.performanceNow()) {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'run');
        }
        if (this._status !== 0 /* pending */) {
            if (this.tracer.enabled) {
                this.tracer.leave(this, 'run error');
            }
            throw new Error(`Cannot run task in ${this._status} state`);
        }
        // this.persistent could be changed while the task is running (this can only be done by the task itself if canceled, and is a valid way of stopping a loop)
        // so we deliberately reference this.persistent instead of the local variable, but we keep it around to know whether the task *was* persistent before running it,
        // so we can set the correct cancelation state.
        const { persistent, reusable, taskQueue, callback, resolve, reject, createdTime, } = this;
        this._status = 1 /* running */;
        try {
            const ret = callback(time - createdTime);
            if (ret instanceof Promise) {
                ret.then($ret => {
                    if (this.persistent) {
                        taskQueue['resetPersistentTask'](this);
                    }
                    else {
                        if (persistent) {
                            // Persistent tasks never reach completed status. They're either pending, running, or canceled.
                            this._status = 3 /* canceled */;
                        }
                        else {
                            this._status = 2 /* completed */;
                        }
                        this.dispose();
                    }
                    taskQueue['completeAsyncTask'](this);
                    if (this.tracer.enabled) {
                        this.tracer.leave(this, 'run async then');
                    }
                    if (resolve !== void 0) {
                        resolve($ret);
                    }
                    if (!this.persistent && reusable) {
                        taskQueue['returnToPool'](this);
                    }
                })
                    .catch(err => {
                    if (!this.persistent) {
                        this.dispose();
                    }
                    taskQueue['completeAsyncTask'](this);
                    if (this.tracer.enabled) {
                        this.tracer.leave(this, 'run async catch');
                    }
                    if (reject !== void 0) {
                        reject(err);
                    }
                    else {
                        throw err;
                    }
                });
            }
            else {
                if (this.persistent) {
                    taskQueue['resetPersistentTask'](this);
                }
                else {
                    if (persistent) {
                        // Persistent tasks never reach completed status. They're either pending, running, or canceled.
                        this._status = 3 /* canceled */;
                    }
                    else {
                        this._status = 2 /* completed */;
                    }
                    this.dispose();
                }
                if (this.tracer.enabled) {
                    this.tracer.leave(this, 'run sync success');
                }
                if (resolve !== void 0) {
                    resolve(ret);
                }
                if (!this.persistent && reusable) {
                    taskQueue['returnToPool'](this);
                }
            }
        }
        catch (err) {
            if (!this.persistent) {
                this.dispose();
            }
            if (this.tracer.enabled) {
                this.tracer.leave(this, 'run sync error');
            }
            if (reject !== void 0) {
                reject(err);
            }
            else {
                throw err;
            }
        }
    }
    cancel() {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'cancel');
        }
        if (this._status === 0 /* pending */) {
            const taskQueue = this.taskQueue;
            const reusable = this.reusable;
            const reject = this.reject;
            taskQueue.remove(this);
            if (taskQueue.isEmpty) {
                taskQueue.cancel();
            }
            this._status = 3 /* canceled */;
            this.dispose();
            if (reusable) {
                taskQueue['returnToPool'](this);
            }
            if (reject !== void 0) {
                reject(new TaskAbortError(this));
            }
            if (this.tracer.enabled) {
                this.tracer.leave(this, 'cancel true =pending');
            }
            return true;
        }
        else if (this._status === 1 /* running */ && this.persistent) {
            this.persistent = false;
            if (this.tracer.enabled) {
                this.tracer.leave(this, 'cancel true =running+persistent');
            }
            return true;
        }
        if (this.tracer.enabled) {
            this.tracer.leave(this, 'cancel false');
        }
        return false;
    }
    reset(time) {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'reset');
        }
        const delay = this.queueTime - this.createdTime;
        this.createdTime = time;
        this.queueTime = time + delay;
        this._status = 0 /* pending */;
        this.resolve = void 0;
        this.reject = void 0;
        this._result = void 0;
        if (this.tracer.enabled) {
            this.tracer.leave(this, 'reset');
        }
    }
    reuse(time, delay, preempt, persistent, suspend, callback) {
        if (this.tracer.enabled) {
            this.tracer.enter(this, 'reuse');
        }
        this.createdTime = time;
        this.queueTime = time + delay;
        this.preempt = preempt;
        this.persistent = persistent;
        this.suspend = suspend;
        this.callback = callback;
        this._status = 0 /* pending */;
        if (this.tracer.enabled) {
            this.tracer.leave(this, 'reuse');
        }
    }
    dispose() {
        if (this.tracer.enabled) {
            this.tracer.trace(this, 'dispose');
        }
        this.callback = (void 0);
        this.resolve = void 0;
        this.reject = void 0;
        this._result = void 0;
    }
}
function taskStatus(status) {
    switch (status) {
        case 0 /* pending */: return 'pending';
        case 1 /* running */: return 'running';
        case 3 /* canceled */: return 'canceled';
        case 2 /* completed */: return 'completed';
    }
}
class Tracer {
    constructor(console) {
        this.console = console;
        this.enabled = false;
        this.depth = 0;
    }
    enter(obj, method) {
        this.log(`${'  '.repeat(this.depth++)}> `, obj, method);
    }
    leave(obj, method) {
        this.log(`${'  '.repeat(--this.depth)}< `, obj, method);
    }
    trace(obj, method) {
        this.log(`${'  '.repeat(this.depth)}- `, obj, method);
    }
    log(prefix, obj, method) {
        if (obj instanceof TaskQueue) {
            const processing = obj['processing'].length;
            const pending = obj['pending'].length;
            const delayed = obj['delayed'].length;
            const flushReq = obj['flushRequested'];
            const susTask = !!obj['suspenderTask'];
            const info = `processing=${processing} pending=${pending} delayed=${delayed} flushReq=${flushReq} susTask=${susTask}`;
            this.console.log(`${prefix}[Q.${method}] ${info}`);
        }
        else {
            const id = obj['id'];
            const created = Math.round(obj['createdTime'] * 10) / 10;
            const queue = Math.round(obj['queueTime'] * 10) / 10;
            const preempt = obj['preempt'];
            const reusable = obj['reusable'];
            const persistent = obj['persistent'];
            const suspend = obj['suspend'];
            const status = taskStatus(obj['_status']);
            const info = `id=${id} created=${created} queue=${queue} preempt=${preempt} persistent=${persistent} reusable=${reusable} status=${status} suspend=${suspend}`;
            this.console.log(`${prefix}[T.${method}] ${info}`);
        }
    }
}
var TaskQueuePriority;
(function (TaskQueuePriority) {
    TaskQueuePriority[TaskQueuePriority["render"] = 0] = "render";
    TaskQueuePriority[TaskQueuePriority["macroTask"] = 1] = "macroTask";
    TaskQueuePriority[TaskQueuePriority["postRender"] = 2] = "postRender";
})(TaskQueuePriority || (TaskQueuePriority = {}));
const defaultQueueTaskOptions = {
    delay: 0,
    preempt: false,
    persistent: false,
    reusable: true,
    suspend: false,
};
let $resolve;
let $reject;
function executor(resolve, reject) {
    $resolve = resolve;
    $reject = reject;
}
/**
 * Efficiently create a promise where the `resolve` and `reject` functions are stored as properties on the prommise itself.
 */
function createExposedPromise() {
    const p = new Promise(executor);
    p.resolve = $resolve;
    p.reject = $reject;
    return p;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aurelia/route-recognizer/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aurelia/route-recognizer/dist/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConfigurableRoute": () => /* binding */ ConfigurableRoute,
/* harmony export */   "Endpoint": () => /* binding */ Endpoint,
/* harmony export */   "RecognizedRoute": () => /* binding */ RecognizedRoute,
/* harmony export */   "RouteRecognizer": () => /* binding */ RouteRecognizer
/* harmony export */ });
class ConfigurableRoute {
    constructor(path, caseSensitive, handler) {
        this.path = path;
        this.caseSensitive = caseSensitive;
        this.handler = handler;
    }
}
class Endpoint {
    constructor(route, paramNames) {
        this.route = route;
        this.paramNames = paramNames;
    }
}
class RecognizedRoute {
    constructor(endpoint, params) {
        this.endpoint = endpoint;
        this.params = params;
    }
}
class Candidate {
    constructor(chars, states, skippedStates, result) {
        this.chars = chars;
        this.states = states;
        this.skippedStates = skippedStates;
        this.result = result;
        this.head = states[states.length - 1];
        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain
        this.endpoint = this.head?.endpoint;
    }
    advance(ch) {
        const { chars, states, skippedStates, result } = this;
        let stateToAdd = null;
        let matchCount = 0;
        const state = states[states.length - 1];
        function $process(nextState, skippedState) {
            if (nextState.isMatch(ch)) {
                if (++matchCount === 1) {
                    stateToAdd = nextState;
                }
                else {
                    result.add(new Candidate(chars.concat(ch), states.concat(nextState), skippedState === null ? skippedStates : skippedStates.concat(skippedState), result));
                }
            }
            if (state.segment === null && nextState.isOptional && nextState.nextStates !== null) {
                if (nextState.nextStates.length > 1) {
                    throw new Error(`${nextState.nextStates.length} nextStates`);
                }
                const separator = nextState.nextStates[0];
                if (!separator.isSeparator) {
                    throw new Error(`Not a separator`);
                }
                if (separator.nextStates !== null) {
                    for (const $nextState of separator.nextStates) {
                        $process($nextState, nextState);
                    }
                }
            }
        }
        if (state.isDynamic) {
            $process(state, null);
        }
        if (state.nextStates !== null) {
            for (const nextState of state.nextStates) {
                $process(nextState, null);
            }
        }
        if (stateToAdd !== null) {
            states.push(this.head = stateToAdd);
            chars.push(ch);
            if (stateToAdd.endpoint !== null) {
                this.endpoint = stateToAdd.endpoint;
            }
        }
        if (matchCount === 0) {
            result.remove(this);
        }
    }
    finalize() {
        function collectSkippedStates(skippedStates, state) {
            const nextStates = state.nextStates;
            if (nextStates !== null) {
                if (nextStates.length === 1 && nextStates[0].segment === null) {
                    collectSkippedStates(skippedStates, nextStates[0]);
                }
                else {
                    for (const nextState of nextStates) {
                        if (nextState.isOptional && nextState.endpoint !== null) {
                            skippedStates.push(nextState);
                            if (nextState.nextStates !== null) {
                                for (const $nextState of nextState.nextStates) {
                                    collectSkippedStates(skippedStates, $nextState);
                                }
                            }
                            break;
                        }
                    }
                }
            }
        }
        collectSkippedStates(this.skippedStates, this.head);
    }
    getParams() {
        const { states, chars, endpoint } = this;
        const params = {};
        // First initialize all properties with undefined so they all exist (even if they're not filled, e.g. non-matched optional params)
        for (const name of endpoint.paramNames) {
            params[name] = void 0;
        }
        for (let i = 0, ii = states.length; i < ii; ++i) {
            const state = states[i];
            if (state.isDynamic) {
                const name = state.segment.name;
                if (params[name] === void 0) {
                    params[name] = chars[i];
                }
                else {
                    params[name] += chars[i];
                }
            }
        }
        return params;
    }
    /**
     * Compares this candidate to another candidate to determine the correct sorting order.
     *
     * This algorithm is different from `sortSolutions` in v1's route-recognizer in that it compares
     * the candidates segment-by-segment, rather than merely comparing the cumulative of segment types
     *
     * This resolves v1's ambiguity in situations like `/foo/:id/bar` vs. `/foo/bar/:id`, which had the
     * same sorting value because they both consist of two static segments and one dynamic segment.
     *
     * With this algorithm, `/foo/bar/:id` would always be sorted first because the second segment is different,
     * and static wins over dynamic.
     *
     * ### NOTE
     * This algorithm violates some of the invariants of v1's algorithm,
     * but those invariants were arguably not very sound to begin with. Example:
     *
     * `/foo/*path/bar/baz` vs. `/foo/bar/*path1/*path2`
     * - in v1, the first would win because that match has fewer stars
     * - in v2, the second will win because there is a bigger static match at the start of the pattern
     *
     * The algorithm should be more logical and easier to reason about in v2, but it's important to be aware of
     * subtle difference like this which might surprise some users who happened to rely on this behavior from v1,
     * intentionally or unintentionally.
     *
     * @param b - The candidate to compare this to.
     * Parameter name is `b` because the method should be used like so: `states.sort((a, b) => a.compareTo(b))`.
     * This will bring the candidate with the highest score to the first position of the array.
     */
    compareTo(b) {
        const statesA = this.states;
        const statesB = b.states;
        for (let iA = 0, iB = 0, ii = Math.max(statesA.length, statesB.length); iA < ii; ++iA) {
            let stateA = statesA[iA];
            if (stateA === void 0) {
                return 1;
            }
            let stateB = statesB[iB];
            if (stateB === void 0) {
                return -1;
            }
            let segmentA = stateA.segment;
            let segmentB = stateB.segment;
            if (segmentA === null) {
                if (segmentB === null) {
                    ++iB;
                    continue;
                }
                if ((stateA = statesA[++iA]) === void 0) {
                    return 1;
                }
                segmentA = stateA.segment;
            }
            else if (segmentB === null) {
                if ((stateB = statesB[++iB]) === void 0) {
                    return -1;
                }
                segmentB = stateB.segment;
            }
            if (segmentA.kind < segmentB.kind) {
                return 1;
            }
            if (segmentA.kind > segmentB.kind) {
                return -1;
            }
            ++iB;
        }
        const skippedStatesA = this.skippedStates;
        const skippedStatesB = b.skippedStates;
        const skippedStatesALen = skippedStatesA.length;
        const skippedStatesBLen = skippedStatesB.length;
        if (skippedStatesALen < skippedStatesBLen) {
            return 1;
        }
        if (skippedStatesALen > skippedStatesBLen) {
            return -1;
        }
        for (let i = 0; i < skippedStatesALen; ++i) {
            const skippedStateA = skippedStatesA[i];
            const skippedStateB = skippedStatesB[i];
            if (skippedStateA.length < skippedStateB.length) {
                return 1;
            }
            if (skippedStateA.length > skippedStateB.length) {
                return -1;
            }
        }
        // This should only be possible with a single pattern with multiple consecutive star segments.
        // TODO: probably want to warn or even throw here, but leave it be for now.
        return 0;
    }
}
function hasEndpoint(candidate) {
    return candidate.head.endpoint !== null;
}
function compareChains(a, b) {
    return a.compareTo(b);
}
class RecognizeResult {
    constructor(rootState) {
        this.candidates = [];
        this.candidates = [new Candidate([''], [rootState], [], this)];
    }
    get isEmpty() {
        return this.candidates.length === 0;
    }
    getSolution() {
        const candidates = this.candidates.filter(hasEndpoint);
        if (candidates.length === 0) {
            return null;
        }
        for (const candidate of candidates) {
            candidate.finalize();
        }
        candidates.sort(compareChains);
        return candidates[0];
    }
    add(candidate) {
        this.candidates.push(candidate);
    }
    remove(candidate) {
        this.candidates.splice(this.candidates.indexOf(candidate), 1);
    }
    advance(ch) {
        const candidates = this.candidates.slice();
        for (const candidate of candidates) {
            candidate.advance(ch);
        }
    }
}
class RouteRecognizer {
    constructor() {
        this.rootState = new State(null, null, '');
        this.cache = new Map();
    }
    add(routeOrRoutes) {
        if (routeOrRoutes instanceof Array) {
            for (const route of routeOrRoutes) {
                this.$add(route);
            }
        }
        else {
            this.$add(routeOrRoutes);
        }
        // Clear the cache whenever there are state changes, because the recognizeResults could be arbitrarily different as a result
        this.cache.clear();
    }
    $add(route) {
        const path = route.path;
        const $route = new ConfigurableRoute(route.path, route.caseSensitive === true, route.handler);
        // Normalize leading, trailing and double slashes by ignoring empty segments
        const parts = path === '' ? [''] : path.split('/').filter(isNotEmpty);
        const paramNames = [];
        let state = this.rootState;
        for (const part of parts) {
            // Each segment always begins with a slash, so we represent this with a non-segment state
            state = state.append(null, '/');
            switch (part.charAt(0)) {
                case ':': { // route parameter
                    const isOptional = part.endsWith('?');
                    const name = isOptional ? part.slice(1, -1) : part.slice(1);
                    paramNames.push(name);
                    state = new DynamicSegment(name, isOptional).appendTo(state);
                    break;
                }
                case '*': { // dynamic route
                    const name = part.slice(1);
                    paramNames.push(name);
                    state = new StarSegment(name).appendTo(state);
                    break;
                }
                default: { // standard path route
                    state = new StaticSegment(part, $route.caseSensitive).appendTo(state);
                    break;
                }
            }
        }
        const endpoint = new Endpoint($route, paramNames);
        state.setEndpoint(endpoint);
    }
    recognize(path) {
        let result = this.cache.get(path);
        if (result === void 0) {
            this.cache.set(path, result = this.$recognize(path));
        }
        return result;
    }
    $recognize(path) {
        path = decodeURI(path);
        if (!path.startsWith('/')) {
            path = `/${path}`;
        }
        if (path.length > 1 && path.endsWith('/')) {
            path = path.slice(0, -1);
        }
        const result = new RecognizeResult(this.rootState);
        for (let i = 0, ii = path.length; i < ii; ++i) {
            const ch = path.charAt(i);
            result.advance(ch);
            if (result.isEmpty) {
                return null;
            }
        }
        const candidate = result.getSolution();
        if (candidate === null) {
            return null;
        }
        const { endpoint } = candidate;
        const params = candidate.getParams();
        return new RecognizedRoute(endpoint, params);
    }
}
class State {
    constructor(prevState, segment, value) {
        this.prevState = prevState;
        this.segment = segment;
        this.value = value;
        this.nextStates = null;
        this.endpoint = null;
        switch (segment?.kind) {
            case 2 /* dynamic */:
                this.length = prevState.length + 1;
                this.isSeparator = false;
                this.isDynamic = true;
                this.isOptional = segment.optional;
                break;
            case 1 /* star */:
                this.length = prevState.length + 1;
                this.isSeparator = false;
                this.isDynamic = true;
                this.isOptional = false;
                break;
            case 3 /* static */:
                this.length = prevState.length + 1;
                this.isSeparator = false;
                this.isDynamic = false;
                this.isOptional = false;
                break;
            case undefined:
                this.length = prevState === null ? 0 : prevState.length;
                this.isSeparator = true;
                this.isDynamic = false;
                this.isOptional = false;
                break;
        }
    }
    append(segment, value) {
        let state;
        let nextStates = this.nextStates;
        if (nextStates === null) {
            state = void 0;
            nextStates = this.nextStates = [];
        }
        else if (segment === null) {
            state = nextStates.find(s => s.value === value);
        }
        else {
            state = nextStates.find(s => s.segment?.equals(segment));
        }
        if (state === void 0) {
            nextStates.push(state = new State(this, segment, value));
        }
        return state;
    }
    setEndpoint(endpoint) {
        if (this.endpoint !== null) {
            throw new Error(`Cannot add ambiguous route. The pattern '${endpoint.route.path}' clashes with '${this.endpoint.route.path}'`);
        }
        this.endpoint = endpoint;
        if (this.isOptional) {
            this.prevState.setEndpoint(endpoint);
            if (this.prevState.isSeparator && this.prevState.prevState !== null) {
                this.prevState.prevState.setEndpoint(endpoint);
            }
        }
    }
    isMatch(ch) {
        const segment = this.segment;
        switch (segment?.kind) {
            case 2 /* dynamic */:
                return !this.value.includes(ch);
            case 1 /* star */:
                return true;
            case 3 /* static */:
            case undefined:
                // segment separators (slashes) are non-segments. We could say return ch === '/' as well, technically.
                return this.value.includes(ch);
        }
    }
}
function isNotEmpty(segment) {
    return segment.length > 0;
}
var SegmentKind;
(function (SegmentKind) {
    SegmentKind[SegmentKind["star"] = 1] = "star";
    SegmentKind[SegmentKind["dynamic"] = 2] = "dynamic";
    SegmentKind[SegmentKind["static"] = 3] = "static";
})(SegmentKind || (SegmentKind = {}));
class StaticSegment {
    constructor(value, caseSensitive) {
        this.value = value;
        this.caseSensitive = caseSensitive;
    }
    get kind() { return 3 /* static */; }
    appendTo(state) {
        const { value, value: { length } } = this;
        if (this.caseSensitive) {
            for (let i = 0; i < length; ++i) {
                state = state.append(
                /* segment */ this, 
                /* value   */ value.charAt(i));
            }
        }
        else {
            for (let i = 0; i < length; ++i) {
                const ch = value.charAt(i);
                state = state.append(
                /* segment */ this, 
                /* value   */ ch.toUpperCase() + ch.toLowerCase());
            }
        }
        return state;
    }
    equals(b) {
        return (b.kind === 3 /* static */ &&
            b.caseSensitive === this.caseSensitive &&
            b.value === this.value);
    }
}
class DynamicSegment {
    constructor(name, optional) {
        this.name = name;
        this.optional = optional;
    }
    get kind() { return 2 /* dynamic */; }
    appendTo(state) {
        state = state.append(
        /* segment */ this, 
        /* value   */ '/');
        return state;
    }
    equals(b) {
        return (b.kind === 2 /* dynamic */ &&
            b.optional === this.optional &&
            b.name === this.name);
    }
}
class StarSegment {
    constructor(name) {
        this.name = name;
    }
    get kind() { return 1 /* star */; }
    appendTo(state) {
        state = state.append(
        /* segment */ this, 
        /* value   */ '');
        return state;
    }
    equals(b) {
        return (b.kind === 1 /* star */ &&
            b.name === this.name);
    }
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/awaitable-map.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/awaitable-map.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AwaitableMap": () => /* binding */ AwaitableMap
/* harmony export */ });
/* harmony import */ var _open_promise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./open-promise.js */ "./node_modules/@aurelia/router/dist/esm/open-promise.js");
// export class OpenPromise<T> {
//   public isPending: boolean = true;
//   public promise!: Promise<T>;
//   public resolve!: (value: T | PromiseLike<T>) => void;
//   public reject!: () => void;
// }

class AwaitableMap {
    constructor() {
        this.map = new Map();
    }
    set(key, value) {
        const openPromise = this.map.get(key);
        if (openPromise instanceof _open_promise_js__WEBPACK_IMPORTED_MODULE_0__.OpenPromise) {
            openPromise.resolve(value);
            // openPromise.isPending = false;
        }
        this.map.set(key, value);
    }
    delete(key) {
        const current = this.map.get(key);
        if (current instanceof _open_promise_js__WEBPACK_IMPORTED_MODULE_0__.OpenPromise) {
            current.reject();
            // current.isPending = false;
        }
        this.map.delete(key);
    }
    await(key) {
        if (!this.map.has(key)) {
            const openPromise = new _open_promise_js__WEBPACK_IMPORTED_MODULE_0__.OpenPromise();
            // openPromise.promise = new Promise((res, rej) => {
            //   openPromise.resolve = res;
            //   openPromise.reject = rej;
            // });
            this.map.set(key, openPromise);
            return openPromise.promise;
        }
        const current = this.map.get(key);
        if (current instanceof _open_promise_js__WEBPACK_IMPORTED_MODULE_0__.OpenPromise) {
            return current.promise;
        }
        return current;
    }
    has(key) {
        return this.map.has(key) && !(this.map.get(key) instanceof _open_promise_js__WEBPACK_IMPORTED_MODULE_0__.OpenPromise);
    }
    clone() {
        const clone = new AwaitableMap();
        clone.map = new Map(this.map);
        return clone;
    }
}
//# sourceMappingURL=awaitable-map.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/browser-viewer-store.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/browser-viewer-store.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserViewerStore": () => /* binding */ BrowserViewerStore
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _task_queue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-queue.js */ "./node_modules/@aurelia/router/dist/esm/task-queue.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


/**
 * @internal - Shouldn't be used directly
 */
let BrowserViewerStore = class BrowserViewerStore {
    constructor(platform, window, history, location) {
        this.platform = platform;
        this.window = window;
        this.history = history;
        this.location = location;
        this.allowedExecutionCostWithinTick = 2; // Limit no of executed actions within the same RAF (due to browser limitation)
        this.isActive = false;
        this.options = {
            useUrlFragmentHash: true,
            callback: () => { return; },
        };
        this.forwardedState = { eventTask: null, suppressPopstate: false };
        this.handlePopstate = async (event) => {
            const { eventTask, suppressPopstate } = this.forwardedState;
            this.forwardedState = { eventTask: null, suppressPopstate: false };
            return this.pendingCalls.enqueue(async (task) => {
                const store = this;
                const ev = event;
                const evTask = eventTask;
                const suppressPopstateEvent = suppressPopstate;
                await store.popstate(ev, evTask, suppressPopstateEvent);
                task.resolve();
            }, 1).wait();
        };
        this.pendingCalls = new _task_queue_js__WEBPACK_IMPORTED_MODULE_1__.TaskQueue();
    }
    start(options) {
        if (this.isActive) {
            throw new Error('Browser navigation has already been started');
        }
        this.isActive = true;
        this.options.callback = options.callback;
        if (options.useUrlFragmentHash != void 0) {
            this.options.useUrlFragmentHash = options.useUrlFragmentHash;
        }
        this.pendingCalls.start({ platform: this.platform, allowedExecutionCostWithinTick: this.allowedExecutionCostWithinTick });
        this.window.addEventListener('popstate', this.handlePopstate);
    }
    stop() {
        if (!this.isActive) {
            throw new Error('Browser navigation has not been started');
        }
        this.window.removeEventListener('popstate', this.handlePopstate);
        this.pendingCalls.stop();
        this.options = { useUrlFragmentHash: true, callback: () => { return; } };
        this.isActive = false;
    }
    get length() {
        return this.history.length;
    }
    get state() {
        return this.history.state;
    }
    get viewerState() {
        const { pathname, search, hash } = this.location;
        return {
            path: pathname,
            query: search,
            hash,
            instruction: this.options.useUrlFragmentHash ? hash.slice(1) : pathname,
        };
    }
    async go(delta, suppressPopstateEvent = false) {
        const doneTask = this.pendingCalls.createQueueTask((task) => task.resolve(), 1);
        this.pendingCalls.enqueue([
            (task) => {
                const store = this;
                const eventTask = doneTask;
                const suppressPopstate = suppressPopstateEvent;
                store.forwardState({ eventTask, suppressPopstate });
                task.resolve();
            },
            (task) => {
                const history = this.history;
                const steps = delta;
                history.go(steps);
                task.resolve();
            },
        ], [0, 1]);
        return doneTask.wait();
    }
    async pushNavigatorState(state) {
        const { title, path } = state.currentEntry;
        const fragment = this.options.useUrlFragmentHash ? '#/' : '';
        return this.pendingCalls.enqueue((task) => {
            const history = this.history;
            const data = state;
            const titleOrEmpty = title || '';
            const url = `${fragment}${path}`;
            history.pushState(data, titleOrEmpty, url);
            task.resolve();
        }, 1).wait();
    }
    async replaceNavigatorState(state) {
        const { title, path } = state.currentEntry;
        const fragment = this.options.useUrlFragmentHash ? '#/' : '';
        return this.pendingCalls.enqueue((task) => {
            const history = this.history;
            const data = state;
            const titleOrEmpty = title || '';
            const url = `${fragment}${path}`;
            history.replaceState(data, titleOrEmpty, url);
            task.resolve();
        }, 1).wait();
    }
    async popNavigatorState() {
        const doneTask = this.pendingCalls.createQueueTask((task) => task.resolve(), 1);
        this.pendingCalls.enqueue(async (task) => {
            const store = this;
            const eventTask = doneTask;
            await store.popState(eventTask);
            task.resolve();
        }, 1);
        return doneTask.wait();
    }
    async popState(doneTask) {
        await this.go(-1, true);
        const state = this.history.state;
        // TODO: Fix browser forward bug after pop on first entry
        if (state && state.currentEntry && !state.currentEntry.firstEntry) {
            await this.go(-1, true);
            await this.pushNavigatorState(state);
        }
        await doneTask.execute();
    }
    forwardState(state) {
        this.forwardedState = state;
    }
    async popstate(ev, eventTask, suppressPopstate = false) {
        if (!suppressPopstate) {
            this.options.callback({
                ...this.viewerState,
                ...{
                    event: ev,
                    state: this.history.state,
                },
            });
        }
        if (eventTask !== null) {
            await eventTask.execute();
        }
    }
    setTitle(title) {
        this.window.document.title = title;
    }
};
BrowserViewerStore = __decorate([
    __param(0, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.IPlatform),
    __param(1, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.IWindow),
    __param(2, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.IHistory),
    __param(3, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.ILocation)
], BrowserViewerStore);

//# sourceMappingURL=browser-viewer-store.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/collection.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/collection.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Collection": () => /* binding */ Collection
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@aurelia/router/dist/esm/utils.js");

/**
 * @internal - Helper class
 */
class Collection extends Array {
    constructor() {
        super(...arguments);
        this.currentIndex = -1;
    }
    next() {
        if (this.length > this.currentIndex + 1) {
            return this[++this.currentIndex];
        }
        else {
            this.currentIndex = -1;
            return null;
        }
    }
    removeCurrent() {
        this.splice(this.currentIndex--, 1);
    }
    remove(instruction) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.arrayRemove)(this, value => value === instruction);
    }
}
//# sourceMappingURL=collection.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/configuration.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/configuration.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouterRegistration": () => /* binding */ RouterRegistration,
/* harmony export */   "DefaultComponents": () => /* binding */ DefaultComponents,
/* harmony export */   "ViewportCustomElement": () => /* reexport safe */ _resources_viewport_js__WEBPACK_IMPORTED_MODULE_3__.ViewportCustomElement,
/* harmony export */   "ViewportScopeCustomElement": () => /* reexport safe */ _resources_viewport_scope_js__WEBPACK_IMPORTED_MODULE_4__.ViewportScopeCustomElement,
/* harmony export */   "NavCustomElement": () => /* reexport safe */ _resources_nav_js__WEBPACK_IMPORTED_MODULE_2__.NavCustomElement,
/* harmony export */   "GotoCustomAttribute": () => /* reexport safe */ _resources_goto_js__WEBPACK_IMPORTED_MODULE_5__.GotoCustomAttribute,
/* harmony export */   "LoadCustomAttribute": () => /* reexport safe */ _resources_load_js__WEBPACK_IMPORTED_MODULE_6__.LoadCustomAttribute,
/* harmony export */   "HrefCustomAttribute": () => /* reexport safe */ _resources_href_js__WEBPACK_IMPORTED_MODULE_7__.HrefCustomAttribute,
/* harmony export */   "ViewportCustomElementRegistration": () => /* binding */ ViewportCustomElementRegistration,
/* harmony export */   "ViewportScopeCustomElementRegistration": () => /* binding */ ViewportScopeCustomElementRegistration,
/* harmony export */   "NavCustomElementRegistration": () => /* binding */ NavCustomElementRegistration,
/* harmony export */   "GotoCustomAttributeRegistration": () => /* binding */ GotoCustomAttributeRegistration,
/* harmony export */   "LoadCustomAttributeRegistration": () => /* binding */ LoadCustomAttributeRegistration,
/* harmony export */   "HrefCustomAttributeRegistration": () => /* binding */ HrefCustomAttributeRegistration,
/* harmony export */   "DefaultResources": () => /* binding */ DefaultResources,
/* harmony export */   "RouterConfiguration": () => /* binding */ RouterConfiguration
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _resources_nav_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resources/nav.js */ "./node_modules/@aurelia/router/dist/esm/resources/nav.js");
/* harmony import */ var _resources_viewport_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resources/viewport.js */ "./node_modules/@aurelia/router/dist/esm/resources/viewport.js");
/* harmony import */ var _resources_viewport_scope_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resources/viewport-scope.js */ "./node_modules/@aurelia/router/dist/esm/resources/viewport-scope.js");
/* harmony import */ var _resources_goto_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resources/goto.js */ "./node_modules/@aurelia/router/dist/esm/resources/goto.js");
/* harmony import */ var _resources_load_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resources/load.js */ "./node_modules/@aurelia/router/dist/esm/resources/load.js");
/* harmony import */ var _resources_href_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./resources/href.js */ "./node_modules/@aurelia/router/dist/esm/resources/href.js");
/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./router.js */ "./node_modules/@aurelia/router/dist/esm/router.js");









const RouterRegistration = _router_js__WEBPACK_IMPORTED_MODULE_8__.IRouter;
/**
 * Default runtime/environment-agnostic implementations for the following interfaces:
 * - `IRouter`
 */
const DefaultComponents = [
    RouterRegistration,
];

const ViewportCustomElementRegistration = _resources_viewport_js__WEBPACK_IMPORTED_MODULE_3__.ViewportCustomElement;
const ViewportScopeCustomElementRegistration = _resources_viewport_scope_js__WEBPACK_IMPORTED_MODULE_4__.ViewportScopeCustomElement;
const NavCustomElementRegistration = _resources_nav_js__WEBPACK_IMPORTED_MODULE_2__.NavCustomElement;
const GotoCustomAttributeRegistration = _resources_goto_js__WEBPACK_IMPORTED_MODULE_5__.GotoCustomAttribute;
const LoadCustomAttributeRegistration = _resources_load_js__WEBPACK_IMPORTED_MODULE_6__.LoadCustomAttribute;
const HrefCustomAttributeRegistration = _resources_href_js__WEBPACK_IMPORTED_MODULE_7__.HrefCustomAttribute;
/**
 * Default router resources:
 * - Custom Elements: `au-viewport`, `au-nav`
 * - Custom Attributes: `goto`, `load`, `href`
 */
const DefaultResources = [
    _resources_viewport_js__WEBPACK_IMPORTED_MODULE_3__.ViewportCustomElement,
    _resources_viewport_scope_js__WEBPACK_IMPORTED_MODULE_4__.ViewportScopeCustomElement,
    _resources_nav_js__WEBPACK_IMPORTED_MODULE_2__.NavCustomElement,
    _resources_goto_js__WEBPACK_IMPORTED_MODULE_5__.GotoCustomAttribute,
    _resources_load_js__WEBPACK_IMPORTED_MODULE_6__.LoadCustomAttribute,
    _resources_href_js__WEBPACK_IMPORTED_MODULE_7__.HrefCustomAttribute,
];
let configurationOptions = {};
let configurationCall = (router) => {
    router.start(configurationOptions);
};
/**
 * A DI configuration object containing router resource registrations.
 */
const routerConfiguration = {
    /**
     * Apply this configuration to the provided container.
     */
    register(container) {
        return container.register(...DefaultComponents, ...DefaultResources, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.AppTask.with(_router_js__WEBPACK_IMPORTED_MODULE_8__.IRouter).beforeActivate().call(configurationCall), _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.AppTask.with(_router_js__WEBPACK_IMPORTED_MODULE_8__.IRouter).afterActivate().call(router => router.loadUrl()), _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.AppTask.with(_router_js__WEBPACK_IMPORTED_MODULE_8__.IRouter).afterDeactivate().call(router => router.stop()));
    },
    /**
     * Create a new container with this configuration applied to it.
     */
    createContainer() {
        return this.register(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createContainer());
    }
};
const RouterConfiguration = {
    /**
     * Make it possible to specify options to Router activation.
     * Parameter is either a config object that's passed to Router's start
     * or a config function that's called instead of Router's start.
     */
    customize(config) {
        if (config === undefined) {
            configurationOptions = {};
            configurationCall = (router) => {
                router.start(configurationOptions);
            };
        }
        else if (config instanceof Function) {
            configurationCall = config;
        }
        else {
            configurationOptions = config;
        }
        return { ...routerConfiguration };
    },
    ...routerConfiguration,
};
//# sourceMappingURL=configuration.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/found-route.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/found-route.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FoundRoute": () => /* binding */ FoundRoute
/* harmony export */ });
/**
 * @internal - Used when founding route/instructions
 */
class FoundRoute {
    constructor(match = null, matching = '', instructions = [], remaining = '', 
    // public remaining: string | null = null,
    params = {}) {
        this.match = match;
        this.matching = matching;
        this.instructions = instructions;
        this.remaining = remaining;
        this.params = params;
    }
    get foundConfiguration() {
        return this.match !== null;
    }
    get foundInstructions() {
        return this.instructions.length > 0;
    }
    get hasRemaining() {
        return this.remaining !== null && this.remaining.length > 0;
    }
}
//# sourceMappingURL=found-route.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/hook-manager.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/hook-manager.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HookTypes": () => /* binding */ HookTypes,
/* harmony export */   "HookManager": () => /* binding */ HookManager
/* harmony export */ });
/* harmony import */ var _hook_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hook.js */ "./node_modules/@aurelia/router/dist/esm/hook.js");

/**
 * Public API
 */
var HookTypes;
(function (HookTypes) {
    HookTypes["BeforeNavigation"] = "beforeNavigation";
    HookTypes["TransformFromUrl"] = "transformFromUrl";
    HookTypes["TransformToUrl"] = "transformToUrl";
    HookTypes["SetTitle"] = "setTitle";
})(HookTypes || (HookTypes = {}));
/**
 * @internal - Shouldn't be used directly
 */
class HookManager {
    constructor() {
        this.hooks = {
            beforeNavigation: [],
            transformFromUrl: [],
            transformToUrl: [],
            setTitle: [],
        };
        this.lastIdentity = 0;
    }
    addHook(hookFunction, options) {
        const hook = new _hook_js__WEBPACK_IMPORTED_MODULE_0__.Hook(hookFunction, options || {}, ++this.lastIdentity);
        this.hooks[hook.type].push(hook);
        return this.lastIdentity;
    }
    removeHook(id) {
        for (const type in this.hooks) {
            if (Object.prototype.hasOwnProperty.call(this.hooks, type)) {
                const index = this.hooks[type].findIndex(hook => hook.id === id);
                if (index >= 0) {
                    this.hooks[type].splice(index, 1);
                }
            }
        }
    }
    async invokeBeforeNavigation(viewportInstructions, navigationInstruction) {
        return this.invoke("beforeNavigation" /* BeforeNavigation */, navigationInstruction, viewportInstructions);
    }
    async invokeTransformFromUrl(url, navigationInstruction) {
        return this.invoke("transformFromUrl" /* TransformFromUrl */, navigationInstruction, url);
    }
    async invokeTransformToUrl(state, navigationInstruction) {
        return this.invoke("transformToUrl" /* TransformToUrl */, navigationInstruction, state);
    }
    async invokeSetTitle(title, navigationInstruction) {
        return this.invoke("setTitle" /* SetTitle */, navigationInstruction, title);
    }
    async invoke(type, navigationInstruction, arg) {
        for (const hook of this.hooks[type]) {
            if (!hook.wantsMatch || hook.matches(arg)) {
                const outcome = await hook.invoke(navigationInstruction, arg);
                if (typeof outcome === 'boolean') {
                    if (!outcome) {
                        return false;
                    }
                }
                else {
                    arg = outcome;
                }
            }
        }
        return arg;
    }
}
//# sourceMappingURL=hook-manager.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/hook.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/hook.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Hook": () => /* binding */ Hook
/* harmony export */ });
/* harmony import */ var _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type-resolvers.js */ "./node_modules/@aurelia/router/dist/esm/type-resolvers.js");
/* harmony import */ var _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./viewport-instruction.js */ "./node_modules/@aurelia/router/dist/esm/viewport-instruction.js");


/**
 * @internal - Shouldn't be used directly
 */
class Hook {
    constructor(hook, options, id) {
        this.hook = hook;
        this.id = id;
        this.type = "beforeNavigation" /* BeforeNavigation */;
        this.includeTargets = [];
        this.excludeTargets = [];
        if (options.type !== void 0) {
            this.type = options.type;
        }
        for (const target of options.include || []) {
            this.includeTargets.push(new Target(target));
        }
        for (const target of options.exclude || []) {
            this.excludeTargets.push(new Target(target));
        }
    }
    get wantsMatch() {
        return this.includeTargets.length > 0 || this.excludeTargets.length > 0;
    }
    matches(viewportInstructions) {
        if (this.includeTargets.length && !this.includeTargets.some(target => target.matches(viewportInstructions))) {
            return false;
        }
        if (this.excludeTargets.length && this.excludeTargets.some(target => target.matches(viewportInstructions))) {
            return false;
        }
        return true;
    }
    invoke(navigationInstruction, arg) {
        // TODO: Fix the type here
        return this.hook(arg, navigationInstruction);
    }
}
class Target {
    constructor(target) {
        this.componentType = null;
        this.componentName = null;
        this.viewport = null;
        this.viewportName = null;
        if (typeof target === 'string') {
            this.componentName = target;
        }
        else if (_type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__.ComponentAppellationResolver.isType(target)) {
            this.componentType = target;
            this.componentName = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__.ComponentAppellationResolver.getName(target);
        }
        else {
            const cvTarget = target;
            if (cvTarget.component) {
                this.componentType = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__.ComponentAppellationResolver.isType(cvTarget.component)
                    ? _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__.ComponentAppellationResolver.getType(cvTarget.component)
                    : null;
                this.componentName = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__.ComponentAppellationResolver.getName(cvTarget.component);
            }
            if (cvTarget.viewport) {
                this.viewport = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__.ViewportHandleResolver.isInstance(cvTarget.viewport) ? cvTarget.viewport : null;
                this.viewportName = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__.ViewportHandleResolver.getName(cvTarget.viewport);
            }
        }
    }
    matches(viewportInstructions) {
        const instructions = viewportInstructions.slice();
        if (!instructions.length) {
            // instructions.push(new ViewportInstruction(''));
            instructions.push(_viewport_instruction_js__WEBPACK_IMPORTED_MODULE_1__.ViewportInstruction.create(null, ''));
        }
        for (const instruction of instructions) {
            if ((this.componentName !== null && this.componentName === instruction.componentName) ||
                (this.componentType !== null && this.componentType === instruction.componentType) ||
                (this.viewportName !== null && this.viewportName === instruction.viewportName) ||
                (this.viewport !== null && this.viewport === instruction.viewport)) {
                return true;
            }
        }
        return false;
    }
}
//# sourceMappingURL=hook.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LinkHandler": () => /* reexport safe */ _link_handler_js__WEBPACK_IMPORTED_MODULE_0__.LinkHandler,
/* harmony export */   "InstructionResolver": () => /* reexport safe */ _instruction_resolver_js__WEBPACK_IMPORTED_MODULE_1__.InstructionResolver,
/* harmony export */   "ReentryBehavior": () => /* reexport safe */ _interfaces_js__WEBPACK_IMPORTED_MODULE_2__.ReentryBehavior,
/* harmony export */   "lifecycleLogger": () => /* reexport safe */ _lifecycle_logger_js__WEBPACK_IMPORTED_MODULE_3__.lifecycleLogger,
/* harmony export */   "LifecycleClass": () => /* reexport safe */ _lifecycle_logger_js__WEBPACK_IMPORTED_MODULE_3__.LifecycleClass,
/* harmony export */   "HookManager": () => /* reexport safe */ _hook_manager_js__WEBPACK_IMPORTED_MODULE_4__.HookManager,
/* harmony export */   "HookTypes": () => /* reexport safe */ _hook_manager_js__WEBPACK_IMPORTED_MODULE_4__.HookTypes,
/* harmony export */   "Nav": () => /* reexport safe */ _nav_js__WEBPACK_IMPORTED_MODULE_5__.Nav,
/* harmony export */   "NavRoute": () => /* reexport safe */ _nav_route_js__WEBPACK_IMPORTED_MODULE_6__.NavRoute,
/* harmony export */   "Navigation": () => /* reexport safe */ _navigation_js__WEBPACK_IMPORTED_MODULE_7__.Navigation,
/* harmony export */   "Navigator": () => /* reexport safe */ _navigator_js__WEBPACK_IMPORTED_MODULE_8__.Navigator,
/* harmony export */   "Runner": () => /* reexport safe */ _runner_js__WEBPACK_IMPORTED_MODULE_9__.Runner,
/* harmony export */   "Queue": () => /* reexport safe */ _queue_js__WEBPACK_IMPORTED_MODULE_10__.Queue,
/* harmony export */   "RouteRecognizer": () => /* reexport safe */ _route_recognizer_js__WEBPACK_IMPORTED_MODULE_11__.RouteRecognizer,
/* harmony export */   "ConfigurableRoute": () => /* reexport safe */ _route_recognizer_js__WEBPACK_IMPORTED_MODULE_11__.ConfigurableRoute,
/* harmony export */   "RecognizedRoute": () => /* reexport safe */ _route_recognizer_js__WEBPACK_IMPORTED_MODULE_11__.RecognizedRoute,
/* harmony export */   "Endpoint": () => /* reexport safe */ _route_recognizer_js__WEBPACK_IMPORTED_MODULE_11__.Endpoint,
/* harmony export */   "IRouter": () => /* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_12__.IRouter,
/* harmony export */   "Router": () => /* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_12__.Router,
/* harmony export */   "RouterOptions": () => /* reexport safe */ _router_options_js__WEBPACK_IMPORTED_MODULE_13__.RouterOptions,
/* harmony export */   "Viewport": () => /* reexport safe */ _viewport_js__WEBPACK_IMPORTED_MODULE_14__.Viewport,
/* harmony export */   "ContentStatus": () => /* reexport safe */ _viewport_content_js__WEBPACK_IMPORTED_MODULE_15__.ContentStatus,
/* harmony export */   "ViewportContent": () => /* reexport safe */ _viewport_content_js__WEBPACK_IMPORTED_MODULE_15__.ViewportContent,
/* harmony export */   "ViewportInstruction": () => /* reexport safe */ _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_16__.ViewportInstruction,
/* harmony export */   "RouterConfiguration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.RouterConfiguration,
/* harmony export */   "RouterRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.RouterRegistration,
/* harmony export */   "DefaultComponents": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.DefaultComponents,
/* harmony export */   "DefaultResources": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.DefaultResources,
/* harmony export */   "ViewportCustomElement": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.ViewportCustomElement,
/* harmony export */   "ViewportCustomElementRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.ViewportCustomElementRegistration,
/* harmony export */   "NavCustomElement": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.NavCustomElement,
/* harmony export */   "NavCustomElementRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.NavCustomElementRegistration,
/* harmony export */   "GotoCustomAttribute": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.GotoCustomAttribute,
/* harmony export */   "GotoCustomAttributeRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.GotoCustomAttributeRegistration,
/* harmony export */   "LoadCustomAttribute": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.LoadCustomAttribute,
/* harmony export */   "LoadCustomAttributeRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.LoadCustomAttributeRegistration,
/* harmony export */   "HrefCustomAttribute": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.HrefCustomAttribute,
/* harmony export */   "HrefCustomAttributeRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_17__.HrefCustomAttributeRegistration
/* harmony export */ });
/* harmony import */ var _link_handler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./link-handler.js */ "./node_modules/@aurelia/router/dist/esm/link-handler.js");
/* harmony import */ var _instruction_resolver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instruction-resolver.js */ "./node_modules/@aurelia/router/dist/esm/instruction-resolver.js");
/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interfaces.js */ "./node_modules/@aurelia/router/dist/esm/interfaces.js");
/* harmony import */ var _lifecycle_logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lifecycle-logger.js */ "./node_modules/@aurelia/router/dist/esm/lifecycle-logger.js");
/* harmony import */ var _hook_manager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hook-manager.js */ "./node_modules/@aurelia/router/dist/esm/hook-manager.js");
/* harmony import */ var _nav_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./nav.js */ "./node_modules/@aurelia/router/dist/esm/nav.js");
/* harmony import */ var _nav_route_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./nav-route.js */ "./node_modules/@aurelia/router/dist/esm/nav-route.js");
/* harmony import */ var _navigation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./navigation.js */ "./node_modules/@aurelia/router/dist/esm/navigation.js");
/* harmony import */ var _navigator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./navigator.js */ "./node_modules/@aurelia/router/dist/esm/navigator.js");
/* harmony import */ var _runner_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./runner.js */ "./node_modules/@aurelia/router/dist/esm/runner.js");
/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./queue.js */ "./node_modules/@aurelia/router/dist/esm/queue.js");
/* harmony import */ var _route_recognizer_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./route-recognizer.js */ "./node_modules/@aurelia/router/dist/esm/route-recognizer.js");
/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./router.js */ "./node_modules/@aurelia/router/dist/esm/router.js");
/* harmony import */ var _router_options_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./router-options.js */ "./node_modules/@aurelia/router/dist/esm/router-options.js");
/* harmony import */ var _viewport_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./viewport.js */ "./node_modules/@aurelia/router/dist/esm/viewport.js");
/* harmony import */ var _viewport_content_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./viewport-content.js */ "./node_modules/@aurelia/router/dist/esm/viewport-content.js");
/* harmony import */ var _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./viewport-instruction.js */ "./node_modules/@aurelia/router/dist/esm/viewport-instruction.js");
/* harmony import */ var _configuration_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./configuration.js */ "./node_modules/@aurelia/router/dist/esm/configuration.js");


















//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/instruction-resolver.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/instruction-resolver.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InstructionResolver": () => /* binding */ InstructionResolver
/* harmony export */ });
/* harmony import */ var _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./viewport-instruction.js */ "./node_modules/@aurelia/router/dist/esm/viewport-instruction.js");

class InstructionResolver {
    constructor() {
        this.separators = {
            viewport: '@',
            sibling: '+',
            scope: '/',
            scopeStart: '(',
            scopeEnd: ')',
            noScope: '!',
            parameters: '(',
            parametersEnd: ')',
            parameterSeparator: ',',
            parameterKeySeparator: '=',
            parameter: '&',
            add: '+',
            clear: '-',
            action: '.',
        };
    }
    start(options) {
        options = options || {};
        this.separators = { ...this.separators, ...options.separators };
    }
    get clearViewportInstruction() {
        return this.separators.clear;
    }
    get addViewportInstruction() {
        return this.separators.add;
    }
    isClearViewportInstruction(instruction) {
        return instruction instanceof _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_0__.ViewportInstruction
            ? instruction.componentName === this.clearViewportInstruction && !!instruction.viewportName
            : instruction.startsWith(this.clearViewportInstruction) && instruction !== this.clearViewportInstruction;
    }
    isAddViewportInstruction(instruction) {
        return instruction instanceof _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_0__.ViewportInstruction
            ? instruction.componentName === this.addViewportInstruction
            : (instruction === this.addViewportInstruction
                || instruction.startsWith(`${this.separators.add}${this.separators.viewport}`));
    }
    isClearViewportScopeInstruction(instruction) {
        return instruction instanceof _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_0__.ViewportInstruction
            ? instruction.componentName === this.clearViewportInstruction && !!instruction.viewportScope
            : instruction.startsWith(this.clearViewportInstruction) && instruction !== this.clearViewportInstruction;
    }
    isClearAllViewportsInstruction(instruction) {
        return instruction instanceof _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_0__.ViewportInstruction
            ? instruction.componentName === this.clearViewportInstruction && !instruction.viewportName
            : instruction === this.clearViewportInstruction;
    }
    isAddAllViewportsInstruction(instruction) {
        return instruction instanceof _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_0__.ViewportInstruction
            ? instruction.componentName === this.addViewportInstruction && !instruction.viewportName
            : instruction === this.addViewportInstruction;
    }
    createViewportInstruction(component, viewport, parameters, ownsScope = true, nextScopeInstructions = null) {
        if (component instanceof Promise) {
            return component.then((resolvedComponent) => {
                return this.createViewportInstruction(resolvedComponent, viewport, parameters, ownsScope, nextScopeInstructions);
            });
        }
        // const instruction: ViewportInstruction = new ViewportInstruction(component, viewport, parameters, ownsScope, nextScopeInstructions);
        // instruction.setInstructionResolver(this);
        // return instruction;
        return _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_0__.ViewportInstruction.create(this, component, viewport, parameters, ownsScope, nextScopeInstructions);
    }
    parseViewportInstructions(instructions) {
        const match = /^[./]+/.exec(instructions);
        let context = '';
        if (Array.isArray(match) && match.length > 0) {
            context = match[0];
            instructions = instructions.slice(context.length);
        }
        const parsedInstructions = this.parseViewportInstructionsWorker(instructions, true).instructions;
        for (const instruction of parsedInstructions) {
            instruction.context = context;
        }
        return parsedInstructions;
    }
    parseViewportInstruction(instruction) {
        const instructions = this.parseViewportInstructions(instruction);
        if (instructions.length) {
            return instructions[0];
        }
        return this.createViewportInstruction('');
    }
    stringifyViewportInstructions(instructions, excludeViewport = false, viewportContext = false) {
        return typeof (instructions) === 'string'
            ? instructions
            : instructions
                .map(instruction => this.stringifyViewportInstruction(instruction, excludeViewport, viewportContext))
                .filter(instruction => instruction && instruction.length)
                .join(this.separators.sibling);
    }
    stringifyViewportInstruction(instruction, excludeViewport = false, viewportContext = false) {
        if (typeof instruction === 'string') {
            return this.stringifyAViewportInstruction(instruction, excludeViewport);
        }
        else {
            let excludeCurrentViewport = excludeViewport;
            let excludeCurrentComponent = false;
            if (viewportContext) {
                if (instruction.viewport && instruction.viewport.options.noLink) {
                    return '';
                }
                if (!instruction.needsViewportDescribed && instruction.viewport && !instruction.viewport.options.forceDescription) {
                    excludeCurrentViewport = true;
                }
                if (instruction.viewport && instruction.viewport.options.fallback === instruction.componentName) {
                    excludeCurrentComponent = true;
                }
                if (!instruction.needsViewportDescribed && instruction.viewportScope) {
                    excludeCurrentViewport = true;
                }
            }
            let route = instruction.route ?? null;
            const nextInstructions = instruction.nextScopeInstructions;
            let stringified = instruction.context;
            // It's a configured route
            if (route !== null) {
                // Already added as part of a configuration, skip to next scope
                if (route === '') {
                    return Array.isArray(nextInstructions)
                        ? this.stringifyViewportInstructions(nextInstructions, excludeViewport, viewportContext)
                        : '';
                }
                route = route.matching;
                stringified += route.endsWith(this.separators.scope) ? route.slice(0, -this.separators.scope.length) : route;
            }
            else {
                stringified += this.stringifyAViewportInstruction(instruction, excludeCurrentViewport, excludeCurrentComponent);
            }
            if (Array.isArray(nextInstructions) && nextInstructions.length) {
                const nextStringified = this.stringifyViewportInstructions(nextInstructions, excludeViewport, viewportContext);
                if (nextStringified.length > 0) {
                    stringified += nextInstructions.length === 1 // TODO: This should really also check that the instructions have value
                        ? `${this.separators.scope}${nextStringified}`
                        : `${this.separators.scope}${this.separators.scopeStart}${nextStringified}${this.separators.scopeEnd}`;
                }
            }
            return stringified;
        }
    }
    stringifyScopedViewportInstructions(instructions) {
        if (!Array.isArray(instructions)) {
            return this.stringifyScopedViewportInstructions([instructions]);
        }
        return instructions.map((instruction) => this.stringifyViewportInstruction(instruction)).join(this.separators.scope);
    }
    encodeViewportInstructions(instructions) {
        return encodeURIComponent(this.stringifyViewportInstructions(instructions)).replace(/\(/g, '%28').replace(/\)/g, '%29');
    }
    decodeViewportInstructions(instructions) {
        return this.parseViewportInstructions(decodeURIComponent(instructions));
    }
    buildScopedLink(scopeContext, href) {
        if (scopeContext) {
            href = `/${scopeContext}${this.separators.scope}${href}`;
        }
        return href;
    }
    shouldClearViewports(path) {
        const clearViewports = (path === this.separators.clear || path.startsWith(this.separators.clear + this.separators.add));
        const newPath = path.startsWith(this.separators.clear) ? path.slice(2) : path;
        return { clearViewports, newPath };
    }
    mergeViewportInstructions(instructions) {
        const merged = [];
        for (let instruction of instructions) {
            if (typeof instruction === 'string') {
                instruction = this.parseViewportInstruction(instruction);
            }
            const index = merged.findIndex(merge => merge.sameViewport(instruction));
            if (index >= 0) {
                merged.splice(index, 1, instruction);
            }
            else {
                merged.push(instruction);
            }
        }
        return merged;
    }
    flattenViewportInstructions(instructions) {
        const flat = [];
        for (const instruction of instructions) {
            flat.push(instruction);
            if (instruction.nextScopeInstructions) {
                flat.push(...this.flattenViewportInstructions(instruction.nextScopeInstructions));
            }
        }
        return flat;
    }
    cloneViewportInstructions(instructions, keepInstances = false, context = false) {
        const clones = [];
        for (const instruction of instructions) {
            const clone = this.createViewportInstruction(instruction.componentName, instruction.viewportName, instruction.typedParameters !== null ? instruction.typedParameters : void 0);
            if (keepInstances) {
                clone.setComponent(instruction.componentInstance ?? instruction.componentType ?? instruction.componentName);
                clone.setViewport(instruction.viewport ?? instruction.viewportName);
            }
            clone.needsViewportDescribed = instruction.needsViewportDescribed;
            clone.route = instruction.route;
            if (context) {
                clone.context = instruction.context;
            }
            clone.viewportScope = keepInstances ? instruction.viewportScope : null;
            clone.scope = keepInstances ? instruction.scope : null;
            if (instruction.nextScopeInstructions) {
                clone.nextScopeInstructions = this.cloneViewportInstructions(instruction.nextScopeInstructions, keepInstances, context);
            }
            clones.push(clone);
        }
        return clones;
    }
    // TODO: Deal with separators in data and complex types
    parseComponentParameters(parameters, uriComponent = false) {
        if (parameters === undefined || parameters === null || parameters.length === 0) {
            return [];
        }
        if (typeof parameters === 'string') {
            const list = [];
            const params = parameters.split(this.separators.parameterSeparator);
            for (const param of params) {
                let key;
                let value;
                [key, value] = param.split(this.separators.parameterKeySeparator);
                if (value === void 0) {
                    value = uriComponent ? decodeURIComponent(key) : key;
                    key = void 0;
                }
                else if (uriComponent) {
                    key = decodeURIComponent(key);
                    value = decodeURIComponent(value);
                }
                list.push({ key, value });
            }
            return list;
        }
        if (Array.isArray(parameters)) {
            return parameters.map(param => ({ key: void 0, value: param }));
        }
        const keys = Object.keys(parameters);
        keys.sort();
        return keys.map(key => ({ key, value: parameters[key] }));
    }
    // TODO: Deal with separators in data and complex types
    stringifyComponentParameters(parameters, uriComponent = false) {
        if (!Array.isArray(parameters) || parameters.length === 0) {
            return '';
        }
        const seps = this.separators;
        return parameters
            .map(param => {
            const key = param.key !== void 0 && uriComponent ? encodeURIComponent(param.key) : param.key;
            const value = uriComponent ? encodeURIComponent(param.value) : param.value;
            return key !== void 0 && key !== value ? key + seps.parameterKeySeparator + value : value;
        })
            .join(seps.parameterSeparator);
    }
    matchScope(instructions, scope) {
        const matching = [];
        matching.push(...instructions.filter(instruction => instruction.scope === scope));
        matching.push(...instructions
            .filter(instr => instr.scope !== scope)
            .map(instr => Array.isArray(instr.nextScopeInstructions) ? this.matchScope(instr.nextScopeInstructions, scope) : [])
            .flat());
        return matching;
    }
    matchChildren(instructions, active) {
        for (const instruction of instructions) {
            const matching = active.filter(instr => instr.sameComponent(instruction));
            if (matching.length === 0) {
                return false;
            }
            if (Array.isArray(instruction.nextScopeInstructions)
                && instruction.nextScopeInstructions.length > 0
                && this.matchChildren(instruction.nextScopeInstructions, matching.map(instr => Array.isArray(instr.nextScopeInstructions) ? instr.nextScopeInstructions : []).flat()) === false) {
                return false;
            }
        }
        return true;
    }
    parseViewportInstructionsWorker(instructions, grouped = false) {
        if (!instructions) {
            return { instructions: [], remaining: '' };
        }
        if (instructions.startsWith(this.separators.scopeStart)) {
            instructions = `${this.separators.scope}${instructions}`;
        }
        const viewportInstructions = [];
        let guard = 1000;
        while (instructions.length && guard) {
            guard--;
            if (instructions.startsWith(this.separators.scope)) {
                instructions = instructions.slice(this.separators.scope.length);
                const scopeStart = instructions.startsWith(this.separators.scopeStart);
                if (scopeStart) {
                    instructions = instructions.slice(this.separators.scopeStart.length);
                }
                const { instructions: found, remaining } = this.parseViewportInstructionsWorker(instructions, scopeStart);
                if (viewportInstructions.length) {
                    viewportInstructions[viewportInstructions.length - 1].nextScopeInstructions = found;
                }
                else {
                    viewportInstructions.push(...found);
                }
                instructions = remaining;
            }
            else if (instructions.startsWith(this.separators.scopeEnd)) {
                if (grouped) {
                    instructions = instructions.slice(this.separators.scopeEnd.length);
                }
                return { instructions: viewportInstructions, remaining: instructions };
            }
            else if (instructions.startsWith(this.separators.sibling) && !this.isAddViewportInstruction(instructions)) {
                if (!grouped) {
                    return { instructions: viewportInstructions, remaining: instructions };
                }
                instructions = instructions.slice(this.separators.sibling.length);
            }
            else {
                const { instruction: viewportInstruction, remaining } = this.parseAViewportInstruction(instructions);
                viewportInstructions.push(viewportInstruction);
                instructions = remaining;
            }
        }
        return { instructions: viewportInstructions, remaining: instructions };
    }
    findNextToken(instruction, tokens) {
        const matches = {};
        // Tokens can have length > 1
        for (const token of tokens) {
            const tokenPos = instruction.indexOf(token);
            if (tokenPos > -1) {
                matches[token] = instruction.indexOf(token);
            }
        }
        const pos = Math.min(...Object.values(matches));
        for (const token in matches) {
            if (matches[token] === pos) {
                return { token, pos };
            }
        }
        return { token: '', pos: -1 };
    }
    parseAViewportInstruction(instruction) {
        const seps = this.separators;
        const tokens = [seps.parameters, seps.viewport, seps.noScope, seps.scopeEnd, seps.scope, seps.sibling];
        let component = void 0;
        let parametersString = void 0;
        let viewport = void 0;
        let scope = true;
        let token;
        let pos;
        const specials = [seps.add, seps.clear];
        for (const special of specials) {
            if (instruction === special) {
                component = instruction;
                instruction = '';
                tokens.shift(); // parameters
                tokens.shift(); // viewport
                token = seps.viewport;
                break;
            }
        }
        if (component === void 0) {
            for (const special of specials) {
                if (instruction.startsWith(`${special}${seps.viewport}`)) {
                    component = special;
                    instruction = instruction.slice(`${special}${seps.viewport}`.length);
                    tokens.shift(); // parameters
                    tokens.shift(); // viewport
                    token = seps.viewport;
                    break;
                }
            }
        }
        if (component === void 0) {
            ({ token, pos } = this.findNextToken(instruction, tokens));
            component = pos !== -1 ? instruction.slice(0, pos) : instruction;
            instruction = pos !== -1 ? instruction.slice(pos + token.length) : '';
            tokens.shift(); // parameters
            if (token === seps.parameters) {
                ({ token, pos } = this.findNextToken(instruction, [seps.parametersEnd]));
                parametersString = instruction.slice(0, pos);
                instruction = instruction.slice(pos + token.length);
                ({ token } = this.findNextToken(instruction, tokens));
                instruction = instruction.slice(token.length);
            }
            tokens.shift(); // viewport
        }
        if (token === seps.viewport) {
            ({ token, pos } = this.findNextToken(instruction, tokens));
            viewport = pos !== -1 ? instruction.slice(0, pos) : instruction;
            instruction = pos !== -1 ? instruction.slice(pos + token.length) : '';
        }
        tokens.shift(); // noScope
        if (token === seps.noScope) {
            scope = false;
        }
        // Restore token that belongs to next instruction
        if (token === seps.scopeEnd || token === seps.scope || token === seps.sibling) {
            instruction = `${token}${instruction}`;
        }
        const viewportInstruction = this.createViewportInstruction(component, viewport, parametersString, scope);
        return { instruction: viewportInstruction, remaining: instruction };
    }
    stringifyAViewportInstruction(instruction, excludeViewport = false, excludeComponent = false) {
        if (typeof instruction === 'string') {
            return this.stringifyViewportInstruction(this.parseViewportInstruction(instruction), excludeViewport, excludeComponent);
        }
        else {
            let instructionString = !excludeComponent ? instruction.componentName : '';
            const specification = instruction.componentType ? instruction.componentType.parameters : null;
            const parameters = this.stringifyComponentParameters(instruction.toSortedParameters(specification));
            if (parameters.length > 0) {
                instructionString += !excludeComponent
                    ? `${this.separators.parameters}${parameters}${this.separators.parametersEnd}`
                    : parameters;
            }
            if (instruction.viewportName !== null && !excludeViewport) {
                instructionString += this.separators.viewport + instruction.viewportName;
            }
            if (!instruction.ownsScope) {
                instructionString += this.separators.noScope;
            }
            return instructionString || '';
        }
    }
}
//# sourceMappingURL=instruction-resolver.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/interfaces.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/interfaces.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReentryBehavior": () => /* binding */ ReentryBehavior
/* harmony export */ });
var ReentryBehavior;
(function (ReentryBehavior) {
    ReentryBehavior["default"] = "default";
    ReentryBehavior["disallow"] = "disallow";
    ReentryBehavior["load"] = "load";
    ReentryBehavior["refresh"] = "refresh";
})(ReentryBehavior || (ReentryBehavior = {}));
//# sourceMappingURL=interfaces.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/lifecycle-logger.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/lifecycle-logger.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lifecycleLogger": () => /* binding */ lifecycleLogger,
/* harmony export */   "LifecycleClass": () => /* binding */ LifecycleClass
/* harmony export */ });
/**
 * @internal - Will be removed
 */
function lifecycleLogger(name) {
    const lifecycles = [
        'canUnload', 'unload',
        'canLoad', 'load',
        'created',
        'binding', 'bound',
        'beforeAttach', 'attaching',
        'detaching',
        'unbinding',
    ];
    return function (target) {
        for (const lifecycle of lifecycles) {
            const existing = target.prototype[lifecycle];
            if (existing !== void 0) {
                target.prototype[lifecycle] = function (...args) {
                    console.log(`${name} ${lifecycle}`, args);
                    return existing.apply(target, args);
                };
            }
            else {
                target.prototype[lifecycle] = function (...args) {
                    console.log(`${name} ${lifecycle}`, args);
                    if (lifecycle.startsWith('can')) {
                        return true;
                    }
                };
            }
        }
    };
}
class LifecycleClass {
    canLoad() { console.log(`name canLoad`); return true; }
    load(params) { console.log(`name load`); }
    created() { console.log(`name created`); }
    binding() { console.log(`name binding`); }
    bound() { console.log(`name bound`); }
    beforeAttach() { console.log(`name beforeAttach`); }
    attaching() { console.log(`name attaching`); }
    canUnload() { console.log(`name canUnload`); return true; }
    unload() { console.log(`name unload`); }
    detaching() { console.log(`name detaching`); }
    unbinding() { console.log(`name unbinding`); }
}
//# sourceMappingURL=lifecycle-logger.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/link-handler.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/link-handler.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LinkHandler": () => /* binding */ LinkHandler
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};

/**
 * Class responsible for handling interactions that should trigger navigation.
 *
 * @ internal - Shouldn't be used directly.
 * TODO: remove the space between @ and i again at some point (this stripInternal currently screws up the types in the __tests__ package for some reason)
 */
let LinkHandler = class LinkHandler {
    constructor(p) {
        this.options = {
            useHref: true,
            callback: () => { return; }
        };
        this.isActive = false;
        this.handler = (e) => {
            const info = LinkHandler.getEventInfo(e, this.window, this.options);
            if (info.shouldHandleEvent) {
                e.preventDefault();
                this.options.callback(info);
            }
        };
        this.window = p.window;
        this.document = p.document;
    }
    /**
     * Gets the href and a "should handle" recommendation, given an Event.
     *
     * @param event - The Event to inspect for target anchor and href.
     */
    static getEventInfo(event, win, options) {
        const info = {
            shouldHandleEvent: false,
            instruction: null,
            anchor: null
        };
        const target = info.anchor = event.currentTarget;
        // Switch to this for delegation:
        // const target = info.anchor = LinkHandler.closestAnchor(event.target as Element);
        if (!target || !LinkHandler.targetIsThisWindow(target, win)) {
            return info;
        }
        if (target.hasAttribute('external')) {
            return info;
        }
        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
            return info;
        }
        const gotoAttr = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomAttribute.for(target, 'goto');
        const goto = gotoAttr !== void 0 ? gotoAttr.viewModel.value : null;
        const loadAttr = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomAttribute.for(target, 'load');
        const load = loadAttr !== void 0 ? loadAttr.viewModel.value : null;
        const href = options.useHref && target.hasAttribute('href') ? target.getAttribute('href') : null;
        if ((goto === null || goto.length === 0) && (load === null || load.length === 0) && (href === null || href.length === 0)) {
            return info;
        }
        info.anchor = target;
        info.instruction = load ?? goto ?? href;
        const leftButtonClicked = event.button === 0;
        info.shouldHandleEvent = leftButtonClicked;
        return info;
    }
    /**
     * Finds the closest ancestor that's an anchor element.
     *
     * @param el - The element to search upward from.
     * @returns The link element that is the closest ancestor.
     */
    // private static closestAnchor(el: Element): Element | null {
    //   while (el !== null && el !== void 0) {
    //     if (el.tagName === 'A') {
    //       return el;
    //     }
    //     el = el.parentNode as Element;
    //   }
    //   return null;
    // }
    /**
     * Gets a value indicating whether or not an anchor targets the current window.
     *
     * @param target - The anchor element whose target should be inspected.
     * @returns True if the target of the link element is this window; false otherwise.
     */
    static targetIsThisWindow(target, win) {
        const targetWindow = target.getAttribute('target');
        return !targetWindow ||
            targetWindow === win.name ||
            targetWindow === '_self';
    }
    /**
     * Start the instance.
     *
     */
    start(options) {
        if (this.isActive) {
            throw new Error('Link handler has already been started');
        }
        this.isActive = true;
        this.options = { ...options };
    }
    /**
     * Stop the instance. Event handlers and other resources should be cleaned up here.
     */
    stop() {
        if (!this.isActive) {
            throw new Error('Link handler has not been started');
        }
        this.isActive = false;
    }
};
LinkHandler = __decorate([
    __param(0, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.IPlatform)
], LinkHandler);

//# sourceMappingURL=link-handler.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/nav-route.js":
/*!************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/nav-route.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NavRoute": () => /* binding */ NavRoute
/* harmony export */ });
/* harmony import */ var _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type-resolvers.js */ "./node_modules/@aurelia/router/dist/esm/type-resolvers.js");

/**
 * @internal - Used by au-nav
 */
class NavRoute {
    constructor(nav, route) {
        this.nav = nav;
        this.instructions = [];
        this.link = null;
        this.linkVisible = null;
        this.linkActive = null;
        this.compareParameters = false;
        this.children = null;
        this.visible = true;
        this.active = '';
        this.title = route.title;
        this.meta = route.meta;
        if (route.route) {
            this.instructions = this.parseRoute(route.route);
            this.link = this.computeLink(this.instructions);
        }
        this.linkActive = route.consideredActive !== null && route.consideredActive !== void 0 ? route.consideredActive : this.link;
        if (this.linkActive !== null && (!(this.linkActive instanceof Function) || _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__.ComponentAppellationResolver.isType(this.linkActive))) {
            this.linkActive = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__.NavigationInstructionResolver.toViewportInstructions(this.nav.router, this.linkActive);
        }
        this.execute = route.execute;
        this.compareParameters = !!route.compareParameters;
        this.linkVisible = route.condition === undefined ? true : route.condition;
        this.update();
    }
    get hasChildren() {
        return (this.children && this.children.length ? 'nav-has-children' : '');
    }
    update() {
        this.visible = this.computeVisible();
        if ((this.link && this.link.length) || this.execute) {
            this.active = this.computeActive();
        }
        else {
            this.active = (this.active === 'nav-active' ? 'nav-active' : (this.activeChild() ? 'nav-active-child' : ''));
        }
    }
    executeAction(event) {
        if (this.execute) {
            this.execute(this);
        }
        event.stopPropagation();
    }
    toggleActive() {
        this.active = (this.active.startsWith('nav-active') ? '' : 'nav-active');
    }
    parseRoute(routes) {
        return _type_resolvers_js__WEBPACK_IMPORTED_MODULE_0__.NavigationInstructionResolver.toViewportInstructions(this.nav.router, routes);
    }
    computeVisible() {
        if (this.linkVisible instanceof Function) {
            return this.linkVisible(this);
        }
        return !!this.linkVisible;
    }
    computeActive() {
        if (!Array.isArray(this.linkActive)) {
            return this.linkActive(this) ? 'nav-active' : '';
        }
        const components = this.linkActive;
        const activeComponents = this.nav.router.instructionResolver.flattenViewportInstructions(this.nav.router.activeComponents);
        for (const component of components) {
            if (activeComponents.every((active) => !active.sameComponent(component, this.compareParameters && component.typedParameters !== null))) {
                return '';
            }
        }
        return 'nav-active';
    }
    computeLink(instructions) {
        return this.nav.router.instructionResolver.stringifyViewportInstructions(instructions);
    }
    activeChild() {
        if (this.children) {
            for (const child of this.children) {
                if (child.active.startsWith('nav-active') || child.activeChild()) {
                    return true;
                }
            }
        }
        return false;
    }
}
//# sourceMappingURL=nav-route.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/nav.js":
/*!******************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/nav.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Nav": () => /* binding */ Nav
/* harmony export */ });
/* harmony import */ var _nav_route_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nav-route.js */ "./node_modules/@aurelia/router/dist/esm/nav-route.js");

/**
 * Public API - Used by au-nav and Router add/setNav
 */
class Nav {
    constructor(router, name, routes = [], classes = {}) {
        this.router = router;
        this.name = name;
        this.routes = routes;
        this.classes = classes;
        this.update();
    }
    addRoutes(routes) {
        for (const route of routes) {
            this.addRoute(this.routes, route);
        }
        this.update();
    }
    update() {
        this.updateRoutes(this.routes);
        this.routes = this.routes.slice();
    }
    addRoute(routes, route) {
        const newRoute = new _nav_route_js__WEBPACK_IMPORTED_MODULE_0__.NavRoute(this, route);
        routes.push(newRoute);
        if (route.children) {
            newRoute.children = [];
            for (const child of route.children) {
                this.addRoute(newRoute.children, child);
            }
        }
    }
    updateRoutes(routes) {
        for (const route of routes) {
            route.update();
            if (route.children && route.children.length) {
                this.updateRoutes(route.children);
            }
        }
    }
}
//# sourceMappingURL=nav.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/navigation-coordinator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/navigation-coordinator.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NavigationCoordinatorOptions": () => /* binding */ NavigationCoordinatorOptions,
/* harmony export */   "NavigationCoordinator": () => /* binding */ NavigationCoordinator
/* harmony export */ });
/* harmony import */ var _state_coordinator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state-coordinator.js */ "./node_modules/@aurelia/router/dist/esm/state-coordinator.js");

class NavigationCoordinatorOptions {
    constructor(input) {
        // console.log('NavigationCoordinatorOptions constructor', input);
        this.syncStates = input.syncStates ?? [];
    }
}
class NavigationCoordinator extends _state_coordinator_js__WEBPACK_IMPORTED_MODULE_0__.StateCoordinator {
    constructor() {
        super(...arguments);
        this.running = false;
    }
    static create(router, navigation, options) {
        const coordinator = new NavigationCoordinator();
        coordinator.router = router;
        coordinator.navigation = navigation;
        // TODO: Set flow options from router
        options.syncStates.forEach((state) => coordinator.addSyncState(state));
        // console.log('NavigationCoordinator created', coordinator);
        return coordinator;
    }
    // public get isRestrictedNavigation(): boolean {
    //   return this.syncStates.has('guardedLoad') ||
    //     this.syncStates.has('unloaded') ||
    //     this.syncStates.has('loaded') ||
    //     this.syncStates.has('guarded') ||
    //     this.syncStates.has('routed');
    // }
    run() {
        if (!this.running) {
            // console.log('NavigationCoordinator RUN' /*, { ...this } */);
            this.running = true;
            for (const entity of this.entities) {
                if (!entity.running) {
                    entity.running = true;
                    entity.entity.transition(this);
                }
            }
        }
    }
    addEntity(entity) {
        const ent = super.addEntity(entity);
        if (this.running) {
            ent.entity.transition(this);
        }
        return ent;
    }
    finalize() {
        this.entities.forEach(entity => entity.entity.finalizeContentChange());
    }
    cancel() {
        // TODO: Take care of disabling viewports when cancelling and stateful!
        this.entities.forEach(entity => {
            const abort = entity.entity.abortContentChange();
            if (abort instanceof Promise) {
                abort.catch(error => { throw error; });
            }
        });
        this.router.navigator.cancel(this.navigation).then(() => {
            this.router.processingNavigation = null;
            this.navigation.resolve();
        }).catch(error => { throw error; });
    }
    // A new navigation should cancel replaced instructions
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    cancelReplaced(navigation) { }
}
//# sourceMappingURL=navigation-coordinator.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/navigation.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/navigation.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Navigation": () => /* binding */ Navigation
/* harmony export */ });
class Navigation {
    constructor(entry = {
        instruction: '',
        fullStateInstruction: '',
    }) {
        this.navigation = entry.navigation ?? {
            first: false,
            new: false,
            refresh: false,
            forward: false,
            back: false,
            replace: false,
        };
        this.repeating = entry.repeating;
        // INavigatorEntry
        this.fromBrowser = entry.fromBrowser;
        this.origin = entry.origin;
        this.replacing = entry.replacing;
        this.refreshing = entry.refreshing;
        this.untracked = entry.untracked;
        this.historyMovement = entry.historyMovement;
        this.resolve = entry.resolve;
        this.reject = entry.reject;
        // IStoredNavigatorEntry
        this.instruction = entry.instruction;
        this.fullStateInstruction = entry.fullStateInstruction;
        this.scope = entry.scope;
        this.index = entry.index;
        this.firstEntry = entry.firstEntry;
        this.route = entry.route;
        this.path = entry.path;
        this.title = entry.title;
        this.query = entry.query;
        this.parameters = entry.parameters;
        this.data = entry.data;
    }
    get useFullStateInstruction() {
        return (this.navigation.back ?? false) || (this.navigation.forward ?? false);
    }
    toStored() {
        return {
            navigation: this.navigation,
            repeating: this.repeating,
            // IStoredNavigatorEntry
            instruction: this.instruction,
            fullStateInstruction: this.fullStateInstruction,
            scope: this.scope,
            index: this.index,
            firstEntry: this.firstEntry,
            route: this.route,
            path: this.path,
            title: this.title,
            query: this.query,
            parameters: this.parameters,
            data: this.data,
        };
    }
}
//# sourceMappingURL=navigation.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/navigator.js":
/*!************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/navigator.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Navigator": () => /* binding */ Navigator
/* harmony export */ });
/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queue.js */ "./node_modules/@aurelia/router/dist/esm/queue.js");
/* harmony import */ var _navigation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./navigation.js */ "./node_modules/@aurelia/router/dist/esm/navigation.js");
/* harmony import */ var _runner_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./runner.js */ "./node_modules/@aurelia/router/dist/esm/runner.js");



/**
 * @internal - Shouldn't be used directly
 */
class Navigator {
    constructor() {
        this.entries = [];
        this.options = {
            statefulHistoryLength: 0,
        };
        this.isActive = false;
        this.processNavigations = (qEntry) => {
            const entry = qEntry;
            const navigationFlags = {
                first: false,
                new: false,
                refresh: false,
                forward: false,
                back: false,
                replace: false,
            };
            if (this.currentEntry === this.uninitializedEntry) { // Refresh or first entry
                this.loadState();
                if (this.currentEntry !== this.uninitializedEntry) {
                    navigationFlags.refresh = true;
                }
                else {
                    navigationFlags.first = true;
                    navigationFlags.new = true;
                    // TODO: Should this really be created here? Shouldn't it be in the viewer?
                    this.currentEntry = new _navigation_js__WEBPACK_IMPORTED_MODULE_1__.Navigation({
                        index: 0,
                        instruction: '',
                        fullStateInstruction: '',
                    });
                    this.entries = [];
                }
            }
            if (entry.index !== void 0 && !entry.replacing && !entry.refreshing) { // History navigation
                entry.historyMovement = entry.index - (this.currentEntry.index !== void 0 ? this.currentEntry.index : 0);
                entry.instruction = this.entries[entry.index] !== void 0 && this.entries[entry.index] !== null ? this.entries[entry.index].fullStateInstruction : entry.fullStateInstruction;
                entry.replacing = true;
                if (entry.historyMovement > 0) {
                    navigationFlags.forward = true;
                }
                else if (entry.historyMovement < 0) {
                    navigationFlags.back = true;
                }
            }
            else if (entry.refreshing || navigationFlags.refresh) { // Refreshing
                entry.index = this.currentEntry.index;
            }
            else if (entry.replacing) { // Replacing
                navigationFlags.replace = true;
                navigationFlags.new = true;
                entry.index = this.currentEntry.index;
            }
            else { // New entry
                navigationFlags.new = true;
                entry.index = this.currentEntry.index !== void 0 ? this.currentEntry.index + 1 : this.entries.length;
            }
            this.invokeCallback(entry, navigationFlags, this.currentEntry);
        };
        this.uninitializedEntry = new _navigation_js__WEBPACK_IMPORTED_MODULE_1__.Navigation({
            instruction: 'NAVIGATOR UNINITIALIZED',
            fullStateInstruction: '',
        });
        this.currentEntry = this.uninitializedEntry;
        this.pendingNavigations = new _queue_js__WEBPACK_IMPORTED_MODULE_0__.Queue(this.processNavigations);
    }
    get queued() {
        return this.pendingNavigations.length;
    }
    start(router, options) {
        if (this.isActive) {
            throw new Error('Navigator has already been started');
        }
        this.isActive = true;
        this.router = router;
        this.options = { ...options };
    }
    stop() {
        if (!this.isActive) {
            throw new Error('Navigator has not been started');
        }
        this.pendingNavigations.clear();
        this.isActive = false;
    }
    async navigate(entry) {
        return this.pendingNavigations.enqueue(entry);
    }
    async refresh() {
        const entry = this.currentEntry;
        if (entry === this.uninitializedEntry) {
            return Promise.reject();
        }
        entry.replacing = true;
        entry.refreshing = true;
        return this.navigate(entry);
    }
    async go(movement) {
        const newIndex = (this.currentEntry.index !== undefined ? this.currentEntry.index : 0) + movement;
        if (newIndex >= this.entries.length) {
            return Promise.reject();
        }
        const entry = this.entries[newIndex];
        return this.navigate(entry);
    }
    async setEntryTitle(title) {
        this.currentEntry.title = title;
        return this.saveState();
    }
    get titles() {
        if (this.currentEntry === this.uninitializedEntry) {
            return [];
        }
        const index = this.currentEntry.index !== void 0 ? this.currentEntry.index : 0;
        return this.entries.slice(0, index + 1).filter((value) => !!value.title).map((value) => value.title ? value.title : '');
    }
    // Get the stored navigator state (json okay)
    getState() {
        const state = this.options.store ? { ...this.options.store.state } : {};
        const entries = (state.entries ?? []);
        const currentEntry = (state.currentEntry ?? null);
        return { state, entries, currentEntry };
    }
    // Load a stored state into Navigation entries
    loadState() {
        const state = this.getState();
        this.entries = state.entries.map(entry => new _navigation_js__WEBPACK_IMPORTED_MODULE_1__.Navigation(entry));
        this.currentEntry = state.currentEntry !== null
            ? new _navigation_js__WEBPACK_IMPORTED_MODULE_1__.Navigation(state.currentEntry)
            : this.uninitializedEntry;
    }
    // Save storeable versions of Navigation entries
    async saveState(push = false) {
        if (this.currentEntry === this.uninitializedEntry) {
            return Promise.resolve();
        }
        const storedEntry = this.currentEntry.toStored();
        this.entries[storedEntry.index !== void 0 ? storedEntry.index : 0] = new _navigation_js__WEBPACK_IMPORTED_MODULE_1__.Navigation(storedEntry);
        // If preserving history, serialize entries that aren't preserved
        if (this.options.statefulHistoryLength > 0) {
            const index = this.entries.length - this.options.statefulHistoryLength;
            for (let i = 0; i < index; i++) {
                const entry = this.entries[i];
                if (typeof entry.instruction !== 'string' || typeof entry.fullStateInstruction !== 'string') {
                    await this.serializeEntry(entry, this.entries.slice(index));
                }
            }
        }
        if (!this.options.store) {
            return Promise.resolve();
        }
        const state = {
            entries: (this.entries ?? []).map((entry) => this.toStoreableEntry(entry)),
            currentEntry: this.toStoreableEntry(storedEntry),
        };
        // for (const entry of this.entries) {
        //   state.entries.push(this.toStoreableEntry(entry));
        // }
        if (state.currentEntry.title !== void 0) {
            this.options.store.setTitle(state.currentEntry.title);
        }
        if (push) {
            return this.options.store.pushNavigatorState(state);
        }
        else {
            return this.options.store.replaceNavigatorState(state);
        }
    }
    toStoredEntry(entry) {
        const { previous, fromBrowser, origin, replacing, refreshing, untracked, historyMovement, navigation, scope, resolve, reject, ...storableEntry } = entry;
        return storableEntry;
    }
    async finalize(instruction) {
        this.currentEntry = instruction;
        let index = this.currentEntry.index !== undefined ? this.currentEntry.index : 0;
        if (this.currentEntry.untracked) {
            if (instruction.fromBrowser && this.options.store) {
                await this.options.store.popNavigatorState();
            }
            index--;
            this.currentEntry.index = index;
            this.entries[index] = this.currentEntry;
            await this.saveState();
        }
        else if (this.currentEntry.replacing) {
            this.entries[index] = this.currentEntry;
            await this.saveState();
        }
        else { // New entry (add and discard later entries)
            if (this.options.serializeCallback !== void 0 && this.options.statefulHistoryLength > 0) {
                // Need to clear the instructions we discard!
                const indexPreserve = this.entries.length - this.options.statefulHistoryLength;
                for (const entry of this.entries.slice(index)) {
                    if (typeof entry.instruction !== 'string' || typeof entry.fullStateInstruction !== 'string') {
                        await this.options.serializeCallback(entry, this.entries.slice(indexPreserve, index));
                    }
                }
            }
            this.entries = this.entries.slice(0, index);
            this.entries.push(this.currentEntry);
            await this.saveState(true);
        }
        if (this.currentEntry.resolve) {
            this.currentEntry.resolve();
        }
    }
    async cancel(instruction) {
        if (instruction.fromBrowser && this.options.store) {
            if (instruction.navigation && instruction.navigation.new) {
                await this.options.store.popNavigatorState();
            }
            else {
                await this.options.store.go(-(instruction.historyMovement || 0), true);
            }
        }
        if (this.currentEntry.resolve) {
            this.currentEntry.resolve();
        }
    }
    invokeCallback(entry, navigationFlags, previousEntry) {
        const instruction = new _navigation_js__WEBPACK_IMPORTED_MODULE_1__.Navigation({ ...entry });
        instruction.navigation = navigationFlags;
        instruction.previous = previousEntry;
        if (this.options.callback) {
            this.options.callback(instruction);
        }
    }
    toStoreableEntry(entry) {
        const storeable = entry instanceof _navigation_js__WEBPACK_IMPORTED_MODULE_1__.Navigation ? entry.toStored() : entry;
        storeable.instruction = this.router.instructionResolver.stringifyViewportInstructions(storeable.instruction);
        storeable.fullStateInstruction = this.router.instructionResolver.stringifyViewportInstructions(storeable.fullStateInstruction);
        if (typeof storeable.scope !== 'string') {
            storeable.scope = null;
        }
        return storeable;
    }
    async serializeEntry(entry, preservedEntries) {
        const instructionResolver = this.router.instructionResolver;
        let excludeComponents = [];
        // Components in preserved entries should not be serialized/freed
        for (const preservedEntry of preservedEntries) {
            if (typeof preservedEntry.instruction !== 'string') {
                excludeComponents.push(...instructionResolver.flattenViewportInstructions(preservedEntry.instruction)
                    .filter(instruction => instruction.viewport !== null)
                    .map(instruction => instruction.componentInstance));
            }
            if (typeof preservedEntry.fullStateInstruction !== 'string') {
                excludeComponents.push(...instructionResolver.flattenViewportInstructions(preservedEntry.fullStateInstruction)
                    .filter(instruction => instruction.viewport !== null)
                    .map(instruction => instruction.componentInstance));
            }
        }
        // Make unique
        excludeComponents = excludeComponents.filter((component, i, arr) => component !== null && arr.indexOf(component) === i);
        let instructions = [];
        // The instructions, one or two, with possible components to free
        if (typeof entry.fullStateInstruction !== 'string') {
            instructions.push(...entry.fullStateInstruction);
            entry.fullStateInstruction = instructionResolver.stringifyViewportInstructions(entry.fullStateInstruction);
        }
        if (typeof entry.instruction !== 'string') {
            instructions.push(...entry.instruction);
            entry.instruction = instructionResolver.stringifyViewportInstructions(entry.instruction);
        }
        // Process only those with instances and make unique
        instructions = instructions.filter((instruction, i, arr) => instruction !== null
            && instruction.componentInstance !== null
            && arr.indexOf(instruction) === i);
        // Already freed components (updated when component is freed)
        const alreadyDone = [];
        for (const instruction of instructions) {
            await this.freeInstructionComponents(instruction, excludeComponents, alreadyDone);
        }
    }
    freeInstructionComponents(instruction, excludeComponents, alreadyDone) {
        const component = instruction.componentInstance;
        const viewport = instruction.viewport;
        if (component === null || viewport === null || alreadyDone.some(done => done === component)) {
            return;
        }
        if (!excludeComponents.some(exclude => exclude === component)) {
            return _runner_js__WEBPACK_IMPORTED_MODULE_2__.Runner.run(() => viewport.freeContent(component), () => {
                alreadyDone.push(component);
            });
        }
        if (instruction.nextScopeInstructions !== null) {
            for (const nextInstruction of instruction.nextScopeInstructions) {
                return _runner_js__WEBPACK_IMPORTED_MODULE_2__.Runner.run(() => this.freeInstructionComponents(nextInstruction, excludeComponents, alreadyDone));
            }
        }
    }
}
//# sourceMappingURL=navigator.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/open-promise.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/open-promise.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OpenPromise": () => /* binding */ OpenPromise
/* harmony export */ });
class OpenPromise {
    constructor() {
        this.isPending = true;
        this.promise = new Promise((res, rej) => {
            this.res = res;
            this.rej = rej;
        });
    }
    resolve(value) {
        this.res(value);
        this.isPending = false;
    }
    reject(value) {
        this.rej(value);
        this.isPending = false;
    }
}
//# sourceMappingURL=open-promise.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/parser.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/parser.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseQuery": () => /* binding */ parseQuery
/* harmony export */ });
/**
 * @internal - Shouldn't be used directly
 */
function parseQuery(query) {
    if (!query || !query.length) {
        return {};
    }
    const parameters = {};
    // TODO: Deal with complex parameters such as lists and objects
    const params = query.replace('+', ' ').split('&');
    for (const param of params) {
        const [key, value] = param.split('=');
        parameters[decodeURIComponent(key)] = decodeURIComponent(value !== void 0 ? value : key);
    }
    return parameters;
}
//# sourceMappingURL=parser.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/queue.js":
/*!********************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/queue.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Queue": () => /* binding */ Queue
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

/**
 * A first-in-first-out queue that only processes the next queued item
 * when the current one has been resolved or rejected. Sends queued items
 * one at a time to a specified callback function. The callback function
 * should resolve or reject the queued item when processing is done.
 * Enqueued items can be awaited. Enqueued items can specify an (arbitrary)
 * execution cost and the queue can be set up (started) to only process
 * a specific amount of execution cost per RAF/tick.
 *
 * @internal - Shouldn't be used directly.
 */
class Queue {
    constructor(callback) {
        this.callback = callback;
        this.pending = [];
        this.processing = null;
        this.allowedExecutionCostWithinTick = null;
        this.currentExecutionCostInCurrentTick = 0;
        this.platform = null;
        this.task = null;
    }
    get isActive() {
        return this.task !== null;
    }
    get length() {
        return this.pending.length;
    }
    start(options) {
        if (this.isActive) {
            throw new Error('Queue has already been started');
        }
        this.platform = options.platform;
        this.allowedExecutionCostWithinTick = options.allowedExecutionCostWithinTick;
        this.task = this.platform.domWriteQueue.queueTask(this.dequeue, { persistent: true });
    }
    stop() {
        if (!this.isActive) {
            throw new Error('Queue has not been started');
        }
        this.task.cancel();
        this.task = null;
        this.allowedExecutionCostWithinTick = null;
        this.clear();
    }
    enqueue(itemOrItems, costOrCosts) {
        const list = Array.isArray(itemOrItems);
        const items = list ? itemOrItems : [itemOrItems];
        const costs = items
            .map((value, index) => !Array.isArray(costOrCosts) ? costOrCosts : costOrCosts[index])
            .map(value => value !== undefined ? value : 1);
        const promises = [];
        for (const item of items) {
            const qItem = { ...item };
            qItem.cost = costs.shift();
            promises.push(new Promise((resolve, reject) => {
                qItem.resolve = () => {
                    resolve();
                    this.processing = null;
                    this.dequeue();
                };
                qItem.reject = (reason) => {
                    reject(reason);
                    this.processing = null;
                    this.dequeue();
                };
            }));
            this.pending.push(qItem);
        }
        this.dequeue();
        return list ? promises : promises[0];
    }
    dequeue(delta) {
        if (this.processing !== null) {
            return;
        }
        if (delta !== undefined) {
            this.currentExecutionCostInCurrentTick = 0;
        }
        if (!this.pending.length) {
            return;
        }
        if (this.allowedExecutionCostWithinTick !== null && delta === undefined && this.currentExecutionCostInCurrentTick + (this.pending[0].cost || 0) > this.allowedExecutionCostWithinTick) {
            return;
        }
        this.processing = this.pending.shift() || null;
        if (this.processing) {
            this.currentExecutionCostInCurrentTick += this.processing.cost || 0;
            this.callback(this.processing);
        }
    }
    clear() {
        this.pending.splice(0, this.pending.length);
    }
}
__decorate([
    _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.bound
], Queue.prototype, "dequeue", null);
//# sourceMappingURL=queue.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/resources/goto.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/resources/goto.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GotoCustomAttribute": () => /* binding */ GotoCustomAttribute
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../router.js */ "./node_modules/@aurelia/router/dist/esm/router.js");
/* harmony import */ var _type_resolvers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../type-resolvers.js */ "./node_modules/@aurelia/router/dist/esm/type-resolvers.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils.js */ "./node_modules/@aurelia/router/dist/esm/utils.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};




let GotoCustomAttribute = class GotoCustomAttribute {
    constructor(element, router) {
        this.element = element;
        this.router = router;
        this.hasHref = null;
        this.activeClass = 'goto-active';
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.deprecationWarning)('"goto" custom attribute', '"load" custom attribute');
    }
    binding() {
        this.element.addEventListener('click', this.router.linkHandler.handler);
        this.updateValue();
        const observerLocator = this.router.container.get(_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.IObserverLocator);
        this.observer = observerLocator.getObserver(this.router, 'activeComponents');
        this.observer.subscribe(this);
    }
    unbinding() {
        this.element.removeEventListener('click', this.router.linkHandler.handler);
        this.observer.unsubscribe(this);
    }
    valueChanged(newValue) {
        this.updateValue();
    }
    updateValue() {
        if (this.hasHref === null) {
            this.hasHref = this.element.hasAttribute('href');
        }
        if (!this.hasHref) {
            // TODO: Figure out a better value here for non-strings (using InstructionResolver?)
            const value = typeof this.value === 'string' ? this.value : JSON.stringify(this.value);
            this.element.setAttribute('href', value);
        }
    }
    handleChange() {
        const controller = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomAttribute.for(this.element, 'goto').parent;
        const created = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_2__.NavigationInstructionResolver.createViewportInstructions(this.router, this.value, { context: controller });
        const instructions = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_2__.NavigationInstructionResolver.toViewportInstructions(this.router, created.instructions);
        for (const instruction of instructions) {
            if (instruction.scope === null) {
                instruction.scope = created.scope;
            }
        }
        // TODO: Use router configuration for class name and update target
        if (this.router.checkActive(instructions)) {
            this.element.classList.add(this.activeClass);
        }
        else {
            this.element.classList.remove(this.activeClass);
        }
    }
};
__decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable)({ mode: _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.BindingMode.toView })
], GotoCustomAttribute.prototype, "value", void 0);
GotoCustomAttribute = __decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.customAttribute)('goto'),
    __param(0, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.INode),
    __param(1, _router_js__WEBPACK_IMPORTED_MODULE_1__.IRouter)
], GotoCustomAttribute);

//# sourceMappingURL=goto.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/resources/href.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/resources/href.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HrefCustomAttribute": () => /* binding */ HrefCustomAttribute
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../router.js */ "./node_modules/@aurelia/router/dist/esm/router.js");
/* harmony import */ var _configuration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../configuration.js */ "./node_modules/@aurelia/router/dist/esm/configuration.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};



let HrefCustomAttribute = class HrefCustomAttribute {
    constructor(element, router) {
        this.element = element;
        this.router = router;
    }
    binding() {
        if (this.router.options.useHref && !this.hasGoto()) {
            this.element.addEventListener('click', this.router.linkHandler.handler);
        }
        this.updateValue();
    }
    unbinding() {
        this.element.removeEventListener('click', this.router.linkHandler.handler);
    }
    valueChanged() {
        this.updateValue();
    }
    updateValue() {
        this.element.setAttribute('href', this.value);
    }
    hasGoto() {
        const parent = this.$controller.parent;
        const siblings = parent.children;
        return siblings !== null
            && siblings.some(c => c.vmKind === 1 /* customAttribute */ && c.viewModel instanceof _configuration_js__WEBPACK_IMPORTED_MODULE_2__.GotoCustomAttribute);
    }
};
__decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable)({ mode: _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.BindingMode.toView })
], HrefCustomAttribute.prototype, "value", void 0);
HrefCustomAttribute = __decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.customAttribute)({
        name: 'href',
        noMultiBindings: true
    }),
    __param(0, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.INode),
    __param(1, _router_js__WEBPACK_IMPORTED_MODULE_1__.IRouter)
], HrefCustomAttribute);

//# sourceMappingURL=href.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/resources/load.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/resources/load.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LoadCustomAttribute": () => /* binding */ LoadCustomAttribute
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../router.js */ "./node_modules/@aurelia/router/dist/esm/router.js");
/* harmony import */ var _type_resolvers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../type-resolvers.js */ "./node_modules/@aurelia/router/dist/esm/type-resolvers.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};



let LoadCustomAttribute = class LoadCustomAttribute {
    constructor(element, router) {
        this.element = element;
        this.router = router;
        this.hasHref = null;
        this.activeClass = 'load-active';
    }
    binding() {
        this.element.addEventListener('click', this.router.linkHandler.handler);
        this.updateValue();
        const observerLocator = this.router.container.get(_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.IObserverLocator);
        this.observer = observerLocator.getObserver(this.router, 'activeComponents');
        this.observer.subscribe(this);
    }
    unbinding() {
        this.element.removeEventListener('click', this.router.linkHandler.handler);
        this.observer.unsubscribe(this);
    }
    valueChanged(newValue) {
        this.updateValue();
    }
    updateValue() {
        if (this.hasHref === null) {
            this.hasHref = this.element.hasAttribute('href');
        }
        if (!this.hasHref) {
            // TODO: Figure out a better value here for non-strings (using InstructionResolver?)
            const value = typeof this.value === 'string' ? this.value : JSON.stringify(this.value);
            this.element.setAttribute('href', value);
        }
    }
    handleChange() {
        const controller = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomAttribute.for(this.element, 'load').parent;
        const created = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_2__.NavigationInstructionResolver.createViewportInstructions(this.router, this.value, { context: controller });
        const instructions = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_2__.NavigationInstructionResolver.toViewportInstructions(this.router, created.instructions);
        for (const instruction of instructions) {
            if (instruction.scope === null) {
                instruction.scope = created.scope;
            }
        }
        // TODO: Use router configuration for class name and update target
        if (this.router.checkActive(instructions)) {
            this.element.classList.add(this.activeClass);
        }
        else {
            this.element.classList.remove(this.activeClass);
        }
    }
};
__decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable)({ mode: _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.BindingMode.toView })
], LoadCustomAttribute.prototype, "value", void 0);
LoadCustomAttribute = __decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.customAttribute)('load'),
    __param(0, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.INode),
    __param(1, _router_js__WEBPACK_IMPORTED_MODULE_1__.IRouter)
], LoadCustomAttribute);

//# sourceMappingURL=load.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/resources/nav.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/resources/nav.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NavCustomElement": () => /* binding */ NavCustomElement
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../router.js */ "./node_modules/@aurelia/router/dist/esm/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


let NavCustomElement = class NavCustomElement {
    constructor(router) {
        this.router = router;
        this.name = null;
        this.routes = null;
        this.level = 0;
        this.classes = {};
    }
    get navRoutes() {
        const nav = this.router.navs[this.name];
        return (nav !== void 0 && nav !== null ? nav.routes : []);
    }
    get navClasses() {
        const nav = this.router.navs[this.name];
        const navClasses = (nav !== void 0 && nav !== null ? nav.classes : {});
        return {
            ...{
                nav: '',
                ul: '',
                li: '',
                a: '',
                ulActive: '',
                liActive: 'nav-active',
                aActive: '',
            }, ...navClasses
        };
    }
    active(route) {
        return 'Active';
    }
};
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable
], NavCustomElement.prototype, "name", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable
], NavCustomElement.prototype, "routes", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable
], NavCustomElement.prototype, "level", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable
], NavCustomElement.prototype, "classes", void 0);
NavCustomElement = __decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.customElement)({
        name: 'au-nav', template: `<template>
  <nav if.bind="name" class="\${name} \${navClasses.nav}">
    <au-nav routes.bind="navRoutes" classes.bind="navClasses" containerless></au-nav>
  </nav>
  <ul if.bind="routes" class="nav-level-\${level} \${classes.ul}">
    <li repeat.for="route of routes" if.bind="route.visible" class="\${route.active ? classes.liActive : ''} \${route.hasChildren} \${classes.li}">
      <a if.bind="route.link && route.link.length" load="\${route.link}" class="\${route.active ? classes.aActive : ''} \${classes.a}" innerhtml.bind="route.title"></a>
      <a if.bind="route.execute" click.trigger="route.executeAction($event)" href="" class="\${route.active ? classes.aActive : ''} \${classes.a}" innerhtml.bind="route.title"></a>
      <span if.bind="(!route.link || !route.link.length) && !route.execute && !route.children" class="\${route.active ? classes.aActive : ''} \${classes.span} nav-separator" innerhtml.bind="route.title"></span>
      <a if.bind="(!route.link || !route.link.length) && !route.execute && route.children" click.delegate="route.toggleActive()" href="" class="\${route.active ? classes.aActive : ''} \${classes.a}" innerhtml.bind="route.title"></a>
      <au-nav if.bind="route.children" routes.bind="route.children" level.bind="level + 1" classes.bind="classes" containerless></au-nav>
    </li>
  </ul>
</template>`
    }),
    __param(0, _router_js__WEBPACK_IMPORTED_MODULE_1__.IRouter)
], NavCustomElement);

//# sourceMappingURL=nav.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/resources/viewport-scope.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/resources/viewport-scope.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParentViewportScope": () => /* binding */ ParentViewportScope,
/* harmony export */   "ViewportScopeCustomElement": () => /* binding */ ViewportScopeCustomElement
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../router.js */ "./node_modules/@aurelia/router/dist/esm/router.js");
/* harmony import */ var _viewport_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./viewport.js */ "./node_modules/@aurelia/router/dist/esm/resources/viewport.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ViewportScopeCustomElement_1;




const ParentViewportScope = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.createInjectable();
let ViewportScopeCustomElement = ViewportScopeCustomElement_1 = class ViewportScopeCustomElement {
    constructor(router, element, container, parent, parentController) {
        this.router = router;
        this.element = element;
        this.container = container;
        this.parent = parent;
        this.parentController = parentController;
        this.name = 'default';
        this.catches = '';
        this.collection = false;
        this.source = null;
        this.viewportScope = null;
        this.isBound = false;
    }
    // Maybe this really should be here. Check with Fred
    // public create(
    //   controller: IDryCustomElementController<this>,
    //   parentContainer: IContainer,
    //   definition: CustomElementDefinition,
    //   parts: PartialCustomElementDefinitionParts | undefined,
    // ): PartialCustomElementDefinition {
    //   // TODO(fkleuver): describe this somewhere in the docs instead
    //   // Under the condition that there is no `replace` attribute on this custom element's declaration,
    //   // and this custom element is containerless, its content will be placed in a part named 'default'
    //   // See packages/jit-html/src/template-binder.ts line 411 (`replace = 'default';`) for the logic that governs this.
    //   // We could tidy this up into a formal api in the future. For now, there are two ways to do this:
    //   // 1. inject the `@IInstruction` (IHydrateElementInstruction) and grab .parts['default'] from there, manually creating a view factory from that, etc.
    //   // 2. what we're doing right here: grab the 'default' part from the create hook and return it as the definition, telling the render context to use that part to compile this element instead
    //   // This effectively causes this element to render its declared content as if it was its own template.
    //   // We do need to set `containerless` to true on the part definition so that the correct projector is used since parts default to non-containerless.
    //   // Otherwise, the controller will try to do `appendChild` on a comment node when it has to do `insertBefore`.
    //   // Also, in this particular scenario (specific to viewport-scope) we need to clone the part so as to prevent the resulting compiled definition
    //   // from ever being cached. That's the only reason why we're spreading the part into a new object for `getOrCreate`. If we didn't clone the object, this specific element wouldn't work correctly.
    //   const part = parts!['default'];
    //   return CustomElementDefinition.getOrCreate({ ...part, containerless: true });
    // }
    hydrated(controller) {
        this.controller = controller;
        // Don't update the container here (probably because it wants to be a part of the structure)
        // this.container = controller.context.get(IContainer);
        // console.log('ViewportScope creating', this.getAttribute('name', this.name), this.container, this.parent, controller, this);
        // this.connect();
    }
    bound(initiator, parent, flags) {
        this.isBound = true;
        this.$controller.scope = this.parentController.scope;
        this.connect();
        if (this.viewportScope !== null) {
            this.viewportScope.binding();
        }
    }
    unbinding(initiator, parent, flags) {
        if (this.viewportScope !== null) {
            this.viewportScope.unbinding();
        }
        return Promise.resolve();
    }
    afterUnbind(initiator, parent, flags) {
        this.disconnect();
        return Promise.resolve();
    }
    afterUnbound() {
        this.isBound = false;
    }
    connect() {
        if (this.router.rootScope === null) {
            return;
        }
        const name = this.getAttribute('name', this.name);
        const options = {};
        let value = this.getAttribute('catches', this.catches);
        if (value !== void 0) {
            options.catches = value;
        }
        value = this.getAttribute('collection', this.collection, true);
        if (value !== void 0) {
            options.collection = value;
        }
        // TODO: Needs to be bound? How to solve?
        options.source = this.source || null;
        this.controller.routingContainer = this.container;
        this.viewportScope = this.router.connectViewportScope(this.viewportScope, this, name, options);
    }
    disconnect() {
        if (this.viewportScope) {
            this.router.disconnectViewportScope(this.viewportScope, this);
        }
        this.viewportScope = null;
    }
    getAttribute(key, value, checkExists = false) {
        const result = {};
        if (this.isBound) {
            return value;
        }
        else {
            if (this.element.hasAttribute(key)) {
                if (checkExists) {
                    return true;
                }
                else {
                    value = this.element.getAttribute(key);
                    if (value.length > 0) {
                        return value;
                    }
                }
            }
        }
        return void 0;
    }
    isCustomElementController(value) {
        return (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.isCustomElementController)(value);
    }
    isCustomElementViewModel(value) {
        return (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.isCustomElementViewModel)(value);
    }
    getClosestCustomElement() {
        let parent = this.controller.parent;
        let customElement = null;
        while (parent !== null && customElement === null) {
            if (parent.viewModel instanceof _viewport_js__WEBPACK_IMPORTED_MODULE_3__.ViewportCustomElement || parent.viewModel instanceof ViewportScopeCustomElement_1) {
                customElement = parent.viewModel;
            }
            parent = parent.parent;
        }
        return customElement;
    }
};
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable
], ViewportScopeCustomElement.prototype, "name", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable
], ViewportScopeCustomElement.prototype, "catches", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable
], ViewportScopeCustomElement.prototype, "collection", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.bindable
], ViewportScopeCustomElement.prototype, "source", void 0);
ViewportScopeCustomElement = ViewportScopeCustomElement_1 = __decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.customElement)({
        name: 'au-viewport-scope',
        template: '<template></template>',
        containerless: false,
        injectable: ParentViewportScope
    }),
    __param(0, _router_js__WEBPACK_IMPORTED_MODULE_2__.IRouter),
    __param(1, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.INode),
    __param(2, _aurelia_kernel__WEBPACK_IMPORTED_MODULE_1__.IContainer),
    __param(3, ParentViewportScope),
    __param(4, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.IController)
], ViewportScopeCustomElement);

//# sourceMappingURL=viewport-scope.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/resources/viewport.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/resources/viewport.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParentViewport": () => /* binding */ ParentViewport,
/* harmony export */   "ViewportCustomElement": () => /* binding */ ViewportCustomElement
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../router.js */ "./node_modules/@aurelia/router/dist/esm/router.js");
/* harmony import */ var _viewport_scope_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./viewport-scope.js */ "./node_modules/@aurelia/router/dist/esm/resources/viewport-scope.js");
/* harmony import */ var _runner_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../runner.js */ "./node_modules/@aurelia/router/dist/esm/runner.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ViewportCustomElement_1;





const ParentViewport = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.CustomElement.createInjectable();
let ViewportCustomElement = ViewportCustomElement_1 = class ViewportCustomElement {
    constructor(router, element, container, parentViewport) {
        this.router = router;
        this.element = element;
        this.container = container;
        this.parentViewport = parentViewport;
        this.name = 'default';
        this.usedBy = '';
        this.default = '';
        this.fallback = '';
        this.noScope = false;
        this.noLink = false;
        this.noTitle = false;
        this.noHistory = false;
        this.stateful = false;
        this.viewport = null;
        this.isBound = false;
    }
    hydrated(controller) {
        // console.log('hydrated', this.name, this.router.isActive);
        this.controller = controller;
        this.container = controller.context.get(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IContainer);
        // The first viewport(s) might be compiled before the router is active
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.waitForRouterStart(), () => {
            if (this.router.isRestrictedNavigation) {
                this.connect();
            }
        });
    }
    binding(initiator, parent, flags) {
        this.isBound = true;
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.waitForRouterStart(), () => {
            if (!this.router.isRestrictedNavigation) {
                this.connect();
            }
        });
    }
    attaching(initiator, parent, flags) {
        if (this.viewport !== null && (this.viewport.nextContent ?? null) === null) {
            // console.log('attaching', this.viewport?.toString());
            this.viewport.enabled = true;
            return this.viewport.activate(initiator, this.$controller, flags, true);
            // TODO: Restore scroll state
        }
    }
    unbinding(initiator, parent, flags) {
        if (this.viewport !== null && (this.viewport.nextContent ?? null) === null) {
            // console.log('unbinding', this.viewport?.toString());
            // TODO: Save to cache, something like
            // this.viewport.cacheContent();
            // From viewport-content:
            // public unloadComponent(cache: ViewportContent[], stateful: boolean = false): void {
            //   // TODO: We might want to do something here eventually, who knows?
            //   if (this.contentStatus !== ContentStatus.loaded) {
            //     return;
            //   }
            //   // Don't unload components when stateful
            //   if (!stateful) {
            //     this.contentStatus = ContentStatus.created;
            //   } else {
            //     cache.push(this);
            //   }
            // }
            // TODO: Save scroll state before detach
            return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.viewport.deactivate(initiator, parent, flags), () => {
                this.isBound = false;
                this.viewport.enabled = false;
            });
            // this.isBound = false;
            // this.viewport.enabled = false;
            // return this.viewport.deactivate(initiator, parent, flags);
            // // this.viewport.enabled = false;
        }
    }
    // public detaching(initiator: IHydratedController, parent: ISyntheticView | ICustomElementController<ICustomElementViewModel> | null, flags: LifecycleFlags): void | Promise<void> {
    //   if (this.viewport !== null && (this.viewport.nextContent ?? null) === null) {
    //     console.log('detaching', this.viewport?.toString());
    //   }
    // }
    dispose() {
        if (this.viewport !== null) {
            return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => (this.viewport?.nextContent ?? null) === null ? this.viewport?.dispose() : void 0, () => this.disconnect());
        }
    }
    connect() {
        if (this.router.rootScope === null || (this.viewport !== null && this.router.isRestrictedNavigation)) {
            return;
        }
        // let controllerContainer = (this.controller.context as any).container;
        // let output = '';
        // do {
        //   console.log(output, ':', controllerContainer === this.container, this.controller, controllerContainer, this.container);
        //   if (controllerContainer === this.container) {
        //     break;
        //   }
        //   controllerContainer = controllerContainer.parent;
        //   output += '.parent';
        // } while (controllerContainer);
        const name = this.getAttribute('name', this.name);
        let value = this.getAttribute('no-scope', this.noScope);
        const options = { scope: value === void 0 || !value ? true : false };
        value = this.getAttribute('used-by', this.usedBy);
        if (value !== void 0) {
            options.usedBy = value;
        }
        value = this.getAttribute('default', this.default);
        if (value !== void 0) {
            options.default = value;
        }
        value = this.getAttribute('fallback', this.fallback);
        if (value !== void 0) {
            options.fallback = value;
        }
        value = this.getAttribute('no-link', this.noLink, true);
        if (value !== void 0) {
            options.noLink = value;
        }
        value = this.getAttribute('no-title', this.noTitle, true);
        if (value !== void 0) {
            options.noTitle = value;
        }
        value = this.getAttribute('no-history', this.noHistory, true);
        if (value !== void 0) {
            options.noHistory = value;
        }
        value = this.getAttribute('stateful', this.stateful, true);
        if (value !== void 0) {
            options.stateful = value;
        }
        this.controller.routingContainer = this.container;
        this.viewport = this.router.connectViewport(this.viewport, this, name, options);
    }
    disconnect() {
        if (this.viewport) {
            this.router.disconnectViewport(this.viewport, this);
        }
        this.viewport = null;
    }
    getAttribute(key, value, checkExists = false) {
        const result = {};
        if (this.isBound && !checkExists) {
            return value;
        }
        else {
            if (this.element.hasAttribute(key)) {
                if (checkExists) {
                    return true;
                }
                else {
                    value = this.element.getAttribute(key);
                    if (value.length > 0) {
                        return value;
                    }
                }
            }
        }
        return value;
    }
    getClosestCustomElement() {
        let parent = this.controller.parent;
        let customElement = null;
        while (parent !== null && customElement === null) {
            if (parent.viewModel instanceof ViewportCustomElement_1 || parent.viewModel instanceof _viewport_scope_js__WEBPACK_IMPORTED_MODULE_3__.ViewportScopeCustomElement) {
                customElement = parent.viewModel;
            }
            parent = parent.parent;
        }
        return customElement;
    }
    // TODO: Switch this to use (probably) an event instead
    waitForRouterStart() {
        if (this.router.isActive) {
            return;
        }
        return new Promise((resolve) => {
            this.router.starters.push(resolve);
        });
    }
};
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindable
], ViewportCustomElement.prototype, "name", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindable
], ViewportCustomElement.prototype, "usedBy", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindable
], ViewportCustomElement.prototype, "default", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindable
], ViewportCustomElement.prototype, "fallback", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindable
], ViewportCustomElement.prototype, "noScope", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindable
], ViewportCustomElement.prototype, "noLink", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindable
], ViewportCustomElement.prototype, "noTitle", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindable
], ViewportCustomElement.prototype, "noHistory", void 0);
__decorate([
    _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindable
], ViewportCustomElement.prototype, "stateful", void 0);
ViewportCustomElement = ViewportCustomElement_1 = __decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.customElement)({
        name: 'au-viewport',
        injectable: ParentViewport
    }),
    __param(0, _router_js__WEBPACK_IMPORTED_MODULE_2__.IRouter),
    __param(1, _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.INode),
    __param(2, _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IContainer),
    __param(3, ParentViewport)
], ViewportCustomElement);

//# sourceMappingURL=viewport.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/route-recognizer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/route-recognizer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouteRecognizer": () => /* binding */ RouteRecognizer,
/* harmony export */   "ConfigurableRoute": () => /* binding */ ConfigurableRoute,
/* harmony export */   "RecognizedRoute": () => /* binding */ RecognizedRoute,
/* harmony export */   "Endpoint": () => /* binding */ Endpoint
/* harmony export */ });
/* harmony import */ var _aurelia_route_recognizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/route-recognizer */ "./node_modules/@aurelia/route-recognizer/dist/esm/index.js");

const RouteRecognizer = _aurelia_route_recognizer__WEBPACK_IMPORTED_MODULE_0__.RouteRecognizer;
const ConfigurableRoute = _aurelia_route_recognizer__WEBPACK_IMPORTED_MODULE_0__.ConfigurableRoute;
const RecognizedRoute = _aurelia_route_recognizer__WEBPACK_IMPORTED_MODULE_0__.RecognizedRoute;
const Endpoint = _aurelia_route_recognizer__WEBPACK_IMPORTED_MODULE_0__.Endpoint;
//# sourceMappingURL=route-recognizer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/router-options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/router-options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RouterOptions": () => /* binding */ RouterOptions
/* harmony export */ });
class RouterOptions {
    constructor() {
        this.separators = {
            viewport: '@',
            sibling: '+',
            scope: '/',
            scopeStart: '(',
            scopeEnd: ')',
            noScope: '!',
            parameters: '(',
            parametersEnd: ')',
            parameterSeparator: ',',
            parameterKeySeparator: '=',
            parameter: '&',
            add: '+',
            clear: '-',
            action: '.',
        };
        this.useUrlFragmentHash = true;
        this.useHref = true;
        this.statefulHistoryLength = 0;
        this.useDirectRoutes = true;
        this.useConfiguredRoutes = true;
        this.additiveInstructionDefault = true;
        this.title = {
            // eslint-disable-next-line no-useless-escape
            appTitle: "${componentTitles}\${appTitleSeparator}Aurelia",
            appTitleSeparator: ' | ',
            componentTitleOrder: 'top-down',
            componentTitleSeparator: ' > ',
            useComponentNames: true,
            componentPrefix: 'app-',
        };
        this.navigationSyncStates = ['guardedUnload', 'swapped', 'completed'];
        this.swapStrategy = 'add-first-sequential';
        this.routingHookIntegration = 'integrated';
    }
}
//# sourceMappingURL=router-options.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/router.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/router.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IRouter": () => /* binding */ IRouter,
/* harmony export */   "Router": () => /* binding */ Router
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _instruction_resolver_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instruction-resolver.js */ "./node_modules/@aurelia/router/dist/esm/instruction-resolver.js");
/* harmony import */ var _link_handler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./link-handler.js */ "./node_modules/@aurelia/router/dist/esm/link-handler.js");
/* harmony import */ var _nav_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nav.js */ "./node_modules/@aurelia/router/dist/esm/nav.js");
/* harmony import */ var _navigator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./navigator.js */ "./node_modules/@aurelia/router/dist/esm/navigator.js");
/* harmony import */ var _type_resolvers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./type-resolvers.js */ "./node_modules/@aurelia/router/dist/esm/type-resolvers.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@aurelia/router/dist/esm/utils.js");
/* harmony import */ var _viewport_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./viewport.js */ "./node_modules/@aurelia/router/dist/esm/viewport.js");
/* harmony import */ var _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./viewport-instruction.js */ "./node_modules/@aurelia/router/dist/esm/viewport-instruction.js");
/* harmony import */ var _found_route_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./found-route.js */ "./node_modules/@aurelia/router/dist/esm/found-route.js");
/* harmony import */ var _hook_manager_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hook-manager.js */ "./node_modules/@aurelia/router/dist/esm/hook-manager.js");
/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./scope.js */ "./node_modules/@aurelia/router/dist/esm/scope.js");
/* harmony import */ var _viewport_scope_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./viewport-scope.js */ "./node_modules/@aurelia/router/dist/esm/viewport-scope.js");
/* harmony import */ var _browser_viewer_store_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./browser-viewer-store.js */ "./node_modules/@aurelia/router/dist/esm/browser-viewer-store.js");
/* harmony import */ var _navigation_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./navigation.js */ "./node_modules/@aurelia/router/dist/esm/navigation.js");
/* harmony import */ var _navigation_coordinator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./navigation-coordinator.js */ "./node_modules/@aurelia/router/dist/esm/navigation-coordinator.js");
/* harmony import */ var _router_options_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./router-options.js */ "./node_modules/@aurelia/router/dist/esm/router-options.js");
/* harmony import */ var _open_promise_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./open-promise.js */ "./node_modules/@aurelia/router/dist/esm/open-promise.js");
/* eslint-disable no-template-curly-in-string */
/* eslint-disable prefer-template */
/* eslint-disable max-lines-per-function */



















// export type SwapStrategy = 'add-first-sequential' | 'add-first-parallel' | 'remove-first-sequential' | 'remove-first-parallel';
// export type RoutingHookIntegration = 'integrated' | 'separate';
// /**
//  * Public API
//  */
// export interface IRouterActivateOptions extends Omit<Partial<IRouterOptions>, 'title'> {
//   title?: string | IRouterTitle;
// }
// /**
//  * Public API
//  */
// export interface IRouterOptions extends INavigatorOptions {
//   separators?: IRouteSeparators;
//   useUrlFragmentHash: boolean;
//   useHref: boolean;
//   statefulHistoryLength: number;
//   useDirectRoutes: boolean;
//   useConfiguredRoutes: boolean;
//   additiveInstructionDefault: boolean;
//   title: ITitleConfiguration;
//   hooks?: IHookDefinition[];
//   reportCallback?(instruction: Navigation): void;
//   navigationSyncStates: NavigationState[];
//   swapStrategy: SwapStrategy;
//   routingHookIntegration: RoutingHookIntegration;
// }
// /**
//  * Public API
//  */
// export interface IRouterTitle extends Partial<ITitleConfiguration> { }
// /**
//  * Public API
//  */
// export interface ITitleConfiguration {
//   appTitle: string;
//   appTitleSeparator: string;
//   componentTitleOrder: 'top-down' | 'bottom-up';
//   componentTitleSeparator: string;
//   useComponentNames: boolean;
//   componentPrefix: string;
//   transformTitle?: (title: string, instruction: string | ViewportInstruction | FoundRoute) => string;
// }
/**
 * Public API
 */
const IRouter = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IRouter', x => x.singleton(Router));
class ClosestViewportCustomElement {
}
/**
 * @internal
 */
class ClosestScope {
}
class Router {
    constructor(
    /**
     * @internal - Shouldn't be used directly.
     */
    container, 
    /**
     * @internal - Shouldn't be used directly.
     */
    navigator, navigation, 
    /**
     * @internal - Shouldn't be used directly.
     */
    linkHandler, 
    /**
     * @internal - Shouldn't be used directly. Probably.
     */
    instructionResolver, 
    /**
     * @internal - Shouldn't be used directly. Probably.
     */
    hookManager, options) {
        this.container = container;
        this.navigator = navigator;
        this.navigation = navigation;
        this.linkHandler = linkHandler;
        this.instructionResolver = instructionResolver;
        this.hookManager = hookManager;
        this.options = options;
        this.rootScope = null;
        /**
         * @internal
         */
        // public hookManager: HookManager;
        /**
         * @internal
         */
        this.navs = {};
        /**
         * Public API
         */
        this.activeComponents = [];
        /**
         * @internal
         */
        this.appendedInstructions = [];
        // /**
        //  * @internal
        //  */
        // public options: IRouterOptions = {
        //   useUrlFragmentHash: true,
        //   useHref: true,
        //   statefulHistoryLength: 0,
        //   useDirectRoutes: true,
        //   useConfiguredRoutes: true,
        //   additiveInstructionDefault: true,
        //   title: {
        //     appTitle: "${componentTitles}\${appTitleSeparator}Aurelia",
        //     appTitleSeparator: ' | ',
        //     componentTitleOrder: 'top-down',
        //     componentTitleSeparator: ' > ',
        //     useComponentNames: true,
        //     componentPrefix: 'app-',
        //   },
        //   swapStrategy: 'add-first-sequential',
        //   routingHookIntegration: 'integrated',
        //   navigationSyncStates: ['guardedUnload', 'swapped', 'completed'],
        // };
        this.processingNavigation = null;
        this.isActive = false;
        this.pendingConnects = new Map();
        this.loadedFirst = false;
        this.lastNavigation = null;
        this.staleChecks = {};
        // TODO: Switch this to use (probably) an event instead
        this.starters = [];
        /**
         * @internal
         */
        // TODO: use @bound and improve name (eslint-disable is temp)
        this.linkCallback = (info) => {
            let instruction = info.instruction || '';
            if (typeof instruction === 'string' && instruction.startsWith('#')) {
                instruction = instruction.slice(1);
                // '#' === '/' === '#/'
                if (!instruction.startsWith('/')) {
                    instruction = "/" + instruction;
                }
            }
            // Adds to Navigator's Queue, which makes sure it's serial
            this.load(instruction, { origin: info.anchor }).catch(error => { throw error; });
        };
        /**
         * @internal
         */
        // TODO: use @bound and improve name (eslint-disable is temp)
        this.navigatorCallback = (instruction) => {
            // Instructions extracted from queue, one at a time
            this.processNavigations(instruction).catch(error => { throw error; });
        };
        /**
         * @internal
         */
        // TODO: use @bound and improve name (eslint-disable is temp)
        this.navigatorSerializeCallback = async (entry, preservedEntries) => {
            let excludeComponents = [];
            for (const preservedEntry of preservedEntries) {
                if (typeof preservedEntry.instruction !== 'string') {
                    excludeComponents.push(...this.instructionResolver.flattenViewportInstructions(preservedEntry.instruction)
                        .filter(instruction => instruction.viewport !== null)
                        .map(instruction => instruction.componentInstance));
                }
                if (typeof preservedEntry.fullStateInstruction !== 'string') {
                    excludeComponents.push(...this.instructionResolver.flattenViewportInstructions(preservedEntry.fullStateInstruction)
                        .filter(instruction => instruction.viewport !== null)
                        .map(instruction => instruction.componentInstance));
                }
            }
            excludeComponents = excludeComponents.filter((component, i, arr) => component !== null && arr.indexOf(component) === i);
            const serialized = { ...entry };
            let instructions = [];
            if (serialized.fullStateInstruction && typeof serialized.fullStateInstruction !== 'string') {
                instructions.push(...serialized.fullStateInstruction);
                serialized.fullStateInstruction = this.instructionResolver.stringifyViewportInstructions(serialized.fullStateInstruction);
            }
            if (serialized.instruction && typeof serialized.instruction !== 'string') {
                instructions.push(...serialized.instruction);
                serialized.instruction = this.instructionResolver.stringifyViewportInstructions(serialized.instruction);
            }
            instructions = instructions.filter((instruction, i, arr) => instruction !== null
                && instruction.componentInstance !== null
                && arr.indexOf(instruction) === i);
            const alreadyDone = [];
            for (const instruction of instructions) {
                await this.freeComponents(instruction, excludeComponents, alreadyDone);
            }
            return serialized;
        };
        /**
         * @internal
         */
        // TODO: use @bound and improve name (eslint-disable is temp)
        this.browserNavigatorCallback = (browserNavigationEvent) => {
            const entry = new _navigation_js__WEBPACK_IMPORTED_MODULE_15__.Navigation(browserNavigationEvent.state?.currentEntry);
            entry.instruction = browserNavigationEvent.instruction;
            entry.fromBrowser = true;
            this.navigator.navigate(entry).catch(error => { throw error; });
        };
        /**
         * @internal
         */
        // TODO: use @bound and improve name (eslint-disable is temp)
        this.processNavigations = async (qInstruction) => {
            const instruction = this.processingNavigation = qInstruction;
            // console.log('pendingConnects', [...this.pendingConnects]);
            this.pendingConnects.clear();
            if (this.options.reportCallback) {
                this.options.reportCallback(instruction);
            }
            // let {
            //   fullStateInstruction,
            //   instructionNavigation,
            //   configuredRoute,
            //   configuredRoutePath,
            //   instructions,
            //   clearScopeOwners,
            //   clearViewportScopes,
            // }
            const coordinator = _navigation_coordinator_js__WEBPACK_IMPORTED_MODULE_16__.NavigationCoordinator.create(this, instruction, { syncStates: this.options.navigationSyncStates });
            // const steps = [
            //   () => coordinator.syncState('loaded'),
            //   () => { console.log('SyncState loaded resolved!', steps); },
            //   () => coordinator.syncState('swapped'),
            //   () => { console.log('SyncState swapped resolved!', steps); },
            //   () => coordinator.syncState('left'),
            //   () => { console.log('SyncState left resolved!', steps); },
            // ];
            // run(...steps);
            // const loadedPromise = ;
            // if (loadedPromise !== void 0) {
            //   loadedPromise.then((value: any) => {
            //     console.log('SyncState loaded resolved!', value);
            //   });
            // }
            // console.log(instruction.instruction);
            // console.log(this.rootScope?.scope.toString(true));
            let transformedInstruction = typeof instruction.instruction === 'string' && !instruction.useFullStateInstruction
                ? await this.hookManager.invokeTransformFromUrl(instruction.instruction, this.processingNavigation)
                : instruction.instruction;
            // TODO: Review this
            if (transformedInstruction === '/') {
                transformedInstruction = '';
            }
            instruction.scope = instruction.scope ?? this.rootScope.scope;
            let configuredRoute = instruction.scope.findInstructions(transformedInstruction);
            let configuredRoutePath = null;
            // let configuredRoute = await this.findInstructions(
            //   this.rootScope!.scope,
            //   instruction.instruction,
            //   instruction.scope ?? this.rootScope!.scope,
            //   !instruction.useFullStateInstruction);
            if (instruction.instruction.length > 0 && !configuredRoute.foundConfiguration && !configuredRoute.foundInstructions) {
                // TODO: Do something here!
                this.unknownRoute(configuredRoute.remaining);
            }
            let instructions = configuredRoute.instructions;
            if (configuredRoute.foundConfiguration) {
                instruction.path = instruction.instruction.startsWith('/')
                    ? instruction.instruction.slice(1)
                    : instruction.instruction;
                configuredRoutePath = (configuredRoutePath ?? '') + configuredRoute.matching;
                this.rootScope.path = configuredRoutePath;
            }
            // TODO: Used to have an early exit if no instructions. Restore it?
            if (!this.options.additiveInstructionDefault &&
                instructions.length > 0 &&
                !this.instructionResolver.isAddAllViewportsInstruction(instructions[0]) &&
                !this.instructionResolver.isClearAllViewportsInstruction(instructions[0])) {
                const instr = this.createViewportInstruction(this.instructionResolver.clearViewportInstruction);
                instr.scope = instructions[0].scope;
                instructions.unshift(instr);
            }
            const clearScopeOwners = [];
            let clearViewportScopes = [];
            for (const clearInstruction of instructions.filter(instr => this.instructionResolver.isClearAllViewportsInstruction(instr))) {
                const scope = clearInstruction.scope || this.rootScope.scope;
                const scopes = scope.allScopes().filter(scope => !scope.owner.isEmpty).map(scope => scope.owner);
                // TODO: Tell Fred about the need for reverse
                // scopes.reverse();
                clearScopeOwners.push(...scopes);
                if (scope.viewportScope !== null && scope.viewportScope !== this.rootScope) {
                    clearViewportScopes.push(scope.viewportScope);
                }
            }
            instructions = instructions.filter(instr => !this.instructionResolver.isClearAllViewportsInstruction(instr));
            for (const addInstruction of instructions.filter(instr => this.instructionResolver.isAddAllViewportsInstruction(instr))) {
                addInstruction.setViewport((addInstruction.scope || this.rootScope.scope).viewportScope.name);
                addInstruction.scope = addInstruction.scope.owningScope;
            }
            for (const instr of instructions) {
                instr.topInstruction = true;
            }
            const updatedScopeOwners = [];
            const alreadyFoundInstructions = [];
            // TODO: Take care of cancellations down in subsets/iterations
            let { found: viewportInstructions, remaining: remainingInstructions } = this.findViewports(instructions, alreadyFoundInstructions);
            let guard = 100;
            do {
                if (!guard--) { // Guard against endless loop
                    const err = new Error(remainingInstructions.length + ' remaining instructions after 100 iterations; there is likely an infinite loop.');
                    err['remainingInstructions'] = remainingInstructions;
                    console.log('remainingInstructions', remainingInstructions);
                    throw err;
                }
                const changedScopeOwners = [];
                // TODO: Review whether this await poses a problem (it's currently necessary for new viewports to load)
                const hooked = await this.hookManager.invokeBeforeNavigation(viewportInstructions, instruction);
                if (hooked === false) {
                    coordinator.cancel();
                    return;
                    // return this.cancelNavigation([...changedScopeOwners, ...updatedScopeOwners], instruction);
                }
                else {
                    viewportInstructions = hooked;
                }
                for (const viewportInstruction of viewportInstructions) {
                    const scopeOwner = viewportInstruction.owner;
                    if (scopeOwner !== null) {
                        scopeOwner.path = configuredRoutePath;
                        const action = scopeOwner.setNextContent(viewportInstruction, instruction);
                        if (action !== 'skip') {
                            changedScopeOwners.push(scopeOwner);
                            coordinator.addEntity(scopeOwner);
                        }
                        const dontClear = [scopeOwner];
                        if (action === 'swap') {
                            dontClear.push(...scopeOwner.scope.allScopes(true, true).map(scope => scope.owner));
                        }
                        (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.arrayRemove)(clearScopeOwners, value => dontClear.includes(value));
                        // arrayRemove(clearScopeOwners, value => value === scopeOwner);
                        if (!this.instructionResolver.isClearViewportInstruction(viewportInstruction)
                            && viewportInstruction.scope !== null
                            && viewportInstruction.scope.parent !== null
                            && viewportInstruction.scope.parent.isViewportScope) {
                            (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.arrayRemove)(clearViewportScopes, value => value === viewportInstruction.scope.parent.viewportScope);
                        }
                    }
                }
                if (!this.isRestrictedNavigation) {
                    coordinator.finalEntity();
                }
                coordinator.run();
                // await coordinator.syncState('routed');
                // // eslint-disable-next-line no-await-in-loop
                // let results = await Promise.all(changedScopeOwners.map((scopeOwner) => scopeOwner.canUnload()));
                // if (results.some(result => result === false)) {
                //   return this.cancelNavigation([...changedScopeOwners, ...updatedScopeOwners], instruction);
                // }
                // // eslint-disable-next-line no-await-in-loop
                // results = await Promise.all(changedScopeOwners.map(async (scopeOwner) => {
                //   const canLoad = await scopeOwner.canLoad();
                //   if (typeof canLoad === 'boolean') {
                //     if (canLoad) {
                //       coordinator.addEntityState(scopeOwner, 'loaded');
                //       return scopeOwner.load();
                //     } else {
                //       return false;
                //     }
                //   }
                //   await this.load(canLoad, { append: true });
                //   await scopeOwner.abortContentChange();
                //   // TODO: Abort content change in the viewports
                //   return true;
                // }));
                // if (results.some(result => result === false)) {
                //   return this.cancelNavigation([...changedScopeOwners, ...updatedScopeOwners], qInstruction);
                // }
                for (const viewport of changedScopeOwners) {
                    if (updatedScopeOwners.every(scopeOwner => scopeOwner !== viewport)) {
                        updatedScopeOwners.push(viewport);
                    }
                }
                // TODO: Fix multi level recursiveness!
                alreadyFoundInstructions.push(...viewportInstructions);
                ({ found: viewportInstructions, remaining: remainingInstructions } = this.findViewports(remainingInstructions, alreadyFoundInstructions));
                // Look for configured child routes (once we've loaded everything so far?)
                if (configuredRoute.hasRemaining &&
                    viewportInstructions.length === 0 &&
                    remainingInstructions.length === 0) {
                    let configured = new _found_route_js__WEBPACK_IMPORTED_MODULE_10__.FoundRoute();
                    const routeScopeOwners = alreadyFoundInstructions
                        .filter(instr => instr.owner !== null && instr.owner.path === configuredRoutePath)
                        .map(instr => instr.owner)
                        .filter((value, index, arr) => arr.indexOf(value) === index);
                    // Need to await new viewports being bound
                    if (!this.isRestrictedNavigation) {
                        // await Promise.resolve();
                        // console.log('Awaiting swapped');
                        await coordinator.syncState('swapped');
                        // console.log('Awaited swapped');
                        // console.log('pendingConnects before find new', [...this.pendingConnects]);
                        // const pending = [...this.pendingConnects.values()].filter(connect => connect.isPending);
                        // if (pending.length > 0) {
                        //   console.log('Beginning await for ', pending.length);
                        //   await Promise.all(pending.map(connect => connect.promise));
                        //   console.log('Await done');
                        // }
                    }
                    for (const owner of routeScopeOwners) {
                        configured = owner.scope.findInstructions(configuredRoute.remaining);
                        // configured = await this.findInstructions(owner.scope, configuredRoute.remaining, owner.scope);
                        if (configured.foundConfiguration) {
                            break;
                        }
                    }
                    if (configured.foundInstructions) {
                        configuredRoute = configured;
                        configuredRoutePath = (configuredRoutePath ?? '') + "/" + configuredRoute.matching;
                    }
                    else {
                        // TODO: Do something here!
                        this.unknownRoute(configured.remaining);
                    }
                    this.appendInstructions(configured.instructions);
                }
                // Don't use defaults when it's a full state navigation
                if (instruction.useFullStateInstruction) {
                    this.appendedInstructions = this.appendedInstructions.filter(instruction => !instruction.default);
                }
                // Process non-defaults first
                let appendedInstructions = this.appendedInstructions.filter(instruction => !instruction.default);
                this.appendedInstructions = this.appendedInstructions.filter(instruction => instruction.default);
                if (appendedInstructions.length === 0) {
                    const index = this.appendedInstructions.findIndex(instruction => instruction.default);
                    if (index >= 0) {
                        appendedInstructions = this.appendedInstructions.splice(index, 1);
                    }
                }
                while (appendedInstructions.length > 0) {
                    const appendedInstruction = appendedInstructions.shift();
                    const existingAlreadyFound = alreadyFoundInstructions.some(instruction => instruction.sameViewport(appendedInstruction));
                    const existingFound = viewportInstructions.find(value => value.sameViewport(appendedInstruction));
                    const existingRemaining = remainingInstructions.find(value => value.sameViewport(appendedInstruction));
                    if (appendedInstruction.default &&
                        (existingAlreadyFound ||
                            (existingFound !== void 0 && !existingFound.default) ||
                            (existingRemaining !== void 0 && !existingRemaining.default))) {
                        continue;
                    }
                    if (existingFound !== void 0) {
                        (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.arrayRemove)(viewportInstructions, value => value === existingFound);
                    }
                    if (existingRemaining !== void 0) {
                        (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.arrayRemove)(remainingInstructions, value => value === existingRemaining);
                    }
                    if (appendedInstruction.viewport !== null) {
                        viewportInstructions.push(appendedInstruction);
                    }
                    else {
                        remainingInstructions.push(appendedInstruction);
                    }
                }
                if (viewportInstructions.length === 0 && remainingInstructions.length === 0) {
                    viewportInstructions = clearScopeOwners.map(owner => {
                        const instruction = this.createViewportInstruction(this.instructionResolver.clearViewportInstruction, owner.isViewport ? owner : void 0);
                        if (owner.isViewportScope) {
                            instruction.viewportScope = owner;
                        }
                        return instruction;
                    });
                    viewportInstructions.push(...clearViewportScopes.map(viewportScope => {
                        const instr = this.createViewportInstruction(this.instructionResolver.clearViewportInstruction);
                        instr.viewportScope = viewportScope;
                        return instr;
                    }));
                    clearViewportScopes = [];
                }
                // await new Promise(res => setTimeout(res, 100));
            } while (viewportInstructions.length > 0 || remainingInstructions.length > 0);
            coordinator.finalEntity();
            // await Promise.all(updatedScopeOwners.map((value) => value.loadContent()));
            await coordinator.syncState('completed');
            coordinator.finalize();
            // updatedScopeOwners.forEach((viewport) => {
            //   viewport.finalizeContentChange();
            // });
            await this.replacePaths(instruction);
            // this.updateNav();
            // Remove history entry if no history viewports updated
            if (instruction.navigation.new && !instruction.navigation.first && !instruction.repeating && updatedScopeOwners.every(viewport => viewport.options.noHistory)) {
                instruction.untracked = true;
            }
            // updatedScopeOwners.forEach((viewport) => {
            //   viewport.finalizeContentChange();
            // });
            this.lastNavigation = this.processingNavigation;
            if (this.lastNavigation?.repeating ?? false) {
                this.lastNavigation.repeating = false;
            }
            this.processingNavigation = null;
            await this.navigator.finalize(instruction);
        };
        // this.hookManager = new HookManager();
    }
    /**
     * Public API
     */
    get isNavigating() {
        return this.processingNavigation !== null;
    }
    get isRestrictedNavigation() {
        const syncStates = this.options.navigationSyncStates;
        return syncStates.includes('guardedLoad') ||
            syncStates.includes('unloaded') ||
            syncStates.includes('loaded') ||
            syncStates.includes('guarded') ||
            syncStates.includes('routed');
    }
    /**
     * @internal
     */
    get statefulHistory() {
        return this.options.statefulHistoryLength !== void 0 && this.options.statefulHistoryLength > 0;
    }
    /**
     * Public API
     */
    start(options) {
        if (this.isActive) {
            throw new Error('Router has already been started');
        }
        this.isActive = true;
        options = options ?? {};
        const titleOptions = {
            ...this.options.title,
            ...(typeof options.title === 'string' ? { appTitle: options.title } : options.title),
        };
        options.title = titleOptions;
        const separatorOptions = {
            ...this.options.separators,
            ...options.separators ?? {},
        };
        options.separators = separatorOptions;
        Object.assign(this.options, options);
        if (this.options.hooks !== void 0) {
            this.addHooks(this.options.hooks);
        }
        this.instructionResolver.start({ separators: this.options.separators });
        this.navigator.start(this, {
            callback: this.navigatorCallback,
            store: this.navigation,
            statefulHistoryLength: this.options.statefulHistoryLength,
            serializeCallback: this.statefulHistory ? this.navigatorSerializeCallback : void 0,
        });
        this.linkHandler.start({ callback: this.linkCallback, useHref: this.options.useHref });
        this.navigation.start({
            callback: this.browserNavigatorCallback,
            useUrlFragmentHash: this.options.useUrlFragmentHash
        });
        this.ensureRootScope();
        // TODO: Switch this to use (probably) an event instead
        for (const starter of this.starters) {
            starter();
        }
    }
    /**
     * Public API
     */
    async loadUrl() {
        const entry = new _navigation_js__WEBPACK_IMPORTED_MODULE_15__.Navigation({
            ...this.navigation.viewerState,
            ...{
                fullStateInstruction: '',
                replacing: true,
                fromBrowser: false,
            }
        });
        const result = this.navigator.navigate(entry);
        this.loadedFirst = true;
        return result;
    }
    /**
     * Public API
     */
    stop() {
        if (!this.isActive) {
            throw new Error('Router has not been started');
        }
        this.linkHandler.stop();
        this.navigator.stop();
        this.navigation.stop();
    }
    /**
     * @internal
     */
    findScope(origin) {
        // this.ensureRootScope();
        if (origin === void 0 || origin === null) {
            return this.rootScope.scope;
        }
        if (origin instanceof _scope_js__WEBPACK_IMPORTED_MODULE_12__.Scope || origin instanceof _viewport_js__WEBPACK_IMPORTED_MODULE_8__.Viewport) {
            return origin.scope;
        }
        return this.getClosestScope(origin) || this.rootScope.scope;
    }
    /**
     * @internal
     */
    findParentScope(container) {
        if (container === null) {
            return this.rootScope.scope;
        }
        // Already (prematurely) set on this view model so get it from container's parent instead
        if (container.has(ClosestScope, false)) {
            container = container.parent;
            if (container === null) {
                return this.rootScope.scope;
            }
        }
        if (container.has(ClosestScope, true)) {
            return container.get(ClosestScope);
        }
        return this.rootScope.scope;
    }
    /**
     * Public API - Get viewport by name
     */
    getViewport(name) {
        return this.allViewports().find(viewport => viewport.name === name) || null;
    }
    /**
     * Public API (not yet implemented)
     */
    addViewport(...args) {
        throw new Error('Not implemented');
    }
    /**
     * Public API (not yet implemented)
     */
    findViewportScope(...args) {
        throw new Error('Not implemented');
    }
    /**
     * Public API (not yet implemented)
     */
    addViewportScope(...args) {
        throw new Error('Not implemented');
    }
    /**
     * @internal - Called from the viewport scope custom element in created()
     */
    setClosestScope(viewModelOrContainer, scope) {
        const container = this.getContainer(viewModelOrContainer);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(ClosestScope, scope).register(container);
    }
    /**
     * @internal
     */
    getClosestScope(viewModelOrElement) {
        const container = 'resourceResolvers' in viewModelOrElement
            ? viewModelOrElement
            : this.getClosestContainer(viewModelOrElement);
        if (container === null) {
            return null;
        }
        if (!container.has(ClosestScope, true)) {
            return null;
        }
        return container.get(ClosestScope) || null;
    }
    /**
     * @internal
     */
    unsetClosestScope(viewModelOrContainer) {
        const container = this.getContainer(viewModelOrContainer);
        // TODO: Get an 'unregister' on container
        container.resolvers.delete(ClosestScope);
    }
    /**
     * @internal - Called from the viewport custom element
     */
    connectViewport(viewport, connectedCE, name, options) {
        const parentScope = this.findParentScope(connectedCE.container);
        // console.log('Viewport parentScope', parentScope.toString(), (connectedCE as any).getClosestCustomElement());
        const parentViewportScope = (connectedCE.parentViewport?.viewport ?? this.rootScope).scope;
        if (parentScope !== parentViewportScope) {
            console.error('Viewport parentScope !== parentViewportScope', parentScope.toString(true), parentViewportScope.toString(true), connectedCE.getClosestCustomElement());
        }
        if (viewport === null) {
            viewport = parentScope.addViewport(name, connectedCE, options);
            this.setClosestScope(connectedCE.container, viewport.connectedScope);
            if (!this.isRestrictedNavigation) {
                this.pendingConnects.set(connectedCE, new _open_promise_js__WEBPACK_IMPORTED_MODULE_18__.OpenPromise());
            }
        }
        else {
            this.pendingConnects.get(connectedCE)?.resolve();
        }
        return viewport;
    }
    /**
     * @internal - Called from the viewport custom element
     */
    disconnectViewport(viewport, connectedCE) {
        if (!viewport.connectedScope.parent.removeViewport(viewport, connectedCE)) {
            throw new Error("Failed to remove viewport: " + viewport.name);
        }
        this.unsetClosestScope(connectedCE.container);
    }
    /**
     * @internal - Called from the viewport scope custom element
     */
    connectViewportScope(viewportScope, connectedCE, name, options) {
        const parentScope = this.findParentScope(connectedCE.container);
        // console.log('ViewportScope parentScope', parentScope.toString(), (connectedCE as any).getClosestCustomElement());
        if (viewportScope === null) {
            viewportScope = parentScope.addViewportScope(name, connectedCE, options);
            this.setClosestScope(connectedCE.container, viewportScope.connectedScope);
        }
        return viewportScope;
    }
    /**
     * @internal - Called from the viewport scope custom element
     */
    disconnectViewportScope(viewportScope, connectedCE) {
        if (!viewportScope.connectedScope.parent.removeViewportScope(viewportScope)) {
            throw new Error("Failed to remove viewport scope: " + viewportScope.path);
        }
        this.unsetClosestScope(connectedCE.container);
    }
    allViewports(includeDisabled = false, includeReplaced = false) {
        // this.ensureRootScope();
        return this.rootScope.scope.allViewports(includeDisabled, includeReplaced);
    }
    /**
     * Public API - THE navigation API
     */
    async goto(instructions, options) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.deprecationWarning)('"goto" method', '"load" method');
        return this.load(instructions, options);
    }
    async load(instructions, options) {
        options = options || {};
        // TODO: Review query extraction; different pos for path and fragment!
        if (typeof instructions === 'string' && !options.query) {
            const [path, search] = instructions.split('?');
            instructions = path;
            options.query = search;
        }
        const toOptions = {};
        if (options.origin) {
            toOptions.context = options.origin;
        }
        let scope = null;
        ({ instructions, scope } = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_6__.NavigationInstructionResolver.createViewportInstructions(this, instructions, toOptions));
        if (options.append && this.processingNavigation) {
            instructions = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_6__.NavigationInstructionResolver.toViewportInstructions(this, instructions);
            this.appendInstructions(instructions, scope);
            // Can't return current navigation promise since it can lead to deadlock in load
            return Promise.resolve();
        }
        const entry = new _navigation_js__WEBPACK_IMPORTED_MODULE_15__.Navigation({
            instruction: instructions,
            fullStateInstruction: '',
            scope: scope,
            title: options.title,
            data: options.data,
            query: options.query,
            replacing: options.replace,
            repeating: options.append,
            fromBrowser: false,
            origin: options.origin,
        });
        return this.navigator.navigate(entry);
    }
    /**
     * Public API
     */
    refresh() {
        return this.navigator.refresh();
    }
    /**
     * Public API
     */
    back() {
        return this.navigator.go(-1);
    }
    /**
     * Public API
     */
    forward() {
        return this.navigator.go(1);
    }
    /**
     * Public API
     */
    go(delta) {
        return this.navigator.go(delta);
    }
    /**
     * Public API
     */
    checkActive(instructions) {
        for (const instruction of instructions) {
            const scopeInstructions = this.instructionResolver.matchScope(this.activeComponents, instruction.scope);
            const matching = scopeInstructions.filter(instr => instr.sameComponent(instruction, true));
            if (matching.length === 0) {
                return false;
            }
            if (Array.isArray(instruction.nextScopeInstructions)
                && instruction.nextScopeInstructions.length > 0
                && this.instructionResolver.matchChildren(instruction.nextScopeInstructions, matching.map(instr => Array.isArray(instr.nextScopeInstructions) ? instr.nextScopeInstructions : []).flat()) === false) {
                return false;
            }
        }
        return true;
    }
    /**
     * Public API
     */
    setNav(name, routes, classes) {
        const nav = this.findNav(name);
        if (nav !== void 0 && nav !== null) {
            nav.routes = [];
        }
        this.addNav(name, routes, classes);
    }
    /**
     * Public API
     */
    addNav(name, routes, classes) {
        let nav = this.navs[name];
        if (nav === void 0 || nav === null) {
            nav = this.navs[name] = new _nav_js__WEBPACK_IMPORTED_MODULE_4__.Nav(this, name, [], classes);
        }
        nav.addRoutes(routes);
        nav.update();
    }
    /**
     * Public API
     */
    updateNav(name) {
        const navs = name
            ? [name]
            : Object.keys(this.navs);
        for (const nav of navs) {
            if (this.navs[nav] !== void 0 && this.navs[nav] !== null) {
                this.navs[nav].update();
            }
        }
    }
    /**
     * Public API
     */
    findNav(name) {
        return this.navs[name];
    }
    /**
     * Public API
     */
    addRoutes(routes, context) {
        // TODO: This should add to the context instead
        // TODO: Add routes without context to rootScope content (which needs to be created)?
        return [];
        // const viewport = (context !== void 0 ? this.closestViewport(context) : this.rootScope) || this.rootScope as Viewport;
        // return viewport.addRoutes(routes);
    }
    /**
     * Public API
     */
    removeRoutes(routes, context) {
        // TODO: This should remove from the context instead
        // const viewport = (context !== void 0 ? this.closestViewport(context) : this.rootScope) || this.rootScope as Viewport;
        // return viewport.removeRoutes(routes);
    }
    /**
     * Public API
     */
    addHooks(hooks) {
        return hooks.map(hook => this.addHook(hook.hook, hook.options));
    }
    addHook(hook, options) {
        return this.hookManager.addHook(hook, options);
    }
    /**
     * Public API
     */
    removeHooks(hooks) {
        return;
    }
    /**
     * Public API - The right way to create ViewportInstructions
     */
    createViewportInstruction(component, viewport, parameters, ownsScope = true, nextScopeInstructions = null) {
        return this.instructionResolver.createViewportInstruction(component, viewport, parameters, ownsScope, nextScopeInstructions);
    }
    hasSiblingInstructions(instructions) {
        if (instructions === null) {
            return false;
        }
        if (instructions.length > 1) {
            return true;
        }
        return instructions.some(instruction => this.hasSiblingInstructions(instruction.nextScopeInstructions));
    }
    appendInstructions(instructions, scope = null) {
        if (scope === null) {
            scope = this.rootScope.scope;
        }
        for (const instruction of instructions) {
            if (instruction.scope === null) {
                instruction.scope = scope;
            }
        }
        this.appendedInstructions.push(...instructions);
    }
    checkStale(name, instructions) {
        const staleCheck = this.staleChecks[name];
        if (staleCheck === void 0) {
            this.staleChecks[name] = instructions.slice();
            return false;
        }
        if (staleCheck.length !== instructions.length) {
            this.staleChecks[name] = instructions.slice();
            return false;
        }
        for (let i = 0, ii = instructions.length; i < ii; i++) {
            if (staleCheck[i] !== instructions[i]) {
                this.staleChecks[name] = instructions.slice();
                return false;
            }
        }
        return true;
    }
    unknownRoute(route) {
        if (typeof route !== 'string' || route.length === 0) {
            return;
        }
        if (this.options.useConfiguredRoutes && this.options.useDirectRoutes) {
            // TODO: Add missing/unknown route handling
            throw new Error("No matching configured route or component found for '" + route + "'");
        }
        else if (this.options.useConfiguredRoutes) {
            // TODO: Add missing/unknown route handling
            throw new Error("No matching configured route found for '" + route + "'");
        }
        else {
            // TODO: Add missing/unknown route handling
            throw new Error("No matching route/component found for '" + route + "'");
        }
    }
    findViewports(instructions, alreadyFound, withoutViewports = false) {
        const found = [];
        const remaining = [];
        while (instructions.length) {
            if (instructions[0].scope === null) {
                instructions[0].scope = this.rootScope.scope;
            }
            const scope = instructions[0].scope;
            const { foundViewports, remainingInstructions } = scope.findViewports(instructions.filter(instruction => instruction.scope === scope), alreadyFound, withoutViewports);
            found.push(...foundViewports);
            remaining.push(...remainingInstructions);
            instructions = instructions.filter(instruction => instruction.scope !== scope);
        }
        return { found: found.slice(), remaining };
    }
    async cancelNavigation(updatedScopeOwners, qInstruction) {
        // TODO: Take care of disabling viewports when cancelling and stateful!
        updatedScopeOwners.forEach((viewport) => {
            const abort = viewport.abortContentChange();
            if (abort instanceof Promise) {
                abort.catch(error => { throw error; });
            }
        });
        await this.navigator.cancel(qInstruction);
        this.processingNavigation = null;
        qInstruction.resolve();
    }
    ensureRootScope() {
        if (!this.rootScope) {
            const root = this.container.get(_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.IAppRoot);
            // root.config.component shouldn't be used in the end. Metadata will probably eliminate it
            this.rootScope = new _viewport_scope_js__WEBPACK_IMPORTED_MODULE_13__.ViewportScope('rootScope', this, root.controller.viewModel, null, true, root.config.component);
        }
        return this.rootScope;
    }
    async replacePaths(instruction) {
        this.rootScope.scope.reparentViewportInstructions();
        let instructions = this.rootScope.scope.hoistedChildren
            .filter(scope => scope.viewportInstruction !== null && !scope.viewportInstruction.isEmpty())
            .map(scope => scope.viewportInstruction);
        instructions = this.instructionResolver.cloneViewportInstructions(instructions, true);
        // The following makes sure right viewport/viewport scopes are set and update
        // whether viewport name is necessary or not
        const alreadyFound = [];
        let { found, remaining } = this.findViewports(instructions, alreadyFound, true);
        let guard = 100;
        while (remaining.length > 0) {
            // Guard against endless loop
            if (guard-- === 0) {
                throw new Error('Failed to find viewport when updating viewer paths.');
            }
            alreadyFound.push(...found);
            ({ found, remaining } = this.findViewports(remaining, alreadyFound, true));
        }
        this.activeComponents = instructions;
        this.activeRoute = instruction.route;
        // First invoke with viewport instructions (should it perhaps get full state?)
        let state = await this.hookManager.invokeTransformToUrl(instructions, instruction);
        if (typeof state !== 'string') {
            // Convert to string if necessary
            state = this.instructionResolver.stringifyViewportInstructions(state, false, true);
        }
        // Invoke again with string
        state = await this.hookManager.invokeTransformToUrl(state, instruction);
        const query = (instruction.query && instruction.query.length ? "?" + instruction.query : '');
        // if (instruction.path === void 0 || instruction.path.length === 0 || instruction.path === '/') {
        instruction.path = state + query;
        // }
        const fullViewportStates = [this.createViewportInstruction(this.instructionResolver.clearViewportInstruction)];
        fullViewportStates.push(...this.instructionResolver.cloneViewportInstructions(instructions, this.statefulHistory));
        instruction.fullStateInstruction = fullViewportStates;
        if ((instruction.title ?? null) === null) {
            const title = await this.getTitle(instructions, instruction);
            if (title !== null) {
                instruction.title = title;
            }
        }
        return Promise.resolve();
    }
    async getTitle(instructions, instruction) {
        // First invoke with viewport instructions
        let title = await this.hookManager.invokeSetTitle(instructions, instruction);
        if (typeof title !== 'string') {
            // Hook didn't return a title, so run title logic
            const componentTitles = this.stringifyTitles(title, instruction);
            title = this.options.title.appTitle;
            title = title.replace("${componentTitles}", componentTitles);
            title = title.replace("${appTitleSeparator}", componentTitles !== ''
                ? this.options.title.appTitleSeparator
                : '');
        }
        // Invoke again with complete string
        title = await this.hookManager.invokeSetTitle(title, instruction);
        return title;
    }
    stringifyTitles(instructions, navigationInstruction) {
        const titles = instructions
            .map(instruction => this.stringifyTitle(instruction, navigationInstruction))
            .filter(instruction => (instruction?.length ?? 0) > 0);
        return titles.join(' + ');
    }
    stringifyTitle(instruction, navigationInstruction) {
        if (typeof instruction === 'string') {
            return this.resolveTitle(instruction, navigationInstruction);
        }
        const route = instruction.route ?? null;
        const nextInstructions = instruction.nextScopeInstructions;
        let stringified = '';
        // It's a configured route
        if (route !== null) {
            // Already added as part of a configuration, skip to next scope
            if (route === '') {
                return Array.isArray(nextInstructions)
                    ? this.stringifyTitles(nextInstructions, navigationInstruction)
                    : '';
            }
            else {
                stringified += this.resolveTitle(route, navigationInstruction);
            }
        }
        else {
            stringified += this.resolveTitle(instruction, navigationInstruction);
        }
        if (Array.isArray(nextInstructions) && nextInstructions.length > 0) {
            let nextStringified = this.stringifyTitles(nextInstructions, navigationInstruction);
            if (nextStringified.length > 0) {
                if (nextInstructions.length !== 1) { // TODO: This should really also check that the instructions have value
                    nextStringified = "[ " + nextStringified + " ]";
                }
                if (stringified.length > 0) {
                    stringified = this.options.title.componentTitleOrder === 'top-down'
                        ? stringified + this.options.title.componentTitleSeparator + nextStringified
                        : nextStringified + this.options.title.componentTitleSeparator + stringified;
                }
                else {
                    stringified = nextStringified;
                }
            }
        }
        return stringified;
    }
    resolveTitle(instruction, navigationInstruction) {
        let title = '';
        if (typeof instruction === 'string') {
            title = instruction;
        }
        else if (instruction instanceof _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_9__.ViewportInstruction) {
            return instruction.viewport.getTitle(navigationInstruction);
        }
        else if (instruction instanceof _found_route_js__WEBPACK_IMPORTED_MODULE_10__.FoundRoute) {
            const routeTitle = instruction.match?.title;
            if (routeTitle !== void 0) {
                if (typeof routeTitle === 'string') {
                    title = routeTitle;
                }
                else {
                    title = routeTitle.call(instruction, instruction, navigationInstruction);
                }
            }
        }
        if (this.options.title.transformTitle !== void 0) {
            title = this.options.title.transformTitle.call(this, title, instruction);
        }
        return title;
    }
    async freeComponents(instruction, excludeComponents, alreadyDone) {
        const component = instruction.componentInstance;
        const viewport = instruction.viewport;
        if (component === null || viewport === null || alreadyDone.some(done => done === component)) {
            return;
        }
        if (!excludeComponents.some(exclude => exclude === component)) {
            await viewport.freeContent(component);
            alreadyDone.push(component);
            return;
        }
        if (instruction.nextScopeInstructions !== null) {
            for (const nextInstruction of instruction.nextScopeInstructions) {
                await this.freeComponents(nextInstruction, excludeComponents, alreadyDone);
            }
        }
    }
    getClosestContainer(viewModelOrElement) {
        if ('context' in viewModelOrElement) {
            return viewModelOrElement.context;
        }
        if ('$controller' in viewModelOrElement) {
            return viewModelOrElement.$controller.context;
        }
        const controller = this.CustomElementFor(viewModelOrElement);
        if (controller === void 0) {
            return null;
        }
        return controller.context;
    }
    getContainer(viewModelOrContainer) {
        if ('resourceResolvers' in viewModelOrContainer) {
            return viewModelOrContainer;
        }
        if ((0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.isRenderContext)(viewModelOrContainer)) {
            return viewModelOrContainer.get(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IContainer);
        }
        if ('$controller' in viewModelOrContainer) {
            return viewModelOrContainer.$controller.context.get(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IContainer);
        }
        return null;
    }
    // TODO: This is probably wrong since it caused test fails when in CustomElement.for
    // Fred probably knows and will need to look at it
    // This can most likely also be changed so that the node traversal isn't necessary
    CustomElementFor(node) {
        let cur = node;
        while (cur !== null) {
            const nodeResourceName = cur.nodeName.toLowerCase();
            const controller = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.CustomElement.name + ":" + nodeResourceName, cur)
                || _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.CustomElement.name, cur);
            if (controller !== void 0) {
                return controller;
            }
            cur = (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.getEffectiveParentNode)(cur);
        }
        return (void 0);
    }
}
Router.inject = [_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IContainer, _navigator_js__WEBPACK_IMPORTED_MODULE_5__.Navigator, _browser_viewer_store_js__WEBPACK_IMPORTED_MODULE_14__.BrowserViewerStore, _link_handler_js__WEBPACK_IMPORTED_MODULE_3__.LinkHandler, _instruction_resolver_js__WEBPACK_IMPORTED_MODULE_2__.InstructionResolver, _hook_manager_js__WEBPACK_IMPORTED_MODULE_11__.HookManager, _router_options_js__WEBPACK_IMPORTED_MODULE_17__.RouterOptions];
//# sourceMappingURL=router.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/runner.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/runner.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Runner": () => /* binding */ Runner
/* harmony export */ });
/**
 * Class for running a sequence of steps with values,
 * functions and promises. Stays sync if possible.
 *
 * Usage:
 *
 * ```ts
 * const promise = Runner.run(
 *   'one',
 *   prev => `${previous}, two`,
 *   prev => createPromise(prev), // creates a promise that resolves to `${prev}, three`
 * );
 *
 * // Run can be cancelled with Runner.cancel(promise);
 *
 * const stepsRunner = Runner.runner(promise);
 * const result = await promise;
 * if (stepsRunner?.isResolved) { // Make sure promise wasn't rejected
 *   // result === 'one, two, three'
 * }
 * ```
 */
class Runner {
    constructor() {
        this.isDone = false;
        this.isCancelled = false;
        this.isResolved = false;
        this.isRejected = false;
        this.isAsync = false;
    }
    get stop() {
        return this.isCancelled || this.isRejected;
    }
    /**
     * Runs a set of steps and retuns the last value
     *
     * Steps are processed in sequence and can be either a
     *
     * - value - which is then propagated as input into the next step
     * - function - which is executed in time. The result is replacing the step which is then reprocessed
     * - promise - which is awaited
     *
     * ```ts
     * result = await Runner.run(
     *   'one',
     *   prev => `${previous}, two`,
     *   prev => createPromise(prev), // creates a promise that resolves to `${prev}, three`
     * ); // result === 'one, two, three'
     * ```
     *
     */
    static run(...steps) {
        // debugger; // FIX ARRAY CHECK!
        const $runner = new Runner();
        const value = Runner.$run($runner, ...steps);
        if (value instanceof Promise) {
            this.runners.set(value, $runner);
            value.then(() => {
                $runner.isDone = true;
                if ($runner.isAsync && !$runner.stop) {
                    $runner.isResolved = true;
                }
                this.runners.delete(value);
                // console.log('$runner done', $runner, this.runners);
            }).catch(err => { throw err; });
        }
        return value;
    }
    /**
     * Gets the runner for a promise returned by Runner.run
     *
     * The runner can be used to check status and outcome of
     * the run as well as cancel it
     *
     */
    static runner(value) {
        if (value instanceof Promise) {
            return Runner.runners.get(value);
        }
    }
    /**
     * Cancels the runner for a promise returned by Runner.run
     *
     * Once a runner has been cancelled, it's no longer possible
     * to retrieve it from the promise
     *
     */
    static cancel(value) {
        const $runner = Runner.runner(value);
        if ($runner !== void 0) {
            $runner.cancel();
        }
    }
    static runAll(steps) {
        const $runner = new Runner();
        const values = Runner.$runAll($runner, steps);
        if ($runner.isAsync) {
            const promise = Promise.all(values);
            this.runners.set(promise, $runner);
            promise.then(() => {
                $runner.isDone = true;
                if ($runner.isAsync && !$runner.stop) {
                    $runner.isResolved = true;
                }
                this.runners.delete(promise);
                // console.log('$runner done', $runner, this.runners);
            }).catch(err => { throw err; });
            return promise;
        }
        return values;
    }
    static runOne(step) {
        let value;
        // Iteratively resolve Functions (until value or Promise)
        while (step instanceof Function) {
            step = step(value);
            if (!(step instanceof Function) && !(step instanceof Promise)) { // === isValue(step)
                value = step;
            }
        }
        // In case there wasn't a Function before the value
        if (!(step instanceof Function) && !(step instanceof Promise)) { // === isValue(step)
            value = step;
        }
        // If we've got a Promise, run the remaining
        if (step instanceof Promise) {
            return step.then((resolvedValue) => {
                return Runner.runOne(resolvedValue);
            }).catch((err) => { throw err; });
        }
        return value;
    }
    cancel() {
        this.isCancelled = true;
    }
    static $run($runner, ...steps) {
        let step;
        while (steps.length > 0 && !$runner.stop) {
            step = steps.shift();
            // Iteratively resolve Functions (until value or Promise)
            while (step instanceof Function && !$runner.stop) {
                step = step($runner.value);
                if (!(step instanceof Function) && !(step instanceof Promise)) { // === isValue(step)
                    $runner.value = step;
                }
            }
            // In case there wasn't a Function before the value
            if (!(step instanceof Function) && !(step instanceof Promise)) { // === isValue(step)
                $runner.value = step;
            }
            // Run steps until done or we get a Promise
            if (step instanceof Promise) {
                break;
            }
        }
        // If we've got a Promise, run the remaining
        if (step instanceof Promise && !$runner.stop) {
            $runner.isAsync = true;
            return step.then((resolvedValue) => {
                return Runner.$run($runner, resolvedValue, ...steps);
            }).catch((err) => {
                $runner.isRejected = true;
                throw err;
            });
        }
        return $runner.value;
    }
    static $runAll($runner, steps) {
        const results = new Array(steps.length);
        steps.forEach((step, index) => {
            // Iteratively resolve Functions (until value or Promise)
            while (step instanceof Function) {
                step = step(results[index]);
                if (!(step instanceof Function) && !(step instanceof Promise)) { // === isValue(step)
                    results[index] = step;
                }
            }
            // In case there wasn't a Function before the value
            if (!(step instanceof Function)) { // === isValue(step)
                results[index] = step;
            }
            // If we've got a Promise, run the remaining
            if (step instanceof Promise) {
                $runner.isAsync = true;
            }
        });
        return results;
    }
}
Runner.runners = new WeakMap();
//# sourceMappingURL=runner.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/scope.js":
/*!********************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/scope.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Scope": () => /* binding */ Scope
/* harmony export */ });
/* harmony import */ var _viewport_scope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./viewport-scope.js */ "./node_modules/@aurelia/router/dist/esm/viewport-scope.js");
/* harmony import */ var _found_route_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./found-route.js */ "./node_modules/@aurelia/router/dist/esm/found-route.js");
/* harmony import */ var _type_resolvers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-resolvers.js */ "./node_modules/@aurelia/router/dist/esm/type-resolvers.js");
/* harmony import */ var _viewport_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./viewport.js */ "./node_modules/@aurelia/router/dist/esm/viewport.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@aurelia/router/dist/esm/utils.js");
/* harmony import */ var _collection_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./collection.js */ "./node_modules/@aurelia/router/dist/esm/collection.js");
/* harmony import */ var _route_recognizer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./route-recognizer.js */ "./node_modules/@aurelia/router/dist/esm/route-recognizer.js");
/* harmony import */ var _runner_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./runner.js */ "./node_modules/@aurelia/router/dist/esm/runner.js");








/**
 * @internal - Shouldn't be used directly
 */
class Scope {
    constructor(router, hasScope, owningScope, viewport = null, viewportScope = null, rootComponentType = null) {
        this.router = router;
        this.hasScope = hasScope;
        this.owningScope = owningScope;
        this.viewport = viewport;
        this.viewportScope = viewportScope;
        this.rootComponentType = rootComponentType;
        this.id = '.';
        this.parent = null;
        this.children = [];
        this.replacedChildren = [];
        this.path = null;
        this.enabled = true;
        // Support collection feature in viewport scopes
        this.childCollections = {};
        this.owningScope = owningScope ?? this;
        this.scope = this.hasScope ? this : this.owningScope.scope;
        // console.log('Created scope', this.toString());
    }
    toString(recurse = false) {
        return `${this.owningScope !== this ? this.owningScope.toString() : ''}/${this.owner.toString()}` +
            // eslint-disable-next-line prefer-template
            `${recurse ? `\n` + this.children.map(child => child.toString(true)).join('') : ''}`;
    }
    get isViewport() {
        return this.viewport !== null;
    }
    get isViewportScope() {
        return this.viewportScope !== null;
    }
    get passThroughScope() {
        return this.isViewportScope && this.viewportScope.passThroughScope;
    }
    get owner() {
        if (this.isViewport) {
            return this.viewport;
        }
        if (this.isViewportScope) {
            return this.viewportScope;
        }
        return null;
    }
    get enabledChildren() {
        return this.children.filter(scope => scope.enabled);
    }
    get hoistedChildren() {
        const scopes = this.enabledChildren;
        while (scopes.some(scope => scope.passThroughScope)) {
            for (const scope of scopes.slice()) {
                if (scope.passThroughScope) {
                    const index = scopes.indexOf(scope);
                    scopes.splice(index, 1, ...scope.enabledChildren);
                }
            }
        }
        return scopes;
    }
    get enabledViewports() {
        return this.children
            .filter(scope => scope.isViewport && scope.enabled)
            .map(scope => scope.viewport);
    }
    get viewportInstruction() {
        if (this.isViewportScope) {
            return this.viewportScope.content;
        }
        if (this.isViewport) {
            return this.viewport.content.content;
        }
        return null;
    }
    get parentNextContentAction() {
        if (this.parent === null) {
            return '';
        }
        const parentAction = this.parent.owner.nextContentAction;
        if (parentAction === 'swap' || parentAction === 'skip') {
            return parentAction;
        }
        return this.parent.parentNextContentAction;
    }
    getEnabledViewports(viewportScopes) {
        return viewportScopes
            .filter(scope => !scope.isViewportScope)
            .map(scope => scope.viewport)
            .reduce((viewports, viewport) => {
            viewports[viewport.name] = viewport;
            return viewports;
        }, {});
    }
    getOwnedViewports(includeDisabled = false) {
        return this.allViewports(includeDisabled).filter(viewport => viewport.owningScope === this);
    }
    getOwnedScopes(includeDisabled = false) {
        const scopes = this.allScopes(includeDisabled).filter(scope => scope.owningScope === this);
        // Hoist children to pass through scopes
        for (const scope of scopes.slice()) {
            if (scope.passThroughScope) {
                const index = scopes.indexOf(scope);
                scopes.splice(index, 1, ...scope.getOwnedScopes());
            }
        }
        return scopes;
    }
    findInstructions(instruction) {
        let route = new _found_route_js__WEBPACK_IMPORTED_MODULE_1__.FoundRoute();
        if (typeof instruction === 'string') {
            const instructions = this.router.instructionResolver.parseViewportInstructions(instruction);
            if (this.router.options.useConfiguredRoutes && !this.router.hasSiblingInstructions(instructions)) {
                const foundRoute = this.findMatchingRoute(instruction);
                if (foundRoute?.foundConfiguration ?? false) {
                    route = foundRoute;
                }
                else {
                    if (this.router.options.useDirectRoutes) {
                        route.instructions = instructions;
                        if (route.instructions.length > 0) {
                            const nextInstructions = route.instructions[0].nextScopeInstructions ?? [];
                            route.remaining = this.router.instructionResolver.stringifyViewportInstructions(nextInstructions);
                            // TODO: Verify that it's okay to leave this in
                            route.instructions[0].nextScopeInstructions = null;
                        }
                    }
                }
            }
            else if (this.router.options.useDirectRoutes) {
                route.instructions = instructions;
            }
        }
        else {
            route.instructions = instruction;
        }
        for (const instr of route.instructions) {
            if (instr.scope === null) {
                instr.scope = this;
            }
        }
        return route;
    }
    // Note: This can't change state other than the instructions!
    findViewports(instructions, alreadyFound, disregardViewports = false) {
        const foundViewports = [];
        let remainingInstructions = [];
        const ownedScopes = this.getOwnedScopes();
        // Get a shallow copy of all available manual viewport scopes
        const viewportScopes = ownedScopes.filter(scope => scope.isViewportScope).map(scope => scope.viewportScope);
        const availableViewportScopes = viewportScopes.filter(viewportScope => alreadyFound.every(found => found.viewportScope !== viewportScope));
        // Get a shallow copy of all available viewports
        const availableViewports = { ...this.getEnabledViewports(ownedScopes) };
        for (const instruction of alreadyFound.filter(found => found.scope === this)) {
            availableViewports[instruction.viewportName] = null;
        }
        const viewportInstructions = new _collection_js__WEBPACK_IMPORTED_MODULE_5__.Collection(...instructions.slice());
        let instruction = null;
        // The viewport scope is already known
        while ((instruction = viewportInstructions.next()) !== null) {
            if (instruction.viewportScope !== null && !this.router.instructionResolver.isAddViewportInstruction(instruction)) {
                remainingInstructions.push(...this.foundViewportScope(instruction, instruction.viewportScope));
                foundViewports.push(instruction);
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.arrayRemove)(availableViewportScopes, available => available === instruction.viewportScope);
                viewportInstructions.removeCurrent();
            }
        }
        // The viewport is already known
        if (!disregardViewports) {
            while ((instruction = viewportInstructions.next()) !== null) {
                if (instruction.viewport !== null) {
                    remainingInstructions.push(...this.foundViewport(instruction, instruction.viewport, disregardViewports));
                    foundViewports.push(instruction);
                    availableViewports[instruction.viewport.name] = null;
                    viewportInstructions.removeCurrent();
                }
            }
        }
        // Viewport scopes have priority
        while ((instruction = viewportInstructions.next()) !== null) {
            for (let viewportScope of viewportScopes) {
                if (viewportScope.acceptSegment(instruction.componentName)) {
                    if (Array.isArray(viewportScope.source)) {
                        // console.log('available', viewportScope.available, source);
                        let available = availableViewportScopes.find(available => available.name === viewportScope.name);
                        if (available === void 0 || this.router.instructionResolver.isAddViewportInstruction(instruction)) {
                            const item = viewportScope.addSourceItem();
                            available = this.getOwnedScopes()
                                .filter(scope => scope.isViewportScope)
                                .map(scope => scope.viewportScope)
                                .find(viewportScope => viewportScope.sourceItem === item);
                        }
                        viewportScope = available;
                    }
                    remainingInstructions.push(...this.foundViewportScope(instruction, viewportScope));
                    foundViewports.push(instruction);
                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.arrayRemove)(availableViewportScopes, available => available === instruction.viewportScope);
                    viewportInstructions.removeCurrent();
                    break;
                }
            }
        }
        // Configured viewport is ruling
        while ((instruction = viewportInstructions.next()) !== null) {
            instruction.needsViewportDescribed = true;
            for (const name in availableViewports) {
                const viewport = availableViewports[name];
                // TODO: Also check if (resolved) component wants a specific viewport
                if (viewport?.wantComponent(instruction.componentName)) {
                    const remaining = this.foundViewport(instruction, viewport, disregardViewports, true);
                    foundViewports.push(instruction);
                    remainingInstructions.push(...remaining);
                    availableViewports[name] = null;
                    viewportInstructions.removeCurrent();
                    break;
                }
            }
        }
        // Next in line is specified viewport (but not if we're disregarding viewports)
        if (!disregardViewports) {
            while ((instruction = viewportInstructions.next()) !== null) {
                const name = instruction.viewportName;
                if (!name || !name.length) {
                    continue;
                }
                const newScope = instruction.ownsScope;
                if (!this.getEnabledViewports(ownedScopes)[name]) {
                    continue;
                    // TODO: No longer pre-creating viewports. Evaluate!
                    this.addViewport(name, null, { scope: newScope, forceDescription: true });
                    availableViewports[name] = this.getEnabledViewports(ownedScopes)[name];
                }
                const viewport = availableViewports[name];
                if (viewport?.acceptComponent(instruction.componentName)) {
                    const remaining = this.foundViewport(instruction, viewport, disregardViewports, true);
                    foundViewports.push(instruction);
                    remainingInstructions.push(...remaining);
                    availableViewports[name] = null;
                    viewportInstructions.removeCurrent();
                }
            }
        }
        // Finally, only one accepting viewport left?
        while ((instruction = viewportInstructions.next()) !== null) {
            const remainingViewports = [];
            for (const name in availableViewports) {
                const viewport = availableViewports[name];
                if (viewport?.acceptComponent(instruction.componentName)) {
                    remainingViewports.push(viewport);
                }
            }
            if (remainingViewports.length === 1) {
                const viewport = remainingViewports.shift();
                const remaining = this.foundViewport(instruction, viewport, disregardViewports, true);
                foundViewports.push(instruction);
                remainingInstructions.push(...remaining);
                availableViewports[viewport.name] = null;
                viewportInstructions.removeCurrent();
            }
        }
        // If we're ignoring viewports, we now match them anyway
        if (disregardViewports) {
            while ((instruction = viewportInstructions.next()) !== null) {
                let viewport = instruction.viewport;
                if (!viewport) {
                    const name = instruction.viewportName;
                    if ((name?.length ?? 0) === 0) {
                        continue;
                    }
                    const newScope = instruction.ownsScope;
                    if (!this.getEnabledViewports(ownedScopes)[name]) {
                        continue;
                        // TODO: No longer pre-creating viewports. Evaluate!
                        this.addViewport(name, null, { scope: newScope, forceDescription: true });
                        availableViewports[name] = this.getEnabledViewports(ownedScopes)[name];
                    }
                    viewport = availableViewports[name];
                }
                if (viewport?.acceptComponent(instruction.componentName)) {
                    const remaining = this.foundViewport(instruction, viewport, disregardViewports);
                    foundViewports.push(instruction);
                    remainingInstructions.push(...remaining);
                    availableViewports[viewport.name] = null;
                    viewportInstructions.removeCurrent();
                }
            }
        }
        remainingInstructions = [...viewportInstructions, ...remainingInstructions];
        return {
            foundViewports,
            remainingInstructions,
        };
    }
    foundViewportScope(instruction, viewportScope) {
        instruction.viewportScope = viewportScope;
        instruction.needsViewportDescribed = false;
        const remaining = instruction.nextScopeInstructions?.slice() ?? [];
        for (const rem of remaining) {
            if (rem.scope === null) {
                rem.scope = viewportScope.scope.scope;
            }
        }
        return remaining;
    }
    foundViewport(instruction, viewport, withoutViewports, doesntNeedViewportDescribed = false) {
        instruction.setViewport(viewport);
        if (doesntNeedViewportDescribed) {
            instruction.needsViewportDescribed = false;
        }
        const remaining = instruction.nextScopeInstructions?.slice() ?? [];
        for (const rem of remaining) {
            if (rem.scope === null) {
                rem.scope = viewport.scope;
            }
        }
        return remaining;
    }
    addViewport(name, connectedCE, options = {}) {
        let viewport = this.getEnabledViewports(this.getOwnedScopes())[name];
        // Each au-viewport element has its own Viewport
        if (((connectedCE ?? null) !== null) &&
            ((viewport?.connectedCE ?? null) !== null) &&
            viewport.connectedCE !== connectedCE) {
            viewport.enabled = false;
            viewport = this.getOwnedViewports(true).find(child => child.name === name && child.connectedCE === connectedCE) ?? null;
            if ((viewport ?? null) !== null) {
                viewport.enabled = true;
            }
        }
        if ((viewport ?? null) === null) {
            viewport = new _viewport_js__WEBPACK_IMPORTED_MODULE_3__.Viewport(this.router, name, connectedCE, this.scope, !!options.scope, options);
            this.addChild(viewport.connectedScope);
        }
        if ((connectedCE ?? null) !== null) {
            viewport.setConnectedCE(connectedCE, options);
        }
        return viewport;
    }
    removeViewport(viewport, connectedCE) {
        if (((connectedCE ?? null) !== null) || viewport.remove(connectedCE)) {
            this.removeChild(viewport.connectedScope);
            return true;
        }
        return false;
    }
    addViewportScope(name, connectedCE, options = {}) {
        const viewportScope = new _viewport_scope_js__WEBPACK_IMPORTED_MODULE_0__.ViewportScope(name, this.router, connectedCE, this.scope, true, null, options);
        this.addChild(viewportScope.connectedScope);
        return viewportScope;
    }
    removeViewportScope(viewportScope) {
        // viewportScope.remove();
        this.removeChild(viewportScope.connectedScope);
        return true;
    }
    addChild(scope) {
        if (!this.children.some(vp => vp === scope)) {
            if (scope.parent !== null) {
                scope.parent.removeChild(scope);
            }
            this.children.push(scope);
            scope.parent = this;
        }
    }
    removeChild(scope) {
        const index = this.children.indexOf(scope);
        if (index >= 0) {
            this.children.splice(index, 1);
            scope.parent = null;
        }
    }
    clearReplacedChildren() {
        this.replacedChildren = [];
    }
    disableReplacedChildren() {
        this.replacedChildren = this.enabledChildren;
        for (const scope of this.replacedChildren) {
            scope.enabled = false;
        }
    }
    reenableReplacedChildren() {
        for (const scope of this.replacedChildren) {
            scope.enabled = true;
        }
    }
    allViewports(includeDisabled = false, includeReplaced = false) {
        return this.allScopes(includeDisabled, includeReplaced).filter(scope => scope.isViewport).map(scope => scope.viewport);
    }
    allScopes(includeDisabled = false, includeReplaced = false) {
        const scopes = includeDisabled ? this.children.slice() : this.enabledChildren;
        for (const scope of scopes.slice()) {
            scopes.push(...scope.allScopes(includeDisabled, includeReplaced));
        }
        return scopes;
    }
    reparentViewportInstructions() {
        const scopes = this.hoistedChildren
            .filter(scope => scope.viewportInstruction !== null && scope.viewportInstruction.componentName);
        if (!scopes.length) {
            return null;
        }
        for (const scope of scopes) {
            const childInstructions = scope.reparentViewportInstructions();
            scope.viewportInstruction.nextScopeInstructions =
                childInstructions !== null && childInstructions.length > 0 ? childInstructions : null;
        }
        return scopes.map(scope => scope.viewportInstruction);
    }
    findMatchingRoute(path) {
        if (this.isViewportScope && !this.passThroughScope) {
            return this.findMatchingRouteInRoutes(path, this.viewportScope.getRoutes());
        }
        if (this.isViewport) {
            return this.findMatchingRouteInRoutes(path, this.viewport.getRoutes());
        }
        // TODO: Match specified names here
        for (const child of this.enabledChildren) {
            const found = child.findMatchingRoute(path);
            if (found !== null) {
                return found;
            }
        }
        return null;
    }
    canLoad(recurse) {
        const results = _runner_js__WEBPACK_IMPORTED_MODULE_7__.Runner.runAll(this.children.map(child => child.viewport !== null
            ? child.viewport.canLoad(recurse)
            : child.canLoad(recurse)));
        if (results instanceof Promise) {
            return results.then(resolvedResults => resolvedResults.every(result => result));
        }
        return results.every(result => result);
    }
    canUnload() {
        const results = _runner_js__WEBPACK_IMPORTED_MODULE_7__.Runner.runAll(this.children.map(child => child.viewport !== null
            ? child.viewport.canUnload()
            : child.canUnload()));
        if (results instanceof Promise) {
            return results.then(resolvedResults => {
                return resolvedResults.every(result => result);
            });
        }
        return results.every(result => result);
    }
    load(recurse) {
        const results = _runner_js__WEBPACK_IMPORTED_MODULE_7__.Runner.runAll(this.children.map(child => child.viewport !== null
            ? child.viewport.load(recurse)
            : child.load(recurse)));
        if (results instanceof Promise) {
            return results;
        }
    }
    unload(recurse) {
        const results = _runner_js__WEBPACK_IMPORTED_MODULE_7__.Runner.runAll(this.children.map(child => child.viewport !== null
            ? child.viewport.unload(recurse)
            : child.unload(recurse)));
        if (results instanceof Promise) {
            return results;
        }
    }
    removeContent() {
        const results = _runner_js__WEBPACK_IMPORTED_MODULE_7__.Runner.runAll(this.children.map(child => child.viewport !== null
            ? child.viewport.removeContent()
            : child.removeContent()));
        if (results instanceof Promise) {
            return results;
        }
    }
    findMatchingRouteInRoutes(path, routes) {
        if (!Array.isArray(routes)) {
            return null;
        }
        routes = routes.map(route => this.ensureProperRoute(route));
        const cRoutes = routes.map(route => ({
            path: route.path,
            handler: route,
        }));
        for (let i = 0, ii = cRoutes.length; i < ii; ++i) {
            const cRoute = cRoutes[i];
            cRoutes.push({
                ...cRoute,
                path: `${cRoute.path}/*remainingPath`,
            });
        }
        const found = new _found_route_js__WEBPACK_IMPORTED_MODULE_1__.FoundRoute();
        if (path.startsWith('/') || path.startsWith('+')) {
            path = path.slice(1);
        }
        const recognizer = new _route_recognizer_js__WEBPACK_IMPORTED_MODULE_6__.RouteRecognizer();
        recognizer.add(cRoutes);
        const result = recognizer.recognize(path);
        if (result !== null) {
            found.match = result.endpoint.route.handler;
            found.matching = path;
            const $params = { ...result.params };
            if ($params.remainingPath !== void 0) {
                found.remaining = $params.remainingPath;
                Reflect.deleteProperty($params, 'remainingPath');
                found.matching = found.matching.slice(0, found.matching.indexOf(found.remaining));
            }
            found.params = $params;
        }
        if (found.foundConfiguration) {
            // clone it so config doesn't get modified
            found.instructions = this.router.instructionResolver.cloneViewportInstructions(found.match.instructions, false, true);
            const instructions = found.instructions.slice();
            while (instructions.length > 0) {
                const instruction = instructions.shift();
                instruction.addParameters(found.params);
                instruction.route = '';
                if (instruction.nextScopeInstructions !== null) {
                    instructions.unshift(...instruction.nextScopeInstructions);
                }
            }
            if (found.instructions.length > 0) {
                found.instructions[0].route = found;
            }
        }
        return found;
    }
    ensureProperRoute(route) {
        if (route.id === void 0) {
            route.id = route.path;
        }
        if (route.instructions === void 0) {
            route.instructions = [{
                    component: route.component,
                    viewport: route.viewport,
                    parameters: route.parameters,
                    children: route.children,
                }];
        }
        route.instructions = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_2__.NavigationInstructionResolver.toViewportInstructions(this.router, route.instructions);
        return route;
    }
}
//# sourceMappingURL=scope.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/state-coordinator.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/state-coordinator.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Entity": () => /* binding */ Entity,
/* harmony export */   "StateCoordinator": () => /* binding */ StateCoordinator
/* harmony export */ });
/* harmony import */ var _open_promise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./open-promise.js */ "./node_modules/@aurelia/router/dist/esm/open-promise.js");

class Entity {
    constructor(entity) {
        this.entity = entity;
        this.running = false;
        this.states = [];
        this.checkedStates = [];
        this.syncState = null;
        this.syncPromise = null;
    }
}
class StateCoordinator {
    constructor() {
        this.entities = [];
        this.hasAllEntities = false;
        this.syncStates = new Map();
        this.checkedSyncStates = new Set();
    }
    // public constructor(@ILogger private readonly logger: ILogger) {
    //   this.logger = logger.root.scopeTo('StateCoordinator');
    //   this.logger.trace('constructor()');
    // }
    addSyncState(state) {
        const openPromise = new _open_promise_js__WEBPACK_IMPORTED_MODULE_0__.OpenPromise();
        this.syncStates.set(state, openPromise);
    }
    addEntity(entity) {
        // console.log('Entity received', entity);
        const ent = new Entity(entity);
        this.entities.push(ent);
        this.resetSyncStates();
        return ent;
    }
    addEntityState(entity, state) {
        // console.log(`#### EntityState received ${state}`, (entity as any).name);
        let ent = this.entities.find(e => e.entity === entity);
        if (ent === void 0) {
            ent = this.addEntity(entity);
        }
        ent.states.push(state);
        this.checkSyncState(state);
    }
    syncState(state, entity = null) {
        const openPromise = this.syncStates.get(state);
        if (openPromise === void 0) {
            return;
        }
        if (entity !== null) {
            const ent = this.entities.find(e => e.entity === entity);
            if (ent?.syncPromise === null && openPromise.isPending) {
                ent.syncState = state;
                ent.syncPromise = new _open_promise_js__WEBPACK_IMPORTED_MODULE_0__.OpenPromise();
                ent.checkedStates.push(state);
                this.checkedSyncStates.add(state);
                Promise.resolve().then(() => { this.checkSyncState(state); }).catch(err => { throw err; });
                return ent.syncPromise.promise;
            }
        }
        // this.checkSyncState(state);
        return openPromise.promise;
    }
    checkingSyncState(state) {
        return this.syncStates.has(state);
    }
    finalEntity() {
        this.hasAllEntities = true;
        // console.log('Final entity received', this.entities.length);
        this.syncStates.forEach((_promise, state) => this.checkSyncState(state));
    }
    finalize() { }
    cancel() { }
    // A new navigation should cancel replaced instructions
    cancelReplaced(navigation) { }
    checkSyncState(state) {
        // console.log('StateCoordinator check state', state, this);
        const openPromise = this.syncStates.get(state);
        if (openPromise === void 0) {
            return;
        }
        if (this.hasAllEntities &&
            openPromise.isPending &&
            // Check that this state has been done by all state entities and if so resolve the promise
            this.entities.every(ent => ent.states.includes(state)) &&
            // Check that this state has been checked (reached) by all state entities and if so resolve the promise
            (!this.checkedSyncStates.has(state) || this.entities.every(ent => ent.checkedStates.includes(state)))) {
            for (const entity of this.entities) {
                if (entity.syncState === state) {
                    // console.log('Resolving entity promise for ', state, (entity.entity as any).toString());
                    entity.syncPromise?.resolve();
                    entity.syncPromise = null;
                    entity.syncState = null;
                }
            }
            openPromise.resolve();
            // console.log('#### StateCoordinator state resolved', state /*, this */);
        }
    }
    resetSyncStates() {
        this.syncStates.forEach((promise, state) => {
            if (!promise.isPending &&
                !this.entities.every(entity => entity.states.includes(state))) {
                this.addSyncState(state);
            }
        });
    }
}
//# sourceMappingURL=state-coordinator.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/task-queue.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/task-queue.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "QueueTask": () => /* binding */ QueueTask,
/* harmony export */   "TaskQueue": () => /* binding */ TaskQueue
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

/**
 * @internal - Shouldn't be used directly
 */
class QueueTask {
    constructor(taskQueue, item, cost = 0) {
        this.taskQueue = taskQueue;
        this.item = item;
        this.cost = cost;
        this.done = false;
        this.promise = new Promise((resolve, reject) => {
            this.resolve = () => {
                this.taskQueue.resolve(this, resolve);
            };
            this.reject = (reason) => {
                this.taskQueue.reject(this, reject, reason);
            };
        });
    }
    async execute() {
        if ('execute' in this.item) {
            await this.item.execute(this);
        }
        else {
            await this.item(this);
        }
    }
    wait() {
        return this.promise;
    }
}
/**
 * A first-in-first-out task queue that only processes the next queued item
 * when the current one has been resolved or rejected. If a callback function
 * is specified, it receives the queued items as tasks one at a time. If no
 * callback is specified, the tasks themselves are either executed (if a
 * function) or the execute method in them are run. The executed function
 * should resolve or reject the task when processing is done.
 * Enqueued items' tasks can be awaited. Enqueued items can specify an
 * (arbitrary) execution cost and the queue can be set up (started) to
 * only process a specific amount of execution cost per RAF/tick.
 *
 * @internal - Shouldn't be used directly.
 */
class TaskQueue {
    constructor(callback) {
        this.callback = callback;
        this.pending = [];
        this.processing = null;
        this.allowedExecutionCostWithinTick = null;
        this.currentExecutionCostInCurrentTick = 0;
        this.platform = null;
        this.task = null;
    }
    get isActive() {
        return this.task !== null;
    }
    get length() {
        return this.pending.length;
    }
    start(options) {
        if (this.isActive) {
            throw new Error('TaskQueue has already been started');
        }
        this.platform = options.platform;
        this.allowedExecutionCostWithinTick = options.allowedExecutionCostWithinTick;
        this.task = this.platform.domWriteQueue.queueTask(this.dequeue, { persistent: true });
    }
    stop() {
        if (!this.isActive) {
            throw new Error('TaskQueue has not been started');
        }
        this.task.cancel();
        this.task = null;
        this.allowedExecutionCostWithinTick = null;
        this.clear();
    }
    enqueue(itemOrItems, costOrCosts) {
        const list = Array.isArray(itemOrItems);
        const items = (list ? itemOrItems : [itemOrItems]);
        const costs = items
            .map((value, index) => !Array.isArray(costOrCosts) ? costOrCosts : costOrCosts[index])
            .map((value) => value !== undefined ? value : 1);
        const tasks = [];
        for (const item of items) {
            tasks.push(item instanceof QueueTask
                ? item
                : this.createQueueTask(item, costs.shift())); // TODO: Get cancellable in as well
        }
        this.pending.push(...tasks);
        this.dequeue();
        return list ? tasks : tasks[0];
    }
    createQueueTask(item, cost) {
        return new QueueTask(this, item, cost);
    }
    dequeue(delta) {
        if (this.processing !== null) {
            return;
        }
        if (delta !== undefined) {
            this.currentExecutionCostInCurrentTick = 0;
        }
        if (!this.pending.length) {
            return;
        }
        if (this.allowedExecutionCostWithinTick !== null && delta === undefined && this.currentExecutionCostInCurrentTick + (this.pending[0].cost || 0) > this.allowedExecutionCostWithinTick) {
            return;
        }
        this.processing = this.pending.shift() || null;
        if (this.processing) {
            this.currentExecutionCostInCurrentTick += this.processing.cost ?? 0;
            if (this.callback !== void 0) {
                this.callback(this.processing);
            }
            else {
                // Don't need to await this since next task won't be dequeued until
                // executed function is resolved
                this.processing.execute().catch(error => { throw error; });
            }
        }
    }
    clear() {
        this.pending.splice(0, this.pending.length);
    }
    resolve(task, resolve) {
        resolve();
        this.processing = null;
        this.dequeue();
    }
    reject(task, reject, reason) {
        reject(reason);
        this.processing = null;
        this.dequeue();
    }
}
__decorate([
    _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.bound
], TaskQueue.prototype, "dequeue", null);
//# sourceMappingURL=task-queue.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/type-resolvers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/type-resolvers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentAppellationResolver": () => /* binding */ ComponentAppellationResolver,
/* harmony export */   "ViewportHandleResolver": () => /* binding */ ViewportHandleResolver,
/* harmony export */   "NavigationInstructionResolver": () => /* binding */ NavigationInstructionResolver
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _viewport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./viewport.js */ "./node_modules/@aurelia/router/dist/esm/viewport.js");
/* harmony import */ var _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./viewport-instruction.js */ "./node_modules/@aurelia/router/dist/esm/viewport-instruction.js");



const ComponentAppellationResolver = {
    isName(component) {
        return typeof component === 'string';
    },
    isType(component) {
        return _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.isType(component);
    },
    isInstance(component) {
        return !ComponentAppellationResolver.isName(component) && !ComponentAppellationResolver.isType(component);
    },
    getName(component) {
        if (ComponentAppellationResolver.isName(component)) {
            return component;
        }
        else if (ComponentAppellationResolver.isType(component)) {
            return _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.getDefinition(component).name;
        }
        else {
            return ComponentAppellationResolver.getName(component.constructor);
        }
    },
    getType(component) {
        if (ComponentAppellationResolver.isName(component)) {
            return null;
        }
        else if (ComponentAppellationResolver.isType(component)) {
            return component;
        }
        else {
            return component.constructor;
        }
    },
    getInstance(component) {
        if (ComponentAppellationResolver.isName(component) || ComponentAppellationResolver.isType(component)) {
            return null;
        }
        else {
            return component;
        }
    },
};
const ViewportHandleResolver = {
    isName(viewport) {
        return typeof viewport === 'string';
    },
    isInstance(viewport) {
        return viewport instanceof _viewport_js__WEBPACK_IMPORTED_MODULE_1__.Viewport;
    },
    getName(viewport) {
        if (ViewportHandleResolver.isName(viewport)) {
            return viewport;
        }
        else {
            return viewport ? (viewport).name : null;
        }
    },
    getInstance(viewport) {
        if (ViewportHandleResolver.isName(viewport)) {
            return null;
        }
        else {
            return viewport;
        }
    },
};
const NavigationInstructionResolver = {
    createViewportInstructions(router, navigationInstructions, options) {
        options = options || {};
        let scope = null;
        if (options.context) {
            scope = router.findScope(options.context);
            if (typeof navigationInstructions === 'string') {
                // If it's not from scope root, figure out which scope
                if (!navigationInstructions.startsWith('/')) {
                    // Scope modifications
                    if (navigationInstructions.startsWith('.')) {
                        // The same as no scope modification
                        if (navigationInstructions.startsWith('./')) {
                            navigationInstructions = navigationInstructions.slice(2);
                        }
                        // Find out how many scopes upwards we should move
                        while (navigationInstructions.startsWith('../')) {
                            scope = scope.parent || scope;
                            navigationInstructions = navigationInstructions.slice(3);
                        }
                    }
                    if (scope.path !== null) {
                        navigationInstructions = `${scope.path}/${navigationInstructions}`;
                        scope = router.rootScope.scope;
                    }
                }
                else { // Specified root scope with /
                    scope = router.rootScope.scope;
                }
            }
            else {
                navigationInstructions = NavigationInstructionResolver.toViewportInstructions(router, navigationInstructions);
                for (const instruction of navigationInstructions) {
                    if (instruction.scope === null) {
                        instruction.scope = scope;
                    }
                }
            }
        }
        return {
            instructions: navigationInstructions,
            scope,
        };
    },
    toViewportInstructions(router, navigationInstructions) {
        if (!Array.isArray(navigationInstructions)) {
            return NavigationInstructionResolver.toViewportInstructions(router, [navigationInstructions]);
        }
        const instructions = [];
        for (const instruction of navigationInstructions) {
            if (typeof instruction === 'string') {
                instructions.push(...router.instructionResolver.parseViewportInstructions(instruction));
            }
            else if (instruction instanceof _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_2__.ViewportInstruction) {
                instructions.push(instruction);
            }
            else if (instruction.component) {
                const viewportComponent = instruction;
                const newInstruction = router.createViewportInstruction(viewportComponent.component, viewportComponent.viewport, viewportComponent.parameters);
                if (viewportComponent.children !== void 0 && viewportComponent.children !== null) {
                    newInstruction.nextScopeInstructions = NavigationInstructionResolver.toViewportInstructions(router, viewportComponent.children);
                }
                instructions.push(newInstruction);
            }
            else {
                instructions.push(router.createViewportInstruction(instruction));
            }
        }
        return instructions;
    },
};
//# sourceMappingURL=type-resolvers.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrayRemove": () => /* binding */ arrayRemove,
/* harmony export */   "resolvePossiblePromise": () => /* binding */ resolvePossiblePromise,
/* harmony export */   "deprecationWarning": () => /* binding */ deprecationWarning
/* harmony export */ });
/**
 * @internal - Shouldn't be used directly
 */
function arrayRemove(arr, func) {
    const removed = [];
    let arrIndex = arr.findIndex(func);
    while (arrIndex >= 0) {
        removed.push(arr.splice(arrIndex, 1)[0]);
        arrIndex = arr.findIndex(func);
    }
    return removed;
}
function resolvePossiblePromise(value, callback) {
    // If we've got a Promise, wait for it's resolve
    if (value instanceof Promise) {
        return value.then((resolvedValue) => {
            if (callback !== void 0) {
                callback(resolvedValue);
            }
            return resolvedValue;
        });
    }
    if (callback !== void 0) {
        callback(value);
    }
    return value;
}
function deprecationWarning(oldFeature, newFeature) {
    console.warn(`[Deprecated] The ${oldFeature} has been deprecated. Please use the ${newFeature} instead.`);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/viewport-content.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/viewport-content.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContentStatus": () => /* binding */ ContentStatus,
/* harmony export */   "ViewportContent": () => /* binding */ ViewportContent
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser.js */ "./node_modules/@aurelia/router/dist/esm/parser.js");
/* harmony import */ var _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./viewport-instruction.js */ "./node_modules/@aurelia/router/dist/esm/viewport-instruction.js");
/* harmony import */ var _navigation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./navigation.js */ "./node_modules/@aurelia/router/dist/esm/navigation.js");
/* harmony import */ var _runner_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./runner.js */ "./node_modules/@aurelia/router/dist/esm/runner.js");
/* harmony import */ var _awaitable_map_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./awaitable-map.js */ "./node_modules/@aurelia/router/dist/esm/awaitable-map.js");






/**
 * @internal - Shouldn't be used directly
 */
var ContentStatus;
(function (ContentStatus) {
    ContentStatus[ContentStatus["none"] = 0] = "none";
    ContentStatus[ContentStatus["created"] = 1] = "created";
    ContentStatus[ContentStatus["activated"] = 3] = "activated";
})(ContentStatus || (ContentStatus = {}));
/**
 * @internal - Shouldn't be used directly
 */
class ViewportContent {
    constructor(
    // Can (and wants) be a (resolved) type or a string (to be resolved later)
    // public content: ViewportInstruction = new ViewportInstruction(''),
    content = _viewport_instruction_js__WEBPACK_IMPORTED_MODULE_2__.ViewportInstruction.create(null, ''), instruction = new _navigation_js__WEBPACK_IMPORTED_MODULE_3__.Navigation({
        instruction: '',
        fullStateInstruction: '',
    }), connectedCE = null) {
        this.content = content;
        this.instruction = instruction;
        // public contentStatus: ContentStatus = ContentStatus.none;
        this.contentStates = new _awaitable_map_js__WEBPACK_IMPORTED_MODULE_5__.AwaitableMap();
        // public contentStates: Map<ContentState, undefined> = new Map();
        this.loaded = false;
        this.fromCache = false;
        this.fromHistory = false;
        this.reentry = false;
        // If we've got a container, we're good to resolve type
        if (!this.content.isComponentType() && (connectedCE?.container ?? null) !== null) {
            this.content.componentType = this.toComponentType(connectedCE.container);
        }
    }
    get componentInstance() {
        return this.content.componentInstance;
    }
    get viewport() {
        return this.content.viewport;
    }
    equalComponent(other) {
        return this.content.sameComponent(other.content);
    }
    equalParameters(other) {
        return this.content.sameComponent(other.content, true) &&
            // TODO: Review whether query is relevant
            this.instruction.query === other.instruction.query;
    }
    reentryBehavior() {
        return (this.content.componentInstance !== null &&
            'reentryBehavior' in this.content.componentInstance &&
            this.content.componentInstance.reentryBehavior !== void 0)
            ? this.content.componentInstance.reentryBehavior
            : "default" /* default */;
    }
    isCacheEqual(other) {
        return this.content.sameComponent(other.content, true);
    }
    contentController(connectedCE) {
        return _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.Controller.forCustomElement(null, connectedCE.container, this.content.componentInstance, connectedCE.element, null, void 0);
    }
    createComponent(connectedCE, fallback) {
        // if (this.contentStatus !== ContentStatus.none) {
        if (this.contentStates.has('created')) {
            return;
        }
        // Don't load cached content or instantiated history content
        if (!this.fromCache && !this.fromHistory) {
            try {
                this.content.componentInstance = this.toComponentInstance(connectedCE.container);
            }
            catch (e) {
                if (fallback !== void 0) {
                    this.content.setParameters({ id: this.content.componentName });
                    this.content.setComponent(fallback);
                    try {
                        this.content.componentInstance = this.toComponentInstance(connectedCE.container);
                    }
                    catch (ee) {
                        throw e;
                    }
                }
                else {
                    throw e;
                }
            }
        }
        this.contentStates.set('created', void 0);
        // this.contentStatus = ContentStatus.created;
        // if (this.contentStatus !== ContentStatus.created || !this.loaded || !this.content.componentInstance) {
        // if (this.contentStatus !== ContentStatus.created || this.loaded || !this.content.componentInstance) {
        if (this.contentStates.has('loaded') || !this.content.componentInstance) {
            return;
        }
        // this.contentStatus = ContentStatus.loaded;
        // Don't load cached content or instantiated history content
        if (!this.fromCache || !this.fromHistory) {
            const controller = this.contentController(connectedCE);
            controller.parent = connectedCE.controller; // CustomElement.for(connectedCE.element)!;
        }
    }
    // public destroyComponent(): void {
    //   // TODO: We might want to do something here eventually, who knows?
    //   // if (this.contentStatus !== ContentStatus.created) {
    //   if (!this.contentStates.has('created')) {
    //     return;
    //   }
    //   // Don't destroy components when stateful
    //   // this.contentStatus = ContentStatus.none;
    //   this.contentStates.delete('created');
    // }
    canLoad(viewport, previousInstruction) {
        if (!this.contentStates.has('created') || (this.contentStates.has('guarded') && !this.reentry)) {
            return true;
        }
        this.contentStates.set('guarded', void 0);
        if (!this.content.componentInstance) {
            return false;
        }
        if (!this.content.componentInstance.canLoad) {
            return true;
        }
        const typeParameters = this.content.componentType ? this.content.componentType.parameters : null;
        this.instruction.parameters = this.content.toSpecifiedParameters(typeParameters);
        const merged = { ...(0,_parser_js__WEBPACK_IMPORTED_MODULE_1__.parseQuery)(this.instruction.query), ...this.instruction.parameters };
        const result = this.content.componentInstance.canLoad(merged, this.instruction, previousInstruction);
        if (typeof result === 'boolean') {
            return result;
        }
        if (typeof result === 'string') {
            return [viewport.router.createViewportInstruction(result, viewport)];
        }
        return result;
    }
    canUnload(nextInstruction) {
        if (!this.content.componentInstance || !this.content.componentInstance.canUnload) {
            return true;
        }
        if (!this.contentStates.has('loaded')) {
            return true;
        }
        return this.content.componentInstance.canUnload(nextInstruction, this.instruction);
    }
    // public async canUnload(nextInstruction: Navigation | null): Promise<boolean> {
    //   if (!this.content.componentInstance || !this.content.componentInstance.canUnload) {
    //     return true;
    //   }
    //   const result = this.content.componentInstance.canUnload(nextInstruction, this.instruction);
    //   if (typeof result === 'boolean') {
    //     return result;
    //   }
    //   return result;
    // }
    load(previousInstruction) {
        // if (!this.reentry && (this.contentStatus !== ContentStatus.created || this.loaded)) {
        // if (!this.reentry && this.loaded) {
        // if (!this.contentStates.has('created') || (this.contentStates.has('loaded') && !this.reentry)) {
        //   return;
        // }
        // this.reentry = false;
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.contentStates.await('guarded'), () => {
            if (!this.contentStates.has('created') || (this.contentStates.has('loaded') && !this.reentry)) {
                return;
            }
            this.reentry = false;
            // this.loaded = true;
            // console.log('loaded', this.content.componentName);
            this.contentStates.set('loaded', void 0);
            if (this.content.componentInstance && this.content.componentInstance.load) {
                const typeParameters = this.content.componentType ? this.content.componentType.parameters : null;
                this.instruction.parameters = this.content.toSpecifiedParameters(typeParameters);
                const merged = { ...(0,_parser_js__WEBPACK_IMPORTED_MODULE_1__.parseQuery)(this.instruction.query), ...this.instruction.parameters };
                return this.content.componentInstance.load(merged, this.instruction, previousInstruction);
            }
        });
    }
    unload(nextInstruction) {
        // if (!this.loaded) {
        if (!this.contentStates.has('loaded')) {
            return;
        }
        // this.loaded = false;
        // console.log('loaded', this.content.componentName, 'deleted');
        this.contentStates.delete('loaded');
        if (this.content.componentInstance && this.content.componentInstance.unload) {
            return this.content.componentInstance.unload(nextInstruction, this.instruction);
        }
    }
    // public unloadComponent(cache: ViewportContent[], stateful: boolean = false): void {
    //   // TODO: We might want to do something here eventually, who knows?
    //   // if (this.contentStatus !== ContentStatus.activated) {
    //   if (!this.contentStates.has('created')) {
    //     return;
    //   }
    //   // Don't unload components when stateful
    //   // TODO: We're missing stuff here
    //   if (!stateful) {
    //     // this.contentStatus = ContentStatus.created;
    //     this.contentStates.delete('created');
    //   } else {
    //     cache.push(this);
    //   }
    // }
    activateComponent(initiator, parent, flags, connectedCE, parentActivated) {
        // if (this.contentStates.has('activated') || !this.contentStates.has('created')) {
        // if (this.contentStates.has('activated')) {
        //   return;
        // }
        // this.contentStates.set('activated', void 0);
        // // if (parentActivated) { // Parent is already part of an activation
        // //   return ;
        // // }
        // const contentController = this.contentController(connectedCE);
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.contentStates.await('loaded'), () => {
            if (this.contentStates.has('activated')) {
                return;
            }
            this.contentStates.set('activated', void 0);
            // if (parentActivated) { // Parent is already part of an activation
            //   return ;
            // }
            const contentController = this.contentController(connectedCE);
            return contentController.activate(initiator ?? contentController, null /* TODO: take back: parent! */, flags);
        }, () => {
            if (this.fromCache || this.fromHistory) {
                const elements = Array.from(connectedCE.element.getElementsByTagName('*'));
                for (const el of elements) {
                    const attr = el.getAttribute('au-element-scroll');
                    if (attr) {
                        const [top, left] = attr.split(',');
                        el.removeAttribute('au-element-scroll');
                        el.scrollTo(+left, +top);
                    }
                }
            }
        });
    }
    // public async activateComponent(initiator: IHydratedController | null, parent: ICustomElementController<ICustomElementViewModel> | null, flags: LifecycleFlags, connectedCE: IConnectedCustomElement): Promise<void> {
    //   // if (this.contentStatus !== ContentStatus.created) {
    //   if (!this.contentStates.has('created')) {
    //     return;
    //   }
    //   // this.contentStatus = ContentStatus.activated;
    //   this.contentStates.add('activated');
    //   const contentController = this.contentController(connectedCE);
    //   await contentController.activate(initiator ?? contentController, parent!, flags);
    //   if (this.fromCache || this.fromHistory) {
    //     const elements = Array.from(connectedCE.element.getElementsByTagName('*'));
    //     for (const el of elements) {
    //       const attr = el.getAttribute('au-element-scroll');
    //       if (attr) {
    //         const [top, left] = attr.split(',');
    //         el.removeAttribute('au-element-scroll');
    //         el.scrollTo(+left, +top);
    //       }
    //     }
    //   }
    // }
    deactivateComponent(initiator, parent, flags, connectedCE, stateful = false) {
        // if (this.contentStatus !== ContentStatus.activated) {
        if (!this.contentStates.has('activated')) {
            return;
        }
        // this.contentStatus = ContentStatus.created;
        this.contentStates.delete('activated');
        if (stateful && connectedCE.element !== null) {
            // const contentController = this.content.componentInstance!.$controller!;
            const elements = Array.from(connectedCE.element.getElementsByTagName('*'));
            for (const el of elements) {
                if (el.scrollTop > 0 || el.scrollLeft) {
                    el.setAttribute('au-element-scroll', `${el.scrollTop},${el.scrollLeft}`);
                }
            }
        }
        const contentController = this.contentController(connectedCE);
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => contentController.deactivate(initiator ?? contentController, parent, flags));
    }
    disposeComponent(connectedCE, cache, stateful = false) {
        if (!this.contentStates.has('created')) {
            return;
        }
        // Don't unload components when stateful
        // TODO: We're missing stuff here
        if (!stateful) {
            this.contentStates.delete('created');
            const contentController = this.contentController(connectedCE);
            return contentController.dispose();
        }
        else {
            cache.push(this);
        }
    }
    freeContent(connectedCE, nextInstruction, cache, stateful = false) {
        // switch (this.contentStatus) {
        //   case ContentStatus.activated:
        //     await this.unload(nextInstruction);
        //     await this.deactivateComponent(null, connectedCE!.controller, LifecycleFlags.none, connectedCE!, stateful);
        //     this.unloadComponent(cache, stateful); // TODO: Hook up to new dispose
        //   case ContentStatus.created:
        //     this.destroyComponent();
        // }
        // TODO: Fix execution order on these
        // These are all safe to run
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.unload(nextInstruction), () => this.deactivateComponent(null, connectedCE.controller, 0 /* none */, connectedCE, stateful), 
        // () => this.unloadComponent(cache, stateful), // TODO: Hook up to new dispose
        // () => this.destroyComponent(),
        () => this.disposeComponent(connectedCE, cache, stateful));
    }
    toComponentName() {
        return this.content.componentName;
    }
    toComponentType(container) {
        if (this.content.isEmpty()) {
            return null;
        }
        return this.content.toComponentType(container);
    }
    toComponentInstance(container) {
        if (this.content.isEmpty()) {
            return null;
        }
        return this.content.toComponentInstance(container);
    }
}
//# sourceMappingURL=viewport-content.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/viewport-instruction.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/viewport-instruction.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ParametersType": () => /* binding */ ParametersType,
/* harmony export */   "ViewportInstruction": () => /* binding */ ViewportInstruction
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _type_resolvers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type-resolvers.js */ "./node_modules/@aurelia/router/dist/esm/type-resolvers.js");
/* harmony import */ var _router_options_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./router-options.js */ "./node_modules/@aurelia/router/dist/esm/router-options.js");



/**
 * @internal - Shouldn't be used directly
 */
var ParametersType;
(function (ParametersType) {
    ParametersType["none"] = "none";
    ParametersType["string"] = "string";
    ParametersType["array"] = "array";
    ParametersType["object"] = "object";
})(ParametersType || (ParametersType = {}));
/**
 * Public API - The viewport instructions are the core of the router's navigations
 */
class ViewportInstruction {
    constructor() {
        this.componentName = null;
        this.componentType = null;
        this.componentInstance = null;
        this.viewportName = null;
        this.viewport = null;
        this.parametersString = null;
        this.parametersRecord = null;
        this.parametersList = null;
        this.parametersType = "none" /* none */;
        this.ownsScope = true;
        this.nextScopeInstructions = null;
        this.scope = null;
        this.context = '';
        this.viewportScope = null;
        this.needsViewportDescribed = false;
        this.route = null;
        this.default = false;
        this.topInstruction = false;
        this.instructionResolver = null;
    }
    // public constructor(
    //   component: ComponentAppellation,
    //   viewport?: ViewportHandle,
    //   parameters?: ComponentParameters,
    //   public ownsScope: boolean = true,
    //   public nextScopeInstructions: ViewportInstruction[] | null = null,
    // ) {
    //   this.setComponent(component);
    //   this.setViewport(viewport);
    //   this.setParameters(parameters);
    // }
    static create(instructionResolver, component, viewport, parameters, ownsScope = true, nextScopeInstructions = null) {
        // if (component instanceof Promise) {
        //   return component.then((resolvedComponent) => {
        //     return ViewportInstruction.create(instructionResolver, resolvedComponent, viewport, parameters, ownsScope, nextScopeInstructions);
        //   });
        // }
        const instruction = new ViewportInstruction();
        instruction.setComponent(component);
        instruction.setViewport(viewport);
        instruction.setParameters(parameters);
        instruction.ownsScope = ownsScope;
        instruction.nextScopeInstructions = nextScopeInstructions;
        instruction.setInstructionResolver(instructionResolver);
        return instruction;
    }
    get owner() {
        return this.viewport ?? this.viewportScope ?? null;
    }
    get typedParameters() {
        switch (this.parametersType) {
            case "string" /* string */:
                return this.parametersString;
            case "array" /* array */:
                return this.parametersList;
            case "object" /* object */:
                return this.parametersRecord;
            default:
                return null;
        }
    }
    get parameters() {
        if (this.instructionResolver !== null) {
            return this.instructionResolver.parseComponentParameters(this.typedParameters);
        }
        return [];
    }
    get normalizedParameters() {
        if (this.instructionResolver !== null && this.typedParameters !== null) {
            return this.instructionResolver.stringifyComponentParameters(this.parameters);
        }
        return '';
    }
    setComponent(component) {
        if (_type_resolvers_js__WEBPACK_IMPORTED_MODULE_1__.ComponentAppellationResolver.isName(component)) {
            this.componentName = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_1__.ComponentAppellationResolver.getName(component);
            this.componentType = null;
            this.componentInstance = null;
        }
        else if (_type_resolvers_js__WEBPACK_IMPORTED_MODULE_1__.ComponentAppellationResolver.isType(component)) {
            this.componentName = this.getNewName(component);
            this.componentType = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_1__.ComponentAppellationResolver.getType(component);
            this.componentInstance = null;
        }
        else if (_type_resolvers_js__WEBPACK_IMPORTED_MODULE_1__.ComponentAppellationResolver.isInstance(component)) {
            this.componentName = this.getNewName(_type_resolvers_js__WEBPACK_IMPORTED_MODULE_1__.ComponentAppellationResolver.getType(component));
            this.componentType = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_1__.ComponentAppellationResolver.getType(component);
            this.componentInstance = _type_resolvers_js__WEBPACK_IMPORTED_MODULE_1__.ComponentAppellationResolver.getInstance(component);
        }
    }
    setViewport(viewport) {
        if (viewport === undefined || viewport === '') {
            viewport = null;
        }
        if (typeof viewport === 'string') {
            this.viewportName = viewport;
            this.viewport = null;
        }
        else {
            this.viewport = viewport;
            if (viewport !== null) {
                this.viewportName = viewport.name;
                this.scope = viewport.owningScope;
            }
        }
    }
    setParameters(parameters) {
        if (parameters === undefined || parameters === null || parameters === '') {
            this.parametersType = "none" /* none */;
            parameters = null;
        }
        else if (typeof parameters === 'string') {
            this.parametersType = "string" /* string */;
            this.parametersString = parameters;
        }
        else if (Array.isArray(parameters)) {
            this.parametersType = "array" /* array */;
            this.parametersList = parameters;
        }
        else {
            this.parametersType = "object" /* object */;
            this.parametersRecord = parameters;
        }
    }
    // This only works with objects added to objects!
    addParameters(parameters) {
        if (this.parametersType === "none" /* none */) {
            return this.setParameters(parameters);
        }
        if (this.parametersType !== "object" /* object */) {
            throw new Error('Can\'t add object parameters to existing non-object parameters!');
        }
        this.setParameters({ ...this.parametersRecord, ...parameters });
    }
    setInstructionResolver(instructionResolver) {
        this.instructionResolver = instructionResolver;
    }
    isEmpty() {
        return !this.isComponentName() && !this.isComponentType() && !this.isComponentInstance();
    }
    isComponentName() {
        return !!this.componentName && !this.isComponentType() && !this.isComponentInstance();
    }
    isComponentType() {
        return this.componentType !== null && !this.isComponentInstance();
    }
    isComponentInstance() {
        return this.componentInstance !== null;
    }
    toComponentType(container) {
        if (this.componentType !== null) {
            return this.componentType;
        }
        if (this.componentName !== null
            && typeof this.componentName === 'string'
            && container !== null
            && container.has(_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.keyFrom(this.componentName), true)) {
            const resolver = container.getResolver(_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.keyFrom(this.componentName));
            if (resolver !== null && resolver.getFactory !== void 0) {
                const factory = resolver.getFactory(container);
                if (factory) {
                    return factory.Type;
                }
            }
        }
        return null;
    }
    toComponentInstance(container) {
        if (this.componentInstance !== null) {
            return this.componentInstance;
        }
        if (container !== void 0 && container !== null) {
            const instance = this.isComponentType()
                ? container.get(this.componentType)
                : container.get(_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.keyFrom(this.componentName));
            if (this.isComponentType() &&
                !(instance instanceof this.componentType)) {
                console.warn('Failed to instantiate', this.componentType, instance);
            }
            return instance ?? null;
        }
        return null;
    }
    toViewportInstance(router) {
        if (this.viewport !== null) {
            return this.viewport;
        }
        return router.getViewport(this.viewportName);
    }
    toSpecifiedParameters(specifications) {
        specifications = specifications || [];
        const parameters = this.parameters;
        const specified = {};
        for (const spec of specifications) {
            // First get named if it exists
            let index = parameters.findIndex(param => param.key === spec);
            if (index >= 0) {
                const [parameter] = parameters.splice(index, 1);
                specified[spec] = parameter.value;
            }
            else {
                // Otherwise get first unnamed
                index = parameters.findIndex(param => param.key === void 0);
                if (index >= 0) {
                    const [parameter] = parameters.splice(index, 1);
                    specified[spec] = parameter.value;
                }
            }
        }
        // Add all remaining named
        for (const parameter of parameters.filter(param => param.key !== void 0)) {
            specified[parameter.key] = parameter.value;
        }
        let index = specifications.length;
        // Add all remaining unnamed...
        for (const parameter of parameters.filter(param => param.key === void 0)) {
            // ..with an index
            specified[index++] = parameter.value;
        }
        return specified;
    }
    toSortedParameters(specifications) {
        specifications = specifications || [];
        const parameters = this.parameters;
        const sorted = [];
        for (const spec of specifications) {
            // First get named if it exists
            let index = parameters.findIndex(param => param.key === spec);
            if (index >= 0) {
                const parameter = { ...parameters.splice(index, 1)[0] };
                parameter.key = void 0;
                sorted.push(parameter);
            }
            else {
                // Otherwise get first unnamed
                index = parameters.findIndex(param => param.key === void 0);
                if (index >= 0) {
                    const parameter = { ...parameters.splice(index, 1)[0] };
                    sorted.push(parameter);
                }
                else {
                    // Or an empty
                    sorted.push({ value: void 0 });
                }
            }
        }
        // Add all remaining named
        const params = parameters.filter(param => param.key !== void 0);
        params.sort((a, b) => (a.key || '') < (b.key || '') ? 1 : (b.key || '') < (a.key || '') ? -1 : 0);
        sorted.push(...params);
        // Add all remaining unnamed...
        sorted.push(...parameters.filter(param => param.key === void 0));
        return sorted;
    }
    sameComponent(other, compareParameters = false, compareType = false) {
        if (compareParameters && !this.sameParameters(other, compareType)) {
            return false;
        }
        return compareType ? this.componentType === other.componentType : this.componentName === other.componentName;
    }
    // TODO: Somewhere we need to check for format such as spaces etc
    sameParameters(other, compareType = false) {
        if (!this.sameComponent(other, false, compareType)) {
            return false;
        }
        const typeParameters = this.componentType ? this.componentType.parameters : [];
        const mine = this.toSpecifiedParameters(typeParameters);
        const others = other.toSpecifiedParameters(typeParameters);
        return Object.keys(mine).every(key => mine[key] === others[key])
            && Object.keys(others).every(key => others[key] === mine[key]);
    }
    sameViewport(other) {
        if (this.viewport !== null && other.viewport !== null) {
            return this.viewport === other.viewport;
        }
        return this.scope === other.scope &&
            (this.viewport ? this.viewport.name : this.viewportName) === (other.viewport ? other.viewport.name : other.viewportName);
    }
    getNewName(type) {
        if (this.componentName === null
        // || !type.aliases?.includes(this.componentName)
        ) {
            return _type_resolvers_js__WEBPACK_IMPORTED_MODULE_1__.ComponentAppellationResolver.getName(type);
        }
        return this.componentName;
    }
}
ViewportInstruction.inject = [_router_options_js__WEBPACK_IMPORTED_MODULE_2__.RouterOptions];
//# sourceMappingURL=viewport-instruction.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/viewport-scope.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/viewport-scope.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ViewportScope": () => /* binding */ ViewportScope
/* harmony export */ });
/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scope.js */ "./node_modules/@aurelia/router/dist/esm/scope.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@aurelia/router/dist/esm/utils.js");
/* harmony import */ var _runner_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./runner.js */ "./node_modules/@aurelia/router/dist/esm/runner.js");



class ViewportScope {
    constructor(name, router, connectedCE, owningScope, scope, rootComponentType = null, // temporary. Metadata will probably eliminate it
    options = {
        catches: [],
        source: null,
    }) {
        this.name = name;
        this.router = router;
        this.connectedCE = connectedCE;
        this.rootComponentType = rootComponentType;
        this.options = options;
        this.path = null;
        this.content = null;
        this.nextContent = null;
        this.available = true;
        this.sourceItem = null;
        this.sourceItemIndex = -1;
        this.remove = false;
        this.add = false;
        this.connectedScope = new _scope_js__WEBPACK_IMPORTED_MODULE_0__.Scope(router, scope, owningScope, null, this);
        if (this.catches.length > 0) {
            this.content = router.createViewportInstruction(this.catches[0], this.name);
        }
    }
    get scope() {
        return this.connectedScope.scope;
    }
    get owningScope() {
        return this.connectedScope.owningScope;
    }
    get enabled() {
        return this.connectedScope.enabled;
    }
    set enabled(enabled) {
        this.connectedScope.enabled = enabled;
    }
    get isViewport() {
        return false;
    }
    get isViewportScope() {
        return true;
    }
    get isEmpty() {
        return this.content === null;
    }
    get passThroughScope() {
        return this.rootComponentType === null && this.catches.length === 0;
    }
    get siblings() {
        const parent = this.connectedScope.parent;
        if (parent === null) {
            return [this];
        }
        return parent.enabledChildren
            .filter(child => child.isViewportScope && child.viewportScope.name === this.name)
            .map(child => child.viewportScope);
    }
    get source() {
        return this.options.source || null;
    }
    get catches() {
        let catches = this.options.catches || [];
        if (typeof catches === 'string') {
            catches = catches.split(',');
        }
        return catches;
    }
    get default() {
        if (this.catches.length > 0) {
            return this.catches[0];
        }
    }
    get nextContentActivated() {
        return this.scope.parent?.owner?.nextContentActivated ?? false;
    }
    get parentNextContentActivated() {
        return this.scope.parent?.owner?.nextContentActivated ?? false;
    }
    get nextContentAction() {
        return '';
    }
    toString() {
        const contentName = this.content?.componentName ?? '';
        const nextContentName = this.nextContent?.componentName ?? '';
        return `vs:${this.name}[${contentName}->${nextContentName}]`;
    }
    setNextContent(viewportInstruction, navigation) {
        viewportInstruction.viewportScope = this;
        this.remove = this.router.instructionResolver.isClearViewportInstruction(viewportInstruction)
            || this.router.instructionResolver.isClearAllViewportsInstruction(viewportInstruction);
        this.add = this.router.instructionResolver.isAddViewportInstruction(viewportInstruction)
            && Array.isArray(this.source);
        if (this.add) {
            viewportInstruction.componentName = null;
        }
        if (this.default !== void 0 && viewportInstruction.componentName === null) {
            viewportInstruction.componentName = this.default;
        }
        this.nextContent = viewportInstruction;
        return 'swap';
    }
    transition(coordinator) {
        // console.log('ViewportScope swap'/*, this, coordinator*/);
        _runner_js__WEBPACK_IMPORTED_MODULE_2__.Runner.run(() => coordinator.addEntityState(this, 'guardedUnload'), () => coordinator.addEntityState(this, 'guardedLoad'), () => coordinator.addEntityState(this, 'guarded'), () => coordinator.addEntityState(this, 'loaded'), () => coordinator.addEntityState(this, 'unloaded'), () => coordinator.addEntityState(this, 'routed'), () => coordinator.addEntityState(this, 'swapped'), () => {
            this.content = !this.remove ? this.nextContent : null;
            this.nextContent = null;
            coordinator.addEntityState(this, 'completed');
        });
    }
    canUnload() {
        return true;
    }
    canLoad() {
        return true;
    }
    unload() {
        return;
    }
    load() {
        return;
    }
    // public loadContent(): Promise<boolean> {
    //   this.content = !this.remove ? this.nextContent : null;
    //   this.nextContent = null;
    //   return Promise.resolve(true);
    // }
    finalizeContentChange() {
        // console.log('ViewportScope finalizing', this.content);
        if (this.remove && Array.isArray(this.source)) {
            this.removeSourceItem();
        }
    }
    abortContentChange() {
        this.nextContent = null;
        if (this.add) {
            const index = this.source.indexOf(this.sourceItem);
            this.source.splice(index, 1);
            this.sourceItem = null;
        }
        return Promise.resolve();
    }
    acceptSegment(segment) {
        if (segment === null && segment === void 0 || segment.length === 0) {
            return true;
        }
        if (segment === this.router.instructionResolver.clearViewportInstruction
            || segment === this.router.instructionResolver.addViewportInstruction
            || segment === this.name) {
            return true;
        }
        if (this.catches.length === 0) {
            return true;
        }
        if (this.catches.includes(segment)) {
            return true;
        }
        if (this.catches.filter((value) => value.includes('*')).length) {
            return true;
        }
        return false;
    }
    binding() {
        const source = this.source || [];
        if (source.length > 0 && this.sourceItem === null) {
            this.sourceItem = this.getAvailableSourceItem();
        }
    }
    unbinding() {
        if (this.sourceItem !== null && this.source !== null) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.arrayRemove)(this.source, (item) => item === this.sourceItem);
        }
        this.sourceItem = null;
    }
    getAvailableSourceItem() {
        if (this.source === null) {
            return null;
        }
        const siblings = this.siblings;
        for (const item of this.source) {
            if (siblings.every(sibling => sibling.sourceItem !== item)) {
                return item;
            }
        }
        return null;
    }
    addSourceItem() {
        const item = {};
        this.source.push(item);
        return item;
    }
    removeSourceItem() {
        this.sourceItemIndex = this.source.indexOf(this.sourceItem);
        if (this.sourceItemIndex >= 0) {
            this.source.splice(this.sourceItemIndex, 1);
        }
    }
    getRoutes() {
        if (this.rootComponentType !== null) {
            return this.rootComponentType.routes;
        }
        return null;
    }
}
//# sourceMappingURL=viewport-scope.js.map

/***/ }),

/***/ "./node_modules/@aurelia/router/dist/esm/viewport.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aurelia/router/dist/esm/viewport.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Viewport": () => /* binding */ Viewport
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@aurelia/router/dist/esm/utils.js");
/* harmony import */ var _viewport_content_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./viewport-content.js */ "./node_modules/@aurelia/router/dist/esm/viewport-content.js");
/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scope.js */ "./node_modules/@aurelia/router/dist/esm/scope.js");
/* harmony import */ var _runner_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./runner.js */ "./node_modules/@aurelia/router/dist/esm/runner.js");





class Viewport {
    constructor(router, name, connectedCE, owningScope, scope, options = {}) {
        this.router = router;
        this.name = name;
        this.connectedCE = connectedCE;
        this.options = options;
        this.nextContent = null;
        this.nextContentAction = '';
        this.forceRemove = false;
        this.path = null;
        this.clear = false;
        this.connectionResolve = null;
        this.previousViewportState = null;
        this.cache = [];
        this.historyCache = [];
        this.content = new _viewport_content_js__WEBPACK_IMPORTED_MODULE_2__.ViewportContent();
        this.connectedScope = new _scope_js__WEBPACK_IMPORTED_MODULE_3__.Scope(router, scope, owningScope, this);
    }
    get scope() {
        return this.connectedScope.scope;
    }
    get owningScope() {
        return this.connectedScope.owningScope;
    }
    get connectedController() {
        return this.connectedCE?.$controller ?? null;
    }
    get enabled() {
        return this.connectedScope.enabled;
    }
    set enabled(enabled) {
        this.connectedScope.enabled = enabled;
    }
    get isViewport() {
        return true;
    }
    get isViewportScope() {
        return false;
    }
    get isEmpty() {
        return this.content.componentInstance === null;
    }
    get doForceRemove() {
        let scope = this.connectedScope;
        while (scope !== null) {
            if (scope.viewport !== null && scope.viewport.forceRemove) {
                return true;
            }
            scope = scope.parent;
        }
        return false;
    }
    get activeContent() {
        return this.nextContent ?? this.content;
    }
    get nextContentActivated() {
        return this.nextContent?.contentStates.has('activated') ?? false;
    }
    get parentNextContentActivated() {
        return this.scope.parent?.owner?.nextContentActivated ?? false;
    }
    get performLoad() {
        return true;
        // return this.nextContentAction !== 'skip' && this.connectedScope.parentNextContentAction !== 'swap';
        // // return this.nextContentAction !== 'skip' && ((this.nextContent?.content.topInstruction ?? false) || this.clear);
    }
    get performSwap() {
        return true;
        // return this.nextContentAction !== 'skip' && this.connectedScope.parentNextContentAction !== 'swap';
        // // return this.nextContentAction !== 'skip' && ((this.nextContent?.content.topInstruction ?? false) || this.clear);
    }
    toString() {
        const contentName = this.content?.content.componentName ?? '';
        const nextContentName = this.nextContent?.content.componentName ?? '';
        return `v:${this.name}[${contentName}->${nextContentName}]`;
    }
    setNextContent(viewportInstruction, navigation) {
        viewportInstruction.setViewport(this);
        this.clear = this.router.instructionResolver.isClearViewportInstruction(viewportInstruction);
        // Can have a (resolved) type or a string (to be resolved later)
        this.nextContent = new _viewport_content_js__WEBPACK_IMPORTED_MODULE_2__.ViewportContent(!this.clear ? viewportInstruction : void 0, navigation, this.connectedCE ?? null);
        this.nextContent.fromHistory = this.nextContent.componentInstance && navigation.navigation
            ? !!navigation.navigation.back || !!navigation.navigation.forward
            : false;
        if (this.options.stateful) {
            // TODO: Add a parameter here to decide required equality
            const cached = this.cache.find((item) => this.nextContent.isCacheEqual(item));
            if (cached) {
                this.nextContent = cached;
                this.nextContent.fromCache = true;
            }
            else {
                this.cache.push(this.nextContent);
            }
        }
        // Children that will be replaced (unless added again) by next content. Will
        // be re-enabled on cancel
        this.connectedScope.clearReplacedChildren();
        // If we get the same _instance_, don't do anything (happens with cached and history)
        if (this.nextContent.componentInstance !== null && this.content.componentInstance === this.nextContent.componentInstance) {
            this.nextContent = null;
            return this.nextContentAction = 'skip'; // false;
        }
        if (!this.content.equalComponent(this.nextContent) ||
            this.connectedScope.parentNextContentAction === 'swap' || // Some parent has been swapped, need to be new component
            navigation.navigation.refresh || // Navigation 'refresh' performed
            this.content.reentryBehavior() === "refresh" /* refresh */ // ReentryBehavior 'refresh' takes precedence
        ) {
            this.connectedScope.disableReplacedChildren();
            return this.nextContentAction = 'swap'; // true;
        }
        // Component is the same name/type
        // Explicitly don't allow navigation back to the same component again
        if (this.content.reentryBehavior() === "disallow" /* disallow */) {
            this.nextContent = null;
            return this.nextContentAction = 'skip'; // false;
        }
        // Explicitly re-load same component again
        if (this.content.reentryBehavior() === "load" /* load */) {
            this.content.reentry = true;
            this.nextContent.content.setComponent(this.content.componentInstance);
            // this.nextContent.contentStatus = this.content.contentStatus;
            this.nextContent.contentStates = this.content.contentStates.clone();
            // this.nextContent.contentStates = new Map(this.content.contentStates);
            this.nextContent.reentry = this.content.reentry;
            return this.nextContentAction = 'reload'; // true;
        }
        // ReentryBehavior is now 'default'
        // Requires updated parameters if viewport stateful
        if (this.options.stateful &&
            this.content.equalParameters(this.nextContent)) {
            this.nextContent = null;
            return this.nextContentAction = 'skip'; // false;
        }
        if (!this.content.equalParameters(this.nextContent)) {
            // TODO: Fix a config option for this
            // eslint-disable-next-line no-constant-condition
            if (false) {}
            else { // Perform a full swap
                this.connectedScope.disableReplacedChildren();
                return this.nextContentAction = 'swap';
            }
        }
        // Default is to do nothing
        return 'skip';
        // // Default is to trigger a refresh (without a check of parameters)
        // this.connectedScope.disableReplacedChildren();
        // return this.nextContentAction = 'reload'; // true;
    }
    setConnectedCE(connectedCE, options) {
        options = options || {};
        if (this.connectedCE !== connectedCE) {
            // TODO: Restore this state on navigation cancel
            this.previousViewportState = { ...this };
            this.clearState();
            this.connectedCE = connectedCE;
            if (options.usedBy) {
                this.options.usedBy = options.usedBy;
            }
            if (options.default) {
                this.options.default = options.default;
            }
            if (options.fallback) {
                this.options.fallback = options.fallback;
            }
            if (options.noLink) {
                this.options.noLink = options.noLink;
            }
            if (options.noTitle) {
                this.options.noTitle = options.noTitle;
            }
            if (options.noHistory) {
                this.options.noHistory = options.noHistory;
            }
            if (options.stateful) {
                this.options.stateful = options.stateful;
            }
            if (this.connectionResolve) {
                this.connectionResolve();
            }
        }
        // TODO: Might not need this? Figure it out
        // if (container) {
        //   container['viewportName'] = this.name;
        // }
        if (!this.content.componentInstance && (!this.nextContent || !this.nextContent.componentInstance) && this.options.default) {
            const instructions = this.router.instructionResolver.parseViewportInstructions(this.options.default);
            for (const instruction of instructions) {
                // Set to name to be delayed one turn
                instruction.setViewport(this.name);
                instruction.scope = this.owningScope;
                instruction.default = true;
            }
            this.router.load(instructions, { append: true }).catch(error => { throw error; });
        }
    }
    remove(connectedCE) {
        if (this.connectedCE === connectedCE) {
            return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => {
                if (this.content.componentInstance) {
                    return this.content.freeContent(this.connectedCE, (this.nextContent ? this.nextContent.instruction : null), this.historyCache, this.doForceRemove ? false : this.router.statefulHistory || this.options.stateful); // .catch(error => { throw error; });
                }
            }, () => {
                if (this.doForceRemove) {
                    const removes = [];
                    for (const content of this.historyCache) {
                        removes.push(() => content.freeContent(null, null, this.historyCache, false));
                    }
                    removes.push(() => { this.historyCache = []; });
                    return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(...removes);
                    // return Promise.all(this.historyCache.map(content => content.freeContent(
                    //   null,
                    //   null,
                    //   this.historyCache,
                    //   false,
                    // )));
                    // this.historyCache = [];
                }
                return true;
            });
        }
        return false;
    }
    transition(coordinator) {
        // console.log('Viewport transition', this.toString());
        // let run: unknown;
        const guarded = coordinator.checkingSyncState('guarded');
        const performLoad = this.performLoad || !guarded;
        const performSwap = this.performSwap || !guarded;
        // const performSwap = this.performSwap || !this.router.isRestrictedNavigation || this.clear;
        const guardSteps = [
            () => performLoad ? this.canUnload() : true,
            (canUnloadResult) => {
                if (!canUnloadResult) {
                    _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.cancel(void 0);
                    coordinator.cancel();
                    return;
                }
                if (this.router.isRestrictedNavigation) {
                    this.nextContent.createComponent(this.connectedCE, this.options.fallback);
                }
                coordinator.addEntityState(this, 'guardedUnload');
            },
            () => coordinator.syncState('guardedUnload', this),
            () => performLoad ? this.canLoad(guarded) : true,
            (canLoadResult) => {
                if (typeof canLoadResult === 'boolean') {
                    if (!canLoadResult) {
                        _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.cancel(void 0);
                        coordinator.cancel();
                        return;
                    }
                    coordinator.addEntityState(this, 'guardedLoad');
                    coordinator.addEntityState(this, 'guarded');
                }
                else { // Denied and (probably) redirected
                    _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.router.load(canLoadResult, { append: true }), () => this.abortContentChange());
                }
            },
        ];
        const routingSteps = [
            // () => { console.log("I'm waiting for guarded", this.toString()); },
            () => coordinator.syncState('guarded', this),
            // () => { console.log("I'm guarded", this.toString()); },
            // TODO: For consistency it should probably be this option with 'routed'
            // () => performSwap ? this.unload(coordinator.checkingSyncState('routed')) : true,
            () => performLoad ? this.unload(true) : true,
            () => coordinator.addEntityState(this, 'unloaded'),
            // () => { console.log("I'm waiting for unloaded", this.toString()); },
            () => coordinator.syncState('unloaded', this),
            // () => { console.log("I'm done waiting for unloaded", this.toString()); },
            () => performLoad ? this.load(coordinator.checkingSyncState('routed')) : true,
            () => coordinator.addEntityState(this, 'loaded'),
            () => coordinator.addEntityState(this, 'routed'),
        ];
        const lifecycleSteps = [
            () => coordinator.syncState('routed', this),
        ];
        if (performSwap) {
            if (this.router.options.swapStrategy.includes('parallel')) {
                lifecycleSteps.push(() => {
                    if (this.router.options.swapStrategy.includes('add')) {
                        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(this.addContent(), this.removeContent());
                    }
                    else {
                        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(this.removeContent(), this.addContent());
                    }
                });
            }
            else {
                lifecycleSteps.push(() => performSwap ? (this.router.options.swapStrategy.includes('add') ? this.addContent() : this.removeContent()) : void 0, () => performSwap ? (this.router.options.swapStrategy.includes('add') ? this.removeContent() : this.addContent()) : void 0);
            }
        }
        lifecycleSteps.push(() => coordinator.addEntityState(this, 'swapped'));
        // const lifecycleSteps = [
        //   () => coordinator.syncState('routed'),
        //   // () => coordinator.addEntityState(this, 'bound'),
        //   () => performSwap ? (this.router.options.swapStrategy.includes('add') ? this.addContent() : this.removeContent()) : true,
        //   () => performSwap ? (this.router.options.swapStrategy.includes('add') ? this.removeContent() : this.addContent()) : true,
        //   () => coordinator.addEntityState(this, 'swapped'),
        // ];
        // run =
        _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(...guardSteps, ...routingSteps, ...lifecycleSteps, () => coordinator.addEntityState(this, 'completed'));
    }
    canUnload() {
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => {
            // console.log('viewport canUnload run', this.name, 'before');
            const result = this.connectedScope.canUnload();
            // console.log('viewport canUnload run', this.name, 'after');
            return result;
        }, (canUnloadChildren) => {
            // console.log('viewport canUnload result', this.name, canUnloadChildren);
            if (!canUnloadChildren) {
                return false;
            }
            // This shouldn't happen
            // // Don't stop it because we're not going to actually do anything
            // if (this.content.componentInstance === this.nextContent?.componentInstance) {
            //   return true;
            // }
            return this.content.canUnload(this.nextContent?.instruction ?? null);
        });
    }
    canLoad(recurse) {
        // console.log(this.connectedScope.toString(), 'viewport content canLoad', this.nextContent?.content?.componentName);
        if (this.clear) {
            return true;
        }
        if ((this.nextContent?.content ?? null) === null) {
            return true;
        }
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.waitForConnected(), () => {
            this.nextContent.createComponent(this.connectedCE, this.options.fallback);
            // This shouldn't happen
            // // Don't stop it because we're not going to actually do anything
            // if (this.content.componentInstance === this.nextContent!.componentInstance) {
            //   return true;
            // }
            return this.nextContent.canLoad(this, this.content.instruction);
        });
    }
    load(recurse) {
        // console.log(this.connectedScope.toString(), 'viewport content load', this.nextContent?.content?.componentName);
        if (this.clear || (this.nextContent?.componentInstance ?? null) === null) {
            return;
        }
        // This shouldn't happen
        // // TODO: Verify this
        // if (this.nextContent === this.content) {
        //   return;
        // }
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.nextContent?.load(this.content.instruction));
        // return this.nextContent?.load(this.content.instruction);
        // await this.nextContent.activateComponent(null, this.connectedCE!.$controller as ICustomElementController<ICustomElementViewModel>, LifecycleFlags.none, this.connectedCE!);
        // return true;
    }
    addContent() {
        // console.log('addContent', this.toString());
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.activate(null, this.connectedController, 0 /* none */, this.parentNextContentActivated));
    }
    removeContent() {
        if (this.isEmpty) {
            return;
        }
        // console.log('removeContent', this.toString());
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.connectedScope.removeContent(), () => this.deactivate(null, null /* TODO: verify this.connectedController */, 0 /* none */), () => this.dispose());
    }
    removeChildrenContent() {
        // console.log(this.name, 'removeContent', this.content.content);
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => !this.isEmpty ? this.connectedScope.removeContent() : void 0);
    }
    activate(initiator, parent, flags, fromParent) {
        // console.log('activate' /* , { ...this } */);
        if (this.activeContent.componentInstance !== null) {
            this.connectedScope.reenableReplacedChildren();
            return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.activeContent.load(this.activeContent.instruction), // Only acts if not already loaded
            () => this.activeContent.activateComponent(initiator, parent, flags, this.connectedCE, fromParent));
        }
    }
    deactivate(initiator, parent, flags) {
        if (this.content.componentInstance &&
            !this.content.reentry &&
            this.content.componentInstance !== this.nextContent?.componentInstance) {
            return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.content?.unload(this.content.instruction), // Only acts if not already unloaded
            () => this.content?.deactivateComponent(initiator, parent, flags, this.connectedCE, this.router.statefulHistory || this.options.stateful));
        }
    }
    unload(recurse) {
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => recurse ? this.connectedScope.unload(recurse) : true, () => {
            // console.log(this.connectedScope.toString(), 'viewport content unload', this.content.content.componentName);
            // This shouldn't happen
            // // TODO: Verify this
            // if (this.nextContent === this.content) {
            //   return;
            // }
            if (this.content.componentInstance) {
                return this.content.unload(this.nextContent?.instruction ?? null);
            }
        });
    }
    dispose() {
        if (this.content.componentInstance &&
            !this.content.reentry &&
            this.content.componentInstance !== this.nextContent?.componentInstance) {
            return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(
            // () => this.content!.unloadComponent(
            //   this.historyCache,
            //   this.router.statefulHistory || this.options.stateful),
            // () => this.content!.destroyComponent(),
            () => this.content.disposeComponent(this.connectedCE, this.historyCache, this.router.statefulHistory || this.options.stateful));
            // await this.content!.freeContent(
            //   this.connectedCE,
            //   this.nextContent!.instruction,
            //   this.historyCache,
            //   this.router.statefulHistory || this.options.stateful);
        }
    }
    finalizeContentChange() {
        // console.log('finalizeContent', this.nextContent!.content?.componentName);
        if (this.nextContent.componentInstance) {
            this.content = this.nextContent;
            this.content.reentry = false;
        }
        if (this.clear) {
            this.content = new _viewport_content_js__WEBPACK_IMPORTED_MODULE_2__.ViewportContent(void 0, this.nextContent.instruction);
        }
        this.nextContent = null;
        this.nextContentAction = '';
        this.previousViewportState = null;
        this.connectedScope.clearReplacedChildren();
    }
    abortContentChange() {
        this.connectedScope.reenableReplacedChildren();
        return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => this.nextContent.freeContent(this.connectedCE, this.nextContent.instruction, this.historyCache, this.router.statefulHistory || this.options.stateful), () => {
            if (this.previousViewportState) {
                Object.assign(this, this.previousViewportState);
            }
            this.nextContentAction = '';
        });
    }
    // TODO: Deal with non-string components
    wantComponent(component) {
        let usedBy = this.options.usedBy || [];
        if (typeof usedBy === 'string') {
            usedBy = usedBy.split(',');
        }
        return usedBy.includes(component);
    }
    // TODO: Deal with non-string components
    acceptComponent(component) {
        if (component === '-' || component === null) {
            return true;
        }
        let usedBy = this.options.usedBy;
        if (!usedBy || !usedBy.length) {
            return true;
        }
        if (typeof usedBy === 'string') {
            usedBy = usedBy.split(',');
        }
        if (usedBy.includes(component)) {
            return true;
        }
        if (usedBy.filter((value) => value.includes('*')).length) {
            return true;
        }
        return false;
    }
    freeContent(component) {
        const content = this.historyCache.find(cached => cached.componentInstance === component);
        if (content !== void 0) {
            return _runner_js__WEBPACK_IMPORTED_MODULE_4__.Runner.run(() => {
                this.forceRemove = true;
                return content.freeContent(null, null, this.historyCache, false);
            }, () => {
                this.forceRemove = false;
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.arrayRemove)(this.historyCache, (cached => cached === content));
            });
        }
    }
    getRoutes() {
        const componentType = this.getComponentType();
        if (componentType === null) {
            return null;
        }
        const routes = componentType.routes;
        return Array.isArray(routes) ? routes : null;
    }
    getTitle(navigationInstruction) {
        if (this.options.noTitle) {
            return '';
        }
        const componentType = this.getComponentType();
        if (componentType === null) {
            return '';
        }
        let title = '';
        const typeTitle = componentType.title;
        if (typeTitle !== void 0) {
            if (typeof typeTitle === 'string') {
                title = typeTitle;
            }
            else {
                const component = this.getComponentInstance();
                title = typeTitle.call(component, component, navigationInstruction);
            }
        }
        else if (this.router.options.title.useComponentNames) {
            let name = this.getContentInstruction().componentName ?? '';
            const prefix = this.router.options.title.componentPrefix ?? '';
            if (name.startsWith(prefix)) {
                name = name.slice(prefix.length);
            }
            name = name.replace('-', ' ');
            title = name.slice(0, 1).toLocaleUpperCase() + name.slice(1);
        }
        if (this.router.options.title.transformTitle !== void 0) {
            title = this.router.options.title.transformTitle.call(this, title, this.getContentInstruction());
        }
        return title;
    }
    getComponentType() {
        let componentType = this.getContentInstruction().componentType ?? null;
        // TODO: This is going away once Metadata is in!
        if (componentType === null) {
            const controller = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.for(this.connectedCE.element);
            componentType = controller.context
                .componentType;
        }
        return componentType ?? null;
    }
    getComponentInstance() {
        return this.getContentInstruction().componentInstance ?? null;
    }
    getContentInstruction() {
        return this.nextContent?.content ?? this.content.content ?? null;
    }
    clearState() {
        this.options = {};
        this.content = new _viewport_content_js__WEBPACK_IMPORTED_MODULE_2__.ViewportContent();
        this.cache = [];
    }
    waitForConnected() {
        if (this.connectedCE === null) {
            return new Promise((resolve) => {
                this.connectionResolve = resolve;
            });
        }
    }
}
//# sourceMappingURL=viewport.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/app-root.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/app-root.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IAppRoot": () => /* binding */ IAppRoot,
/* harmony export */   "AppRoot": () => /* binding */ AppRoot
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _app_task_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app-task.js */ "./node_modules/@aurelia/runtime-html/dist/esm/app-task.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
/* harmony import */ var _templating_controller_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./templating/controller.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/controller.js");





const IAppRoot = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IAppRoot');
class AppRoot {
    constructor(config, platform, container, rootProvider, enhance = false) {
        this.config = config;
        this.platform = platform;
        this.container = container;
        this.controller = (void 0);
        this.hydratePromise = void 0;
        this.host = config.host;
        rootProvider.prepare(this);
        if (container.has(_dom_js__WEBPACK_IMPORTED_MODULE_1__.INode, false) && container.get(_dom_js__WEBPACK_IMPORTED_MODULE_1__.INode) !== config.host) {
            this.container = container.createChild();
        }
        this.container.register(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(_dom_js__WEBPACK_IMPORTED_MODULE_1__.INode, config.host));
        if (enhance) {
            const component = config.component;
            this.enhanceDefinition = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__.CustomElement.getDefinition(_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__.CustomElement.isType(component)
                ? _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__.CustomElement.define({ ..._resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__.CustomElement.getDefinition(component), template: this.host, enhance: true }, component)
                : _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__.CustomElement.define({ name: (void 0), template: this.host, enhance: true }));
        }
        this.hydratePromise = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.runAppTasks('beforeCreate'), () => {
            const instance = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__.CustomElement.isType(config.component)
                ? this.container.get(config.component)
                : config.component;
            const controller = (this.controller = _templating_controller_js__WEBPACK_IMPORTED_MODULE_4__.Controller.forCustomElement(this, container, instance, this.host, null, 0 /* none */, false, this.enhanceDefinition));
            controller.hydrateCustomElement(container, null);
            return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.runAppTasks('hydrating'), () => {
                controller.hydrate(null);
                return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.runAppTasks('hydrated'), () => {
                    controller.hydrateChildren();
                    this.hydratePromise = void 0;
                });
            });
        });
    }
    activate() {
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.hydratePromise, () => {
            return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.runAppTasks('beforeActivate'), () => {
                return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.controller.activate(this.controller, null, 32 /* fromBind */, void 0), () => {
                    return this.runAppTasks('afterActivate');
                });
            });
        });
    }
    deactivate() {
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.runAppTasks('beforeDeactivate'), () => {
            return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.controller.deactivate(this.controller, null, 0 /* none */), () => {
                return this.runAppTasks('afterDeactivate');
            });
        });
    }
    /** @internal */
    runAppTasks(slot) {
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.resolveAll)(...this.container.getAll(_app_task_js__WEBPACK_IMPORTED_MODULE_2__.IAppTask).reduce((results, task) => {
            if (task.slot === slot) {
                results.push(task.run());
            }
            return results;
        }, []));
    }
    dispose() {
        this.controller?.dispose();
    }
}
//# sourceMappingURL=app-root.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/app-task.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/app-task.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IAppTask": () => /* binding */ IAppTask,
/* harmony export */   "AppTask": () => /* binding */ AppTask
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");

const IAppTask = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IAppTask');
class $AppTask {
    constructor(key) {
        this.key = key;
        this.slot = (void 0);
        this.callback = (void 0);
        this.container = (void 0);
    }
    static with(key) {
        return new $AppTask(key);
    }
    beforeCreate() {
        return this.at('beforeCreate');
    }
    hydrating() {
        return this.at('hydrating');
    }
    hydrated() {
        return this.at('hydrated');
    }
    beforeActivate() {
        return this.at('beforeActivate');
    }
    afterActivate() {
        return this.at('afterActivate');
    }
    beforeDeactivate() {
        return this.at('beforeDeactivate');
    }
    afterDeactivate() {
        return this.at('afterDeactivate');
    }
    at(slot) {
        this.slot = slot;
        return this;
    }
    call(fn) {
        this.callback = fn;
        return this;
    }
    register(container) {
        return this.container = container.register(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(IAppTask, this));
    }
    run() {
        const callback = this.callback;
        const instance = this.container.get(this.key);
        return callback(instance);
    }
}
const AppTask = $AppTask;
//# sourceMappingURL=app-task.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/attribute-syntax-transformer.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/attribute-syntax-transformer.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IAttrSyntaxTransformer": () => /* binding */ IAttrSyntaxTransformer,
/* harmony export */   "AttrSyntaxTransformer": () => /* binding */ AttrSyntaxTransformer
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");

const IAttrSyntaxTransformer = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IAttrSyntaxTransformer', x => x.singleton(AttrSyntaxTransformer));
class AttrSyntaxTransformer {
    constructor() {
        /**
         * @internal
         */
        this.fns = [];
    }
    /**
     * Add a given function to a list of fns that will be used
     * to check if `'bind'` command can be transformed to `'two-way'` command.
     *
     * If one of those functions in this lists returns true, the `'bind'` command
     * will be transformed into `'two-way'` command.
     *
     * The function will be called with 2 parameters:
     * - element: the element that the template compiler is currently working with
     * - property: the target property name
     */
    useTwoWay(fn) {
        this.fns.push(fn);
    }
    /**
     * @internal
     */
    transform(node, attrSyntax) {
        if (attrSyntax.command === 'bind' &&
            (
            // note: even though target could possibly be mapped to a different name
            // the final property name shouldn't affect the two way transformation
            // as they both should work with original source attribute name
            shouldDefaultToTwoWay(node, attrSyntax.target) ||
                this.fns.length > 0 && this.fns.some(fn => fn(node, attrSyntax.target)))) {
            attrSyntax.command = 'two-way';
        }
        attrSyntax.target = this.map(node.tagName, attrSyntax.target);
    }
    /**
     * todo: this should be in the form of a lookup. the following is not extensible
     *
     * @internal
     */
    map(tagName, attr) {
        switch (tagName) {
            case 'LABEL':
                switch (attr) {
                    case 'for':
                        return 'htmlFor';
                    default:
                        return attr;
                }
            case 'IMG':
                switch (attr) {
                    case 'usemap':
                        return 'useMap';
                    default:
                        return attr;
                }
            case 'INPUT':
                switch (attr) {
                    case 'maxlength':
                        return 'maxLength';
                    case 'minlength':
                        return 'minLength';
                    case 'formaction':
                        return 'formAction';
                    case 'formenctype':
                        return 'formEncType';
                    case 'formmethod':
                        return 'formMethod';
                    case 'formnovalidate':
                        return 'formNoValidate';
                    case 'formtarget':
                        return 'formTarget';
                    case 'inputmode':
                        return 'inputMode';
                    default:
                        return attr;
                }
            case 'TEXTAREA':
                switch (attr) {
                    case 'maxlength':
                        return 'maxLength';
                    default:
                        return attr;
                }
            case 'TD':
            case 'TH':
                switch (attr) {
                    case 'rowspan':
                        return 'rowSpan';
                    case 'colspan':
                        return 'colSpan';
                    default:
                        return attr;
                }
            default:
                switch (attr) {
                    case 'accesskey':
                        return 'accessKey';
                    case 'contenteditable':
                        return 'contentEditable';
                    case 'tabindex':
                        return 'tabIndex';
                    case 'textcontent':
                        return 'textContent';
                    case 'innerhtml':
                        return 'innerHTML';
                    case 'scrolltop':
                        return 'scrollTop';
                    case 'scrollleft':
                        return 'scrollLeft';
                    case 'readonly':
                        return 'readOnly';
                    default:
                        return attr;
                }
        }
    }
}
function shouldDefaultToTwoWay(element, attr) {
    switch (element.tagName) {
        case 'INPUT':
            switch (element.type) {
                case 'checkbox':
                case 'radio':
                    return attr === 'checked';
                default:
                    return attr === 'value' || attr === 'files';
            }
        case 'TEXTAREA':
        case 'SELECT':
            return attr === 'value';
        default:
            switch (attr) {
                case 'textcontent':
                case 'innerhtml':
                    return element.hasAttribute('contenteditable');
                case 'scrolltop':
                case 'scrollleft':
                    return true;
                default:
                    return false;
            }
    }
}
//# sourceMappingURL=attribute-syntax-transformer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/aurelia.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/aurelia.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IAurelia": () => /* binding */ IAurelia,
/* harmony export */   "Aurelia": () => /* binding */ Aurelia
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/platform-browser */ "./node_modules/@aurelia/platform-browser/dist/esm/index.js");
/* harmony import */ var _app_root_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app-root.js */ "./node_modules/@aurelia/runtime-html/dist/esm/app-root.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");




const IAurelia = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IAurelia');
class Aurelia {
    constructor(container = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createContainer()) {
        this.container = container;
        this._isRunning = false;
        this._isStarting = false;
        this._isStopping = false;
        this._root = void 0;
        this.next = void 0;
        this.startPromise = void 0;
        this.stopPromise = void 0;
        if (container.has(IAurelia, true)) {
            throw new Error('An instance of Aurelia is already registered with the container or an ancestor of it.');
        }
        container.register(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(IAurelia, this));
        container.registerResolver(_app_root_js__WEBPACK_IMPORTED_MODULE_2__.IAppRoot, this.rootProvider = new _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.InstanceProvider('IAppRoot'));
    }
    get isRunning() { return this._isRunning; }
    get isStarting() { return this._isStarting; }
    get isStopping() { return this._isStopping; }
    get root() {
        if (this._root == void 0) {
            if (this.next == void 0) {
                throw new Error(`root is not defined`); // TODO: create error code
            }
            return this.next;
        }
        return this._root;
    }
    register(...params) {
        this.container.register(...params);
        return this;
    }
    app(config) {
        this.next = new _app_root_js__WEBPACK_IMPORTED_MODULE_2__.AppRoot(config, this.initPlatform(config.host), this.container, this.rootProvider, false);
        return this;
    }
    enhance(config) {
        this.next = new _app_root_js__WEBPACK_IMPORTED_MODULE_2__.AppRoot(config, this.initPlatform(config.host), this.container, this.rootProvider, true);
        return this;
    }
    async waitForIdle() {
        const platform = this.root.platform;
        await platform.domWriteQueue.yield();
        await platform.domReadQueue.yield();
        await platform.macroTaskQueue.yield();
    }
    initPlatform(host) {
        let p;
        if (!this.container.has(_platform_js__WEBPACK_IMPORTED_MODULE_3__.IPlatform, false)) {
            if (host.ownerDocument.defaultView === null) {
                throw new Error(`Failed to initialize the platform object. The host element's ownerDocument does not have a defaultView`);
            }
            p = new _aurelia_platform_browser__WEBPACK_IMPORTED_MODULE_1__.BrowserPlatform(host.ownerDocument.defaultView);
            this.container.register(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(_platform_js__WEBPACK_IMPORTED_MODULE_3__.IPlatform, p));
        }
        else {
            p = this.container.get(_platform_js__WEBPACK_IMPORTED_MODULE_3__.IPlatform);
        }
        return p;
    }
    start(root = this.next) {
        if (root == void 0) {
            throw new Error(`There is no composition root`);
        }
        if (this.startPromise instanceof Promise) {
            return this.startPromise;
        }
        return this.startPromise = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.stop(), () => {
            Reflect.set(root.host, '$aurelia', this);
            this.rootProvider.prepare(this._root = root);
            this._isStarting = true;
            return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(root.activate(), () => {
                this._isRunning = true;
                this._isStarting = false;
                this.startPromise = void 0;
                this.dispatchEvent(root, 'au-started', root.host);
            });
        });
    }
    stop(dispose = false) {
        if (this.stopPromise instanceof Promise) {
            return this.stopPromise;
        }
        if (this._isRunning === true) {
            const root = this._root;
            this._isRunning = false;
            this._isStopping = true;
            return this.stopPromise = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(root.deactivate(), () => {
                Reflect.deleteProperty(root.host, '$aurelia');
                if (dispose) {
                    root.dispose();
                }
                this._root = void 0;
                this.rootProvider.dispose();
                this._isStopping = false;
                this.dispatchEvent(root, 'au-stopped', root.host);
            });
        }
    }
    dispose() {
        if (this._isRunning || this._isStopping) {
            throw new Error(`The aurelia instance must be fully stopped before it can be disposed`);
        }
        this.container.dispose();
    }
    dispatchEvent(root, name, target) {
        const ev = new root.platform.window.CustomEvent(name, { detail: this, bubbles: true, cancelable: true });
        target.dispatchEvent(ev);
    }
}
//# sourceMappingURL=aurelia.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/bindable.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bindable": () => /* binding */ bindable,
/* harmony export */   "Bindable": () => /* binding */ Bindable,
/* harmony export */   "BindableDefinition": () => /* binding */ BindableDefinition
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


function bindable(configOrTarget, prop) {
    let config;
    function decorator($target, $prop) {
        if (arguments.length > 1) {
            // Non invocation:
            // - @bindable
            // Invocation with or w/o opts:
            // - @bindable()
            // - @bindable({...opts})
            config.property = $prop;
        }
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(Bindable.name, BindableDefinition.create($prop, config), $target.constructor, $prop);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.appendTo($target.constructor, Bindable.keyFrom($prop));
    }
    if (arguments.length > 1) {
        // Non invocation:
        // - @bindable
        config = {};
        decorator(configOrTarget, prop);
        return;
    }
    else if (typeof configOrTarget === 'string') {
        // ClassDecorator
        // - @bindable('bar')
        // Direct call:
        // - @bindable('bar')(Foo)
        config = {};
        return decorator;
    }
    // Invocation with or w/o opts:
    // - @bindable()
    // - @bindable({...opts})
    config = configOrTarget === void 0 ? {} : configOrTarget;
    return decorator;
}
function isBindableAnnotation(key) {
    return key.startsWith(Bindable.name);
}
const Bindable = {
    name: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor('bindable'),
    keyFrom(name) {
        return `${Bindable.name}:${name}`;
    },
    from(...bindableLists) {
        const bindables = {};
        const isArray = Array.isArray;
        function addName(name) {
            bindables[name] = BindableDefinition.create(name);
        }
        function addDescription(name, def) {
            bindables[name] = def instanceof BindableDefinition ? def : BindableDefinition.create(name, def);
        }
        function addList(maybeList) {
            if (isArray(maybeList)) {
                maybeList.forEach(addName);
            }
            else if (maybeList instanceof BindableDefinition) {
                bindables[maybeList.property] = maybeList;
            }
            else if (maybeList !== void 0) {
                Object.keys(maybeList).forEach(name => addDescription(name, maybeList[name]));
            }
        }
        bindableLists.forEach(addList);
        return bindables;
    },
    for(Type) {
        let def;
        const builder = {
            add(configOrProp) {
                let prop;
                let config;
                if (typeof configOrProp === 'string') {
                    prop = configOrProp;
                    config = { property: prop };
                }
                else {
                    prop = configOrProp.property;
                    config = configOrProp;
                }
                def = BindableDefinition.create(prop, config);
                if (!_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.hasOwn(Bindable.name, Type, prop)) {
                    _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.appendTo(Type, Bindable.keyFrom(prop));
                }
                _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(Bindable.name, def, Type, prop);
                return builder;
            },
            mode(mode) {
                def.mode = mode;
                return builder;
            },
            callback(callback) {
                def.callback = callback;
                return builder;
            },
            attribute(attribute) {
                def.attribute = attribute;
                return builder;
            },
            primary() {
                def.primary = true;
                return builder;
            },
            set(setInterpreter) {
                def.set = setInterpreter;
                return builder;
            }
        };
        return builder;
    },
    getAll(Type) {
        const propStart = Bindable.name.length + 1;
        const defs = [];
        const prototypeChain = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.getPrototypeChain)(Type);
        let iProto = prototypeChain.length;
        let iDefs = 0;
        let keys;
        let keysLen;
        let Class;
        while (--iProto >= 0) {
            Class = prototypeChain[iProto];
            keys = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.getKeys(Class).filter(isBindableAnnotation);
            keysLen = keys.length;
            for (let i = 0; i < keysLen; ++i) {
                defs[iDefs++] = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(Bindable.name, Class, keys[i].slice(propStart));
            }
        }
        return defs;
    },
};
class BindableDefinition {
    constructor(attribute, callback, mode, primary, property, set) {
        this.attribute = attribute;
        this.callback = callback;
        this.mode = mode;
        this.primary = primary;
        this.property = property;
        this.set = set;
    }
    static create(prop, def = {}) {
        return new BindableDefinition((0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(def.attribute, (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.kebabCase)(prop)), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(def.callback, `${prop}Changed`), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(def.mode, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(def.primary, false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(def.property, prop), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(def.set, _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.noop));
    }
}
/* eslint-disable @typescript-eslint/no-unused-vars,spaced-comment */
/**
 * This function serves two purposes:
 * - A playground for contributors to try their changes to the APIs.
 * - Cause the API surface to be properly type-checked and protected against accidental type regressions.
 *
 * It will be automatically removed by dead code elimination.
 */
function apiTypeCheck() {
    let Foo = 
    // > expected error - class decorator only accepts a string
    //@bindable({})
    class Foo {
    };
    __decorate([
        bindable,
        bindable(),
        bindable({})
        // > expected error - 'property' does not exist on decorator input object
        //@bindable({ property: 'prop' })
        ,
        bindable({ mode: _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay }),
        bindable({ callback: 'propChanged' }),
        bindable({ attribute: 'prop' }),
        bindable({ primary: true }),
        bindable({ set: value => String(value) }),
        bindable({ set: value => Number(value) }),
        bindable({
            mode: _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay,
            callback: 'propChanged',
            attribute: 'prop',
            primary: true,
            set: value => String(value)
        })
    ], Foo.prototype, "prop", void 0);
    Foo = __decorate([
        bindable('prop')
        // > expected error - class decorator only accepts a string
        //@bindable({})
    ], Foo);
    Bindable.for(Foo)
        // > expected error - there is no add() function with only optional params on the fluent api
        //.add()
        // > expected error - 'property' is a required property on the fluent api
        //.add({})
        .add({ property: 'prop' })
        .add({ property: 'prop', mode: _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay })
        .add({ property: 'prop', callback: 'propChanged' })
        .add({ property: 'prop', attribute: 'prop' })
        .add({ property: 'prop', primary: true })
        .add({ property: 'prop', mode: _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay, callback: 'propChanged', attribute: 'prop', primary: true })
        .add('prop')
        // > expected error - the add() method that accepts an object literal does not return a fluent api
        //.add({ property: 'prop' }).mode(BindingMode.twoWay)
        //.add({ property: 'prop' }).callback('propChanged')
        //.add({ property: 'prop' }).attribute('prop')
        //.add({ property: 'prop' }).primary()
        // > expected error - fluent api methods can only be invoked once per bindable
        //.add('prop').mode(BindingMode.twoWay).mode(BindingMode.twoWay)
        //.add('prop').mode(BindingMode.twoWay).callback('propChanged').mode(BindingMode.twoWay)
        //.add('prop').mode(BindingMode.twoWay).callback('propChanged').callback('propChanged') // etc
        // > expected error - wrong invocation order
        //.add('prop').callback('propChanged').mode(BindingMode.twoWay)
        //.add('prop').primary().mode(BindingMode.twoWay)  // etc
        .add('prop').mode(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay)
        .add('prop').mode(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay).callback('propChanged')
        .add('prop').mode(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay).callback('propChanged').attribute('prop')
        .add('prop').mode(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay).callback('propChanged').attribute('prop').primary()
        .add('prop').mode(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay).set((value) => Number(value))
        .add('prop').mode(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay).callback('propChanged').set(value => Number(value))
        .add('prop').callback('propChanged')
        .add('prop').callback('propChanged').attribute('prop')
        .add('prop').callback('propChanged').attribute('prop').primary()
        .add('prop').attribute('prop')
        .add('prop').attribute('prop').primary()
        .add('prop').primary();
}
/* eslint-enable @typescript-eslint/no-unused-vars,spaced-comment */
//# sourceMappingURL=bindable.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/binding-mode.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/binding-mode.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindingModeBehavior": () => /* binding */ BindingModeBehavior,
/* harmony export */   "OneTimeBindingBehavior": () => /* binding */ OneTimeBindingBehavior,
/* harmony export */   "ToViewBindingBehavior": () => /* binding */ ToViewBindingBehavior,
/* harmony export */   "FromViewBindingBehavior": () => /* binding */ FromViewBindingBehavior,
/* harmony export */   "TwoWayBindingBehavior": () => /* binding */ TwoWayBindingBehavior
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");

class BindingModeBehavior {
    constructor(mode) {
        this.mode = mode;
        this.originalModes = new Map();
    }
    bind(flags, scope, hostScope, binding) {
        this.originalModes.set(binding, binding.mode);
        binding.mode = this.mode;
    }
    unbind(flags, scope, hostScope, binding) {
        binding.mode = this.originalModes.get(binding);
        this.originalModes.delete(binding);
    }
}
class OneTimeBindingBehavior extends BindingModeBehavior {
    constructor() {
        super(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode.oneTime);
    }
}
class ToViewBindingBehavior extends BindingModeBehavior {
    constructor() {
        super(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode.toView);
    }
}
class FromViewBindingBehavior extends BindingModeBehavior {
    constructor() {
        super(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode.fromView);
    }
}
class TwoWayBindingBehavior extends BindingModeBehavior {
    constructor() {
        super(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode.twoWay);
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.bindingBehavior)('oneTime')(OneTimeBindingBehavior);
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.bindingBehavior)('toView')(ToViewBindingBehavior);
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.bindingBehavior)('fromView')(FromViewBindingBehavior);
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.bindingBehavior)('twoWay')(TwoWayBindingBehavior);
//# sourceMappingURL=binding-mode.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/debounce.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/debounce.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DebounceBindingBehavior": () => /* binding */ DebounceBindingBehavior
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");


class DebounceBindingBehavior extends _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingInterceptor {
    constructor(binding, expr) {
        super(binding, expr);
        this.opts = { delay: 0 };
        this.firstArg = null;
        this.task = null;
        this.taskQueue = binding.locator.get(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IPlatform).macroTaskQueue;
        if (expr.args.length > 0) {
            this.firstArg = expr.args[0];
        }
    }
    callSource(args) {
        this.queueTask(() => this.binding.callSource(args));
        return void 0;
    }
    handleChange(newValue, previousValue, flags) {
        this.queueTask(() => this.binding.handleChange(newValue, previousValue, flags));
    }
    queueTask(callback) {
        if (this.task !== null) {
            this.task.cancel();
        }
        this.task = this.taskQueue.queueTask(() => {
            this.task = null;
            return callback();
        }, this.opts);
    }
    $bind(flags, scope, hostScope) {
        if (this.firstArg !== null) {
            const delay = Number(this.firstArg.evaluate(flags, scope, hostScope, this.locator, null));
            if (!isNaN(delay)) {
                this.opts.delay = delay;
            }
        }
        this.binding.$bind(flags, scope, hostScope);
    }
    $unbind(flags) {
        this.task?.cancel();
        this.task = null;
        this.binding.$unbind(flags);
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.bindingBehavior)('debounce')(DebounceBindingBehavior);
//# sourceMappingURL=debounce.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/signals.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/signals.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignalBindingBehavior": () => /* binding */ SignalBindingBehavior
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};

let SignalBindingBehavior = class SignalBindingBehavior {
    constructor(signaler) {
        this.signaler = signaler;
        this.lookup = new Map();
    }
    bind(flags, scope, hostScope, binding, ...names) {
        if (!('handleChange' in binding)) {
            throw new Error(`The signal behavior can only be used with bindings that have a 'handleChange' method`);
        }
        if (names.length === 0) {
            throw new Error(`At least one signal name must be passed to the signal behavior, e.g. \`expr & signal:'my-signal'\``);
        }
        this.lookup.set(binding, names);
        for (const name of names) {
            this.signaler.addSignalListener(name, binding);
        }
    }
    unbind(flags, scope, hostScope, binding) {
        const names = this.lookup.get(binding);
        this.lookup.delete(binding);
        for (const name of names) {
            this.signaler.removeSignalListener(name, binding);
        }
    }
};
SignalBindingBehavior = __decorate([
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.ISignaler)
], SignalBindingBehavior);

(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.bindingBehavior)('signal')(SignalBindingBehavior);
//# sourceMappingURL=signals.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/throttle.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/throttle.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ThrottleBindingBehavior": () => /* binding */ ThrottleBindingBehavior
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");


class ThrottleBindingBehavior extends _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingInterceptor {
    constructor(binding, expr) {
        super(binding, expr);
        this.opts = { delay: 0 };
        this.firstArg = null;
        this.task = null;
        this.lastCall = 0;
        this.platform = binding.locator.get(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IPlatform);
        this.taskQueue = this.platform.macroTaskQueue;
        if (expr.args.length > 0) {
            this.firstArg = expr.args[0];
        }
    }
    callSource(args) {
        this.queueTask(() => this.binding.callSource(args));
        return void 0;
    }
    handleChange(newValue, previousValue, flags) {
        this.queueTask(() => this.binding.handleChange(newValue, previousValue, flags));
    }
    queueTask(callback) {
        const opts = this.opts;
        const platform = this.platform;
        const nextDelay = this.lastCall + opts.delay - platform.performanceNow();
        if (nextDelay > 0) {
            if (this.task !== null) {
                this.task.cancel();
            }
            opts.delay = nextDelay;
            this.task = this.taskQueue.queueTask(() => {
                this.lastCall = platform.performanceNow();
                this.task = null;
                callback();
            }, opts);
        }
        else {
            this.lastCall = platform.performanceNow();
            callback();
        }
    }
    $bind(flags, scope, hostScope) {
        if (this.firstArg !== null) {
            const delay = Number(this.firstArg.evaluate(flags, scope, hostScope, this.locator, null));
            if (!isNaN(delay)) {
                this.opts.delay = delay;
            }
        }
        this.binding.$bind(flags, scope, hostScope);
    }
    $unbind(flags) {
        this.task?.cancel();
        this.task = null;
        super.$unbind(flags);
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.bindingBehavior)('throttle')(ThrottleBindingBehavior);
//# sourceMappingURL=throttle.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding/attribute.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding/attribute.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AttributeBinding": () => /* binding */ AttributeBinding
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _observation_element_attribute_observer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observation/element-attribute-observer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/element-attribute-observer.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");



// BindingMode is not a const enum (and therefore not inlined), so assigning them to a variable to save a member accessor is a minor perf tweak
const { oneTime, toView, fromView } = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode;
// pre-combining flags for bitwise checks is a minor perf tweak
const toViewOrOneTime = toView | oneTime;
const taskOptions = {
    reusable: false,
    preempt: true,
};
/**
 * Attribute binding. Handle attribute binding betwen view/view model. Understand Html special attributes
 */
class AttributeBinding {
    constructor(sourceExpression, target, 
    // some attributes may have inner structure
    // such as class -> collection of class names
    // such as style -> collection of style rules
    //
    // for normal attributes, targetAttribute and targetProperty are the same and can be ignore
    targetAttribute, targetProperty, mode, observerLocator, locator) {
        this.sourceExpression = sourceExpression;
        this.targetAttribute = targetAttribute;
        this.targetProperty = targetProperty;
        this.mode = mode;
        this.observerLocator = observerLocator;
        this.locator = locator;
        this.interceptor = this;
        this.isBound = false;
        this.$scope = null;
        this.$hostScope = null;
        this.task = null;
        this.persistentFlags = 0 /* none */;
        this.value = void 0;
        this.target = target;
        _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable.assignIdTo(this);
        this.$platform = locator.get(_platform_js__WEBPACK_IMPORTED_MODULE_2__.IPlatform);
    }
    updateTarget(value, flags) {
        flags |= this.persistentFlags;
        this.targetObserver.setValue(value, flags | 8 /* updateTarget */, this.target, this.targetProperty);
    }
    updateSource(value, flags) {
        flags |= this.persistentFlags;
        this.sourceExpression.assign(flags | 16 /* updateSource */, this.$scope, this.$hostScope, this.locator, value);
    }
    handleChange(newValue, _previousValue, flags) {
        if (!this.isBound) {
            return;
        }
        flags |= this.persistentFlags;
        const mode = this.mode;
        const interceptor = this.interceptor;
        const sourceExpression = this.sourceExpression;
        const $scope = this.$scope;
        const locator = this.locator;
        if (mode === _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode.fromView) {
            flags &= ~8 /* updateTarget */;
            flags |= 16 /* updateSource */;
        }
        if (flags & 8 /* updateTarget */) {
            const targetObserver = this.targetObserver;
            // Alpha: during bind a simple strategy for bind is always flush immediately
            // todo:
            //  (1). determine whether this should be the behavior
            //  (2). if not, then fix tests to reflect the changes/platform to properly yield all with aurelia.start()
            const shouldQueueFlush = (flags & 32 /* fromBind */) === 0 && (targetObserver.type & 4 /* Layout */) > 0;
            if (sourceExpression.$kind !== 10082 /* AccessScope */ || this.obs.count > 1) {
                const shouldConnect = (mode & oneTime) === 0;
                if (shouldConnect) {
                    this.obs.version++;
                }
                newValue = sourceExpression.evaluate(flags, $scope, this.$hostScope, locator, interceptor);
                if (shouldConnect) {
                    this.obs.clear(false);
                }
            }
            if (newValue !== this.value) {
                this.value = newValue;
                if (shouldQueueFlush) {
                    this.task?.cancel();
                    this.task = this.$platform.domWriteQueue.queueTask(() => {
                        this.task = null;
                        interceptor.updateTarget(newValue, flags);
                    }, taskOptions);
                }
                else {
                    interceptor.updateTarget(newValue, flags);
                }
            }
            return;
        }
        if (flags & 16 /* updateSource */) {
            if (newValue !== sourceExpression.evaluate(flags, $scope, this.$hostScope, locator, null)) {
                interceptor.updateSource(newValue, flags);
            }
            return;
        }
        throw new Error('Unexpected handleChange context in AttributeBinding');
    }
    $bind(flags, scope, hostScope, projection) {
        if (this.isBound) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 32 /* fromBind */);
        }
        // Store flags which we can only receive during $bind and need to pass on
        // to the AST during evaluate/connect/assign
        this.persistentFlags = flags & 15367 /* persistentBindingFlags */;
        this.$scope = scope;
        this.$hostScope = hostScope;
        this.projection = projection;
        let sourceExpression = this.sourceExpression;
        if (sourceExpression.hasBind) {
            sourceExpression.bind(flags, scope, hostScope, this.interceptor);
        }
        let targetObserver = this.targetObserver;
        if (!targetObserver) {
            targetObserver = this.targetObserver = new _observation_element_attribute_observer_js__WEBPACK_IMPORTED_MODULE_1__.AttributeObserver(this.$platform, this.observerLocator, this.target, this.targetProperty, this.targetAttribute);
        }
        // during bind, binding behavior might have changed sourceExpression
        sourceExpression = this.sourceExpression;
        const $mode = this.mode;
        const interceptor = this.interceptor;
        if ($mode & toViewOrOneTime) {
            const shouldConnect = ($mode & toView) > 0;
            interceptor.updateTarget(this.value = sourceExpression.evaluate(flags, scope, this.$hostScope, this.locator, shouldConnect ? interceptor : null), flags);
        }
        if ($mode & fromView) {
            targetObserver[this.id] |= 16 /* updateSource */;
            targetObserver.subscribe(interceptor);
        }
        this.isBound = true;
    }
    $unbind(flags) {
        if (!this.isBound) {
            return;
        }
        // clear persistent flags
        this.persistentFlags = 0 /* none */;
        if (this.sourceExpression.hasUnbind) {
            this.sourceExpression.unbind(flags, this.$scope, this.$hostScope, this.interceptor);
        }
        this.$scope
            = this.$hostScope
                = null;
        this.value = void 0;
        const targetObserver = this.targetObserver;
        if (targetObserver.unsubscribe) {
            targetObserver.unsubscribe(this.interceptor);
            targetObserver[this.id] &= ~16 /* updateSource */;
        }
        this.task?.cancel();
        this.task = null;
        this.obs.clear(true);
        // remove isBound and isUnbinding flags
        this.isBound = false;
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable)(AttributeBinding);
//# sourceMappingURL=attribute.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding/call-binding.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding/call-binding.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CallBinding": () => /* binding */ CallBinding
/* harmony export */ });
class CallBinding {
    constructor(sourceExpression, target, targetProperty, observerLocator, locator) {
        this.sourceExpression = sourceExpression;
        this.target = target;
        this.targetProperty = targetProperty;
        this.locator = locator;
        this.interceptor = this;
        this.isBound = false;
        this.$hostScope = null;
        this.targetObserver = observerLocator.getObserver(target, targetProperty);
    }
    callSource(args) {
        const overrideContext = this.$scope.overrideContext;
        // really need to delete the following line
        // and the for..in loop below
        // convenience in the template won't outweight the draw back of such confusing feature
        // OR, at the very least, use getter/setter for each property in args to get/set original source
        // ---
        Object.assign(overrideContext, args);
        const result = this.sourceExpression.evaluate(128 /* mustEvaluate */, this.$scope, this.$hostScope, this.locator, null);
        for (const prop in args) {
            Reflect.deleteProperty(overrideContext, prop);
        }
        return result;
    }
    $bind(flags, scope, hostScope) {
        if (this.isBound) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 32 /* fromBind */);
        }
        this.$scope = scope;
        this.$hostScope = hostScope;
        if (this.sourceExpression.hasBind) {
            this.sourceExpression.bind(flags, scope, hostScope, this.interceptor);
        }
        this.targetObserver.setValue(($args) => this.interceptor.callSource($args), flags, this.target, this.targetProperty);
        // add isBound flag and remove isBinding flag
        this.isBound = true;
    }
    $unbind(flags) {
        if (!this.isBound) {
            return;
        }
        if (this.sourceExpression.hasUnbind) {
            this.sourceExpression.unbind(flags, this.$scope, this.$hostScope, this.interceptor);
        }
        this.$scope = void 0;
        this.targetObserver.setValue(null, flags, this.target, this.targetProperty);
        this.isBound = false;
    }
    observeProperty(obj, propertyName) {
        return;
    }
    handleChange(newValue, previousValue, flags) {
        return;
    }
}
//# sourceMappingURL=call-binding.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding/interpolation-binding.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding/interpolation-binding.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InterpolationBinding": () => /* binding */ InterpolationBinding,
/* harmony export */   "ContentBinding": () => /* binding */ ContentBinding
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");

const { toView } = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode;
const queueTaskOptions = {
    reusable: false,
    preempt: true,
};
// a pseudo binding to manage multiple InterpolationBinding s
// ========
// Note: the child expressions of an Interpolation expression are full Aurelia expressions, meaning they may include
// value converters and binding behaviors.
// Each expression represents one ${interpolation}, and for each we create a child TextBinding unless there is only one,
// in which case the renderer will create the TextBinding directly
class InterpolationBinding {
    constructor(observerLocator, interpolation, target, targetProperty, mode, locator, taskQueue) {
        this.observerLocator = observerLocator;
        this.interpolation = interpolation;
        this.target = target;
        this.targetProperty = targetProperty;
        this.mode = mode;
        this.locator = locator;
        this.taskQueue = taskQueue;
        this.interceptor = this;
        this.isBound = false;
        this.$scope = void 0;
        this.$hostScope = null;
        this.task = null;
        this.targetObserver = observerLocator.getAccessor(target, targetProperty);
        const expressions = interpolation.expressions;
        const partBindings = this.partBindings = Array(expressions.length);
        for (let i = 0, ii = expressions.length; i < ii; ++i) {
            partBindings[i] = new ContentBinding(expressions[i], target, targetProperty, locator, observerLocator, this);
        }
    }
    updateTarget(value, flags) {
        const partBindings = this.partBindings;
        const staticParts = this.interpolation.parts;
        const ii = partBindings.length;
        let result = '';
        if (ii === 1) {
            result = staticParts[0] + partBindings[0].value + staticParts[1];
        }
        else {
            result = staticParts[0];
            for (let i = 0; ii > i; ++i) {
                result += partBindings[i].value + staticParts[i + 1];
            }
        }
        const targetObserver = this.targetObserver;
        // Alpha: during bind a simple strategy for bind is always flush immediately
        // todo:
        //  (1). determine whether this should be the behavior
        //  (2). if not, then fix tests to reflect the changes/platform to properly yield all with aurelia.start().wait()
        const shouldQueueFlush = (flags & 32 /* fromBind */) === 0 && (targetObserver.type & 4 /* Layout */) > 0;
        if (shouldQueueFlush) {
            this.task?.cancel();
            this.task = this.taskQueue.queueTask(() => {
                this.task = null;
                targetObserver.setValue(result, flags, this.target, this.targetProperty);
            }, queueTaskOptions);
        }
        else {
            targetObserver.setValue(result, flags, this.target, this.targetProperty);
        }
    }
    $bind(flags, scope, hostScope) {
        if (this.isBound) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags);
        }
        this.isBound = true;
        this.$scope = scope;
        const partBindings = this.partBindings;
        for (let i = 0, ii = partBindings.length; ii > i; ++i) {
            partBindings[i].$bind(flags, scope, hostScope);
        }
        this.updateTarget(void 0, flags);
    }
    $unbind(flags) {
        if (!this.isBound) {
            return;
        }
        this.isBound = false;
        this.$scope = void 0;
        const partBindings = this.partBindings;
        for (let i = 0, ii = partBindings.length; i < ii; ++i) {
            partBindings[i].interceptor.$unbind(flags);
        }
        this.task?.cancel();
        this.task = null;
    }
}
class ContentBinding {
    constructor(sourceExpression, target, targetProperty, locator, observerLocator, owner) {
        this.sourceExpression = sourceExpression;
        this.target = target;
        this.targetProperty = targetProperty;
        this.locator = locator;
        this.observerLocator = observerLocator;
        this.owner = owner;
        this.interceptor = this;
        // at runtime, mode may be overriden by binding behavior
        // but it wouldn't matter here, just start with something for later check
        this.mode = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode.toView;
        this.value = '';
        this.$hostScope = null;
        this.task = null;
        this.isBound = false;
    }
    handleChange(newValue, oldValue, flags) {
        if (!this.isBound) {
            return;
        }
        const sourceExpression = this.sourceExpression;
        const obsRecord = this.obs;
        const canOptimize = sourceExpression.$kind === 10082 /* AccessScope */ && obsRecord.count === 1;
        if (!canOptimize) {
            const shouldConnect = (this.mode & toView) > 0;
            if (shouldConnect) {
                obsRecord.version++;
            }
            newValue = sourceExpression.evaluate(flags, this.$scope, this.$hostScope, this.locator, shouldConnect ? this.interceptor : null);
            if (shouldConnect) {
                obsRecord.clear(false);
            }
        }
        if (newValue != this.value) {
            this.value = newValue;
            if (newValue instanceof Array) {
                this.observeCollection(newValue);
            }
            this.owner.updateTarget(newValue, flags);
        }
    }
    handleCollectionChange(indexMap, flags) {
        this.owner.updateTarget(void 0, flags);
    }
    $bind(flags, scope, hostScope) {
        if (this.isBound) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags);
        }
        this.isBound = true;
        this.$scope = scope;
        this.$hostScope = hostScope;
        if (this.sourceExpression.hasBind) {
            this.sourceExpression.bind(flags, scope, hostScope, this.interceptor);
        }
        const v = this.value = this.sourceExpression.evaluate(flags, scope, hostScope, this.locator, (this.mode & toView) > 0 ? this.interceptor : null);
        if (v instanceof Array) {
            this.observeCollection(v);
        }
    }
    $unbind(flags) {
        if (!this.isBound) {
            return;
        }
        this.isBound = false;
        if (this.sourceExpression.hasUnbind) {
            this.sourceExpression.unbind(flags, this.$scope, this.$hostScope, this.interceptor);
        }
        this.$scope = void 0;
        this.$hostScope = null;
        this.obs.clear(true);
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable)(ContentBinding);
//# sourceMappingURL=interpolation-binding.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding/let-binding.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding/let-binding.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LetBinding": () => /* binding */ LetBinding
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");

class LetBinding {
    constructor(sourceExpression, targetProperty, observerLocator, locator, toBindingContext = false) {
        this.sourceExpression = sourceExpression;
        this.targetProperty = targetProperty;
        this.observerLocator = observerLocator;
        this.locator = locator;
        this.toBindingContext = toBindingContext;
        this.interceptor = this;
        this.isBound = false;
        this.$scope = void 0;
        this.$hostScope = null;
        this.task = null;
        this.target = null;
        _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable.assignIdTo(this);
    }
    handleChange(_newValue, _previousValue, flags) {
        if (!this.isBound) {
            return;
        }
        if (flags & 8 /* updateTarget */) {
            const target = this.target;
            const targetProperty = this.targetProperty;
            const previousValue = target[targetProperty];
            this.obs.version++;
            const newValue = this.sourceExpression.evaluate(flags, this.$scope, this.$hostScope, this.locator, this.interceptor);
            this.obs.clear(false);
            if (newValue !== previousValue) {
                target[targetProperty] = newValue;
            }
            return;
        }
        throw new Error('Unexpected handleChange context in LetBinding');
    }
    $bind(flags, scope, hostScope) {
        if (this.isBound) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 32 /* fromBind */);
        }
        this.$scope = scope;
        this.$hostScope = hostScope;
        this.target = (this.toBindingContext ? (hostScope ?? scope).bindingContext : (hostScope ?? scope).overrideContext);
        const sourceExpression = this.sourceExpression;
        if (sourceExpression.hasBind) {
            sourceExpression.bind(flags, scope, hostScope, this.interceptor);
        }
        // sourceExpression might have been changed during bind
        this.target[this.targetProperty]
            = this.sourceExpression.evaluate(flags | 32 /* fromBind */, scope, hostScope, this.locator, this.interceptor);
        // add isBound flag and remove isBinding flag
        this.isBound = true;
    }
    $unbind(flags) {
        if (!this.isBound) {
            return;
        }
        const sourceExpression = this.sourceExpression;
        if (sourceExpression.hasUnbind) {
            sourceExpression.unbind(flags, this.$scope, this.$hostScope, this.interceptor);
        }
        this.$scope = void 0;
        this.$hostScope = null;
        this.obs.clear(true);
        // remove isBound and isUnbinding flags
        this.isBound = false;
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable)(LetBinding);
//# sourceMappingURL=let-binding.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding/listener.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding/listener.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Listener": () => /* binding */ Listener
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");


const options = {
    [_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.DelegationStrategy.capturing]: { capture: true },
    [_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.DelegationStrategy.bubbling]: { capture: false },
};
/**
 * Listener binding. Handle event binding between view and view model
 */
class Listener {
    constructor(platform, targetEvent, delegationStrategy, sourceExpression, target, preventDefault, eventDelegator, locator) {
        this.platform = platform;
        this.targetEvent = targetEvent;
        this.delegationStrategy = delegationStrategy;
        this.sourceExpression = sourceExpression;
        this.target = target;
        this.preventDefault = preventDefault;
        this.eventDelegator = eventDelegator;
        this.locator = locator;
        this.interceptor = this;
        this.isBound = false;
        this.$hostScope = null;
        this.handler = null;
    }
    callSource(event) {
        const overrideContext = this.$scope.overrideContext;
        overrideContext.$event = event;
        const result = this.sourceExpression.evaluate(128 /* mustEvaluate */, this.$scope, this.$hostScope, this.locator, null);
        Reflect.deleteProperty(overrideContext, '$event');
        if (result !== true && this.preventDefault) {
            event.preventDefault();
        }
        return result;
    }
    handleEvent(event) {
        this.interceptor.callSource(event);
    }
    $bind(flags, scope, hostScope) {
        if (this.isBound) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 32 /* fromBind */);
        }
        this.$scope = scope;
        this.$hostScope = hostScope;
        const sourceExpression = this.sourceExpression;
        if (sourceExpression.hasBind) {
            sourceExpression.bind(flags, scope, hostScope, this.interceptor);
        }
        if (this.delegationStrategy === _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.DelegationStrategy.none) {
            this.target.addEventListener(this.targetEvent, this);
        }
        else {
            const eventTarget = this.locator.get(_dom_js__WEBPACK_IMPORTED_MODULE_1__.IEventTarget);
            this.handler = this.eventDelegator.addEventListener(eventTarget, this.target, this.targetEvent, this, options[this.delegationStrategy]);
        }
        // add isBound flag and remove isBinding flag
        this.isBound = true;
    }
    $unbind(flags) {
        if (!this.isBound) {
            return;
        }
        const sourceExpression = this.sourceExpression;
        if (sourceExpression.hasUnbind) {
            sourceExpression.unbind(flags, this.$scope, this.$hostScope, this.interceptor);
        }
        this.$scope = null;
        if (this.delegationStrategy === _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.DelegationStrategy.none) {
            this.target.removeEventListener(this.targetEvent, this);
        }
        else {
            this.handler.dispose();
            this.handler = null;
        }
        // remove isBound and isUnbinding flags
        this.isBound = false;
    }
    observeProperty(obj, propertyName) {
        return;
    }
    handleChange(newValue, previousValue, flags) {
        return;
    }
}
//# sourceMappingURL=listener.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding/property-binding.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding/property-binding.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PropertyBinding": () => /* binding */ PropertyBinding
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");

// BindingMode is not a const enum (and therefore not inlined), so assigning them to a variable to save a member accessor is a minor perf tweak
const { oneTime, toView, fromView } = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode;
// pre-combining flags for bitwise checks is a minor perf tweak
const toViewOrOneTime = toView | oneTime;
const updateTaskOpts = {
    reusable: false,
    preempt: true,
};
class PropertyBinding {
    constructor(sourceExpression, target, targetProperty, mode, observerLocator, locator, taskQueue) {
        this.sourceExpression = sourceExpression;
        this.target = target;
        this.targetProperty = targetProperty;
        this.mode = mode;
        this.observerLocator = observerLocator;
        this.locator = locator;
        this.taskQueue = taskQueue;
        this.interceptor = this;
        this.isBound = false;
        this.$scope = void 0;
        this.$hostScope = null;
        this.targetObserver = void 0;
        this.persistentFlags = 0 /* none */;
        this.task = null;
        _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable.assignIdTo(this);
    }
    updateTarget(value, flags) {
        flags |= this.persistentFlags;
        this.targetObserver.setValue(value, flags, this.target, this.targetProperty);
    }
    updateSource(value, flags) {
        flags |= this.persistentFlags;
        this.sourceExpression.assign(flags, this.$scope, this.$hostScope, this.locator, value);
    }
    handleChange(newValue, _previousValue, flags) {
        if (!this.isBound) {
            return;
        }
        flags |= this.persistentFlags;
        const targetObserver = this.targetObserver;
        const interceptor = this.interceptor;
        const sourceExpression = this.sourceExpression;
        const $scope = this.$scope;
        const locator = this.locator;
        if ((flags & 8 /* updateTarget */) > 0) {
            // Alpha: during bind a simple strategy for bind is always flush immediately
            // todo:
            //  (1). determine whether this should be the behavior
            //  (2). if not, then fix tests to reflect the changes/platform to properly yield all with aurelia.start()
            const shouldQueueFlush = (flags & 32 /* fromBind */) === 0 && (targetObserver.type & 4 /* Layout */) > 0;
            const obsRecord = this.obs;
            // if the only observable is an AccessScope then we can assume the passed-in newValue is the correct and latest value
            if (sourceExpression.$kind !== 10082 /* AccessScope */ || obsRecord.count > 1) {
                // todo: in VC expressions, from view also requires connect
                const shouldConnect = this.mode > oneTime;
                if (shouldConnect) {
                    obsRecord.version++;
                }
                newValue = sourceExpression.evaluate(flags, $scope, this.$hostScope, locator, interceptor);
                if (shouldConnect) {
                    obsRecord.clear(false);
                }
            }
            if (shouldQueueFlush) {
                this.task?.cancel();
                this.task = this.taskQueue.queueTask(() => {
                    interceptor.updateTarget(newValue, flags);
                    this.task = null;
                }, updateTaskOpts);
            }
            else {
                interceptor.updateTarget(newValue, flags);
            }
            return;
        }
        if ((flags & 16 /* updateSource */) > 0) {
            if (newValue !== sourceExpression.evaluate(flags, $scope, this.$hostScope, locator, null)) {
                interceptor.updateSource(newValue, flags);
            }
            return;
        }
        throw new Error('Unexpected handleChange context in PropertyBinding');
    }
    $bind(flags, scope, hostScope) {
        if (this.isBound) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 32 /* fromBind */);
        }
        // Force property binding to always be strict
        flags |= 4 /* isStrictBindingStrategy */;
        // Store flags which we can only receive during $bind and need to pass on
        // to the AST during evaluate/connect/assign
        this.persistentFlags = flags & 15367 /* persistentBindingFlags */;
        this.$scope = scope;
        this.$hostScope = hostScope;
        let sourceExpression = this.sourceExpression;
        if (sourceExpression.hasBind) {
            sourceExpression.bind(flags, scope, hostScope, this.interceptor);
        }
        const $mode = this.mode;
        let targetObserver = this.targetObserver;
        if (!targetObserver) {
            const observerLocator = this.observerLocator;
            if ($mode & fromView) {
                targetObserver = observerLocator.getObserver(this.target, this.targetProperty);
            }
            else {
                targetObserver = observerLocator.getAccessor(this.target, this.targetProperty);
            }
            this.targetObserver = targetObserver;
        }
        // during bind, binding behavior might have changed sourceExpression
        // deepscan-disable-next-line
        sourceExpression = this.sourceExpression;
        const interceptor = this.interceptor;
        const shouldConnect = ($mode & toView) > 0;
        if ($mode & toViewOrOneTime) {
            interceptor.updateTarget(sourceExpression.evaluate(flags, scope, this.$hostScope, this.locator, shouldConnect ? interceptor : null), flags);
        }
        if ($mode & fromView) {
            targetObserver.subscribe(interceptor);
            if (!shouldConnect) {
                interceptor.updateSource(targetObserver.getValue(this.target, this.targetProperty), flags);
            }
            targetObserver[this.id] |= 16 /* updateSource */;
        }
        this.isBound = true;
    }
    $unbind(flags) {
        if (!this.isBound) {
            return;
        }
        this.persistentFlags = 0 /* none */;
        if (this.sourceExpression.hasUnbind) {
            this.sourceExpression.unbind(flags, this.$scope, this.$hostScope, this.interceptor);
        }
        this.$scope = void 0;
        this.$hostScope = null;
        const targetObserver = this.targetObserver;
        const task = this.task;
        if (targetObserver.unsubscribe) {
            targetObserver.unsubscribe(this.interceptor);
            targetObserver[this.id] &= ~16 /* updateSource */;
        }
        if (task != null) {
            task.cancel();
            this.task = null;
        }
        this.obs.clear(true);
        this.isBound = false;
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable)(PropertyBinding);
//# sourceMappingURL=property-binding.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/binding/ref-binding.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/binding/ref-binding.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RefBinding": () => /* binding */ RefBinding
/* harmony export */ });
class RefBinding {
    constructor(sourceExpression, target, locator) {
        this.sourceExpression = sourceExpression;
        this.target = target;
        this.locator = locator;
        this.interceptor = this;
        this.isBound = false;
        this.$scope = void 0;
        this.$hostScope = null;
    }
    $bind(flags, scope, hostScope) {
        if (this.isBound) {
            if (this.$scope === scope) {
                return;
            }
            this.interceptor.$unbind(flags | 32 /* fromBind */);
        }
        this.$scope = scope;
        this.$hostScope = hostScope;
        if (this.sourceExpression.hasBind) {
            this.sourceExpression.bind(flags, scope, hostScope, this);
        }
        this.sourceExpression.assign(flags | 16 /* updateSource */, this.$scope, hostScope, this.locator, this.target);
        // add isBound flag and remove isBinding flag
        this.isBound = true;
    }
    $unbind(flags) {
        if (!this.isBound) {
            return;
        }
        let sourceExpression = this.sourceExpression;
        if (sourceExpression.evaluate(flags, this.$scope, this.$hostScope, this.locator, null) === this.target) {
            sourceExpression.assign(flags, this.$scope, this.$hostScope, this.locator, null);
        }
        // source expression might have been modified durring assign, via a BB
        // deepscan-disable-next-line
        sourceExpression = this.sourceExpression;
        if (sourceExpression.hasUnbind) {
            sourceExpression.unbind(flags, this.$scope, this.$hostScope, this.interceptor);
        }
        this.$scope = void 0;
        this.$hostScope = null;
        this.isBound = false;
    }
    observeProperty(obj, propertyName) {
        return;
    }
    handleChange(newValue, previousValue, flags) {
        return;
    }
}
//# sourceMappingURL=ref-binding.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/configuration.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/configuration.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DebounceBindingBehaviorRegistration": () => /* binding */ DebounceBindingBehaviorRegistration,
/* harmony export */   "OneTimeBindingBehaviorRegistration": () => /* binding */ OneTimeBindingBehaviorRegistration,
/* harmony export */   "ToViewBindingBehaviorRegistration": () => /* binding */ ToViewBindingBehaviorRegistration,
/* harmony export */   "FromViewBindingBehaviorRegistration": () => /* binding */ FromViewBindingBehaviorRegistration,
/* harmony export */   "SignalBindingBehaviorRegistration": () => /* binding */ SignalBindingBehaviorRegistration,
/* harmony export */   "ThrottleBindingBehaviorRegistration": () => /* binding */ ThrottleBindingBehaviorRegistration,
/* harmony export */   "TwoWayBindingBehaviorRegistration": () => /* binding */ TwoWayBindingBehaviorRegistration,
/* harmony export */   "ITemplateCompilerRegistration": () => /* binding */ ITemplateCompilerRegistration,
/* harmony export */   "INodeObserverLocatorRegistration": () => /* binding */ INodeObserverLocatorRegistration,
/* harmony export */   "DefaultComponents": () => /* binding */ DefaultComponents,
/* harmony export */   "SVGAnalyzerRegistration": () => /* binding */ SVGAnalyzerRegistration,
/* harmony export */   "AtPrefixedTriggerAttributePatternRegistration": () => /* binding */ AtPrefixedTriggerAttributePatternRegistration,
/* harmony export */   "ColonPrefixedBindAttributePatternRegistration": () => /* binding */ ColonPrefixedBindAttributePatternRegistration,
/* harmony export */   "RefAttributePatternRegistration": () => /* binding */ RefAttributePatternRegistration,
/* harmony export */   "DotSeparatedAttributePatternRegistration": () => /* binding */ DotSeparatedAttributePatternRegistration,
/* harmony export */   "DefaultBindingSyntax": () => /* binding */ DefaultBindingSyntax,
/* harmony export */   "ShortHandBindingSyntax": () => /* binding */ ShortHandBindingSyntax,
/* harmony export */   "CallBindingCommandRegistration": () => /* binding */ CallBindingCommandRegistration,
/* harmony export */   "DefaultBindingCommandRegistration": () => /* binding */ DefaultBindingCommandRegistration,
/* harmony export */   "ForBindingCommandRegistration": () => /* binding */ ForBindingCommandRegistration,
/* harmony export */   "FromViewBindingCommandRegistration": () => /* binding */ FromViewBindingCommandRegistration,
/* harmony export */   "OneTimeBindingCommandRegistration": () => /* binding */ OneTimeBindingCommandRegistration,
/* harmony export */   "ToViewBindingCommandRegistration": () => /* binding */ ToViewBindingCommandRegistration,
/* harmony export */   "TwoWayBindingCommandRegistration": () => /* binding */ TwoWayBindingCommandRegistration,
/* harmony export */   "RefBindingCommandRegistration": () => /* binding */ RefBindingCommandRegistration,
/* harmony export */   "TriggerBindingCommandRegistration": () => /* binding */ TriggerBindingCommandRegistration,
/* harmony export */   "DelegateBindingCommandRegistration": () => /* binding */ DelegateBindingCommandRegistration,
/* harmony export */   "CaptureBindingCommandRegistration": () => /* binding */ CaptureBindingCommandRegistration,
/* harmony export */   "AttrBindingCommandRegistration": () => /* binding */ AttrBindingCommandRegistration,
/* harmony export */   "ClassBindingCommandRegistration": () => /* binding */ ClassBindingCommandRegistration,
/* harmony export */   "StyleBindingCommandRegistration": () => /* binding */ StyleBindingCommandRegistration,
/* harmony export */   "DefaultBindingLanguage": () => /* binding */ DefaultBindingLanguage,
/* harmony export */   "SanitizeValueConverterRegistration": () => /* binding */ SanitizeValueConverterRegistration,
/* harmony export */   "ViewValueConverterRegistration": () => /* binding */ ViewValueConverterRegistration,
/* harmony export */   "FrequentMutationsRegistration": () => /* binding */ FrequentMutationsRegistration,
/* harmony export */   "ObserveShallowRegistration": () => /* binding */ ObserveShallowRegistration,
/* harmony export */   "IfRegistration": () => /* binding */ IfRegistration,
/* harmony export */   "ElseRegistration": () => /* binding */ ElseRegistration,
/* harmony export */   "RepeatRegistration": () => /* binding */ RepeatRegistration,
/* harmony export */   "WithRegistration": () => /* binding */ WithRegistration,
/* harmony export */   "SwitchRegistration": () => /* binding */ SwitchRegistration,
/* harmony export */   "CaseRegistration": () => /* binding */ CaseRegistration,
/* harmony export */   "DefaultCaseRegistration": () => /* binding */ DefaultCaseRegistration,
/* harmony export */   "AttrBindingBehaviorRegistration": () => /* binding */ AttrBindingBehaviorRegistration,
/* harmony export */   "SelfBindingBehaviorRegistration": () => /* binding */ SelfBindingBehaviorRegistration,
/* harmony export */   "UpdateTriggerBindingBehaviorRegistration": () => /* binding */ UpdateTriggerBindingBehaviorRegistration,
/* harmony export */   "ComposeRegistration": () => /* binding */ ComposeRegistration,
/* harmony export */   "PortalRegistration": () => /* binding */ PortalRegistration,
/* harmony export */   "FocusRegistration": () => /* binding */ FocusRegistration,
/* harmony export */   "BlurRegistration": () => /* binding */ BlurRegistration,
/* harmony export */   "ShowRegistration": () => /* binding */ ShowRegistration,
/* harmony export */   "DefaultResources": () => /* binding */ DefaultResources,
/* harmony export */   "CallBindingRendererRegistration": () => /* binding */ CallBindingRendererRegistration,
/* harmony export */   "CustomAttributeRendererRegistration": () => /* binding */ CustomAttributeRendererRegistration,
/* harmony export */   "CustomElementRendererRegistration": () => /* binding */ CustomElementRendererRegistration,
/* harmony export */   "InterpolationBindingRendererRegistration": () => /* binding */ InterpolationBindingRendererRegistration,
/* harmony export */   "IteratorBindingRendererRegistration": () => /* binding */ IteratorBindingRendererRegistration,
/* harmony export */   "LetElementRendererRegistration": () => /* binding */ LetElementRendererRegistration,
/* harmony export */   "PropertyBindingRendererRegistration": () => /* binding */ PropertyBindingRendererRegistration,
/* harmony export */   "RefBindingRendererRegistration": () => /* binding */ RefBindingRendererRegistration,
/* harmony export */   "SetPropertyRendererRegistration": () => /* binding */ SetPropertyRendererRegistration,
/* harmony export */   "TemplateControllerRendererRegistration": () => /* binding */ TemplateControllerRendererRegistration,
/* harmony export */   "ListenerBindingRendererRegistration": () => /* binding */ ListenerBindingRendererRegistration,
/* harmony export */   "AttributeBindingRendererRegistration": () => /* binding */ AttributeBindingRendererRegistration,
/* harmony export */   "SetAttributeRendererRegistration": () => /* binding */ SetAttributeRendererRegistration,
/* harmony export */   "SetClassAttributeRendererRegistration": () => /* binding */ SetClassAttributeRendererRegistration,
/* harmony export */   "SetStyleAttributeRendererRegistration": () => /* binding */ SetStyleAttributeRendererRegistration,
/* harmony export */   "StylePropertyBindingRendererRegistration": () => /* binding */ StylePropertyBindingRendererRegistration,
/* harmony export */   "TextBindingRendererRegistration": () => /* binding */ TextBindingRendererRegistration,
/* harmony export */   "DefaultRenderers": () => /* binding */ DefaultRenderers,
/* harmony export */   "StandardConfiguration": () => /* binding */ StandardConfiguration
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resources/attribute-pattern.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/attribute-pattern.js");
/* harmony import */ var _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resources/binding-command.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-command.js");
/* harmony import */ var _template_compiler_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./template-compiler.js */ "./node_modules/@aurelia/runtime-html/dist/esm/template-compiler.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./renderer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/renderer.js");
/* harmony import */ var _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./binding-behaviors/binding-mode.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/binding-mode.js");
/* harmony import */ var _binding_behaviors_debounce_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./binding-behaviors/debounce.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/debounce.js");
/* harmony import */ var _binding_behaviors_signals_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./binding-behaviors/signals.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/signals.js");
/* harmony import */ var _binding_behaviors_throttle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./binding-behaviors/throttle.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/throttle.js");
/* harmony import */ var _observation_svg_analyzer_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./observation/svg-analyzer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/svg-analyzer.js");
/* harmony import */ var _resources_binding_behaviors_attr_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./resources/binding-behaviors/attr.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/attr.js");
/* harmony import */ var _resources_binding_behaviors_self_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./resources/binding-behaviors/self.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/self.js");
/* harmony import */ var _resources_binding_behaviors_update_trigger_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./resources/binding-behaviors/update-trigger.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/update-trigger.js");
/* harmony import */ var _resources_custom_attributes_blur_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./resources/custom-attributes/blur.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/blur.js");
/* harmony import */ var _resources_custom_attributes_focus_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./resources/custom-attributes/focus.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/focus.js");
/* harmony import */ var _resources_custom_attributes_show_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./resources/custom-attributes/show.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/show.js");
/* harmony import */ var _resources_template_controllers_portal_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./resources/template-controllers/portal.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/portal.js");
/* harmony import */ var _resources_template_controllers_flags_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./resources/template-controllers/flags.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/flags.js");
/* harmony import */ var _resources_template_controllers_if_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./resources/template-controllers/if.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/if.js");
/* harmony import */ var _resources_template_controllers_repeat_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./resources/template-controllers/repeat.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/repeat.js");
/* harmony import */ var _resources_template_controllers_with_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./resources/template-controllers/with.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/with.js");
/* harmony import */ var _resources_template_controllers_switch_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./resources/template-controllers/switch.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/switch.js");
/* harmony import */ var _resources_custom_elements_compose_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./resources/custom-elements/compose.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-elements/compose.js");
/* harmony import */ var _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./resources/custom-elements/au-slot.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-elements/au-slot.js");
/* harmony import */ var _resources_value_converters_sanitize_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./resources/value-converters/sanitize.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/value-converters/sanitize.js");
/* harmony import */ var _resources_value_converters_view_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./resources/value-converters/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/value-converters/view.js");
/* harmony import */ var _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./observation/observer-locator.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/observer-locator.js");



























const DebounceBindingBehaviorRegistration = _binding_behaviors_debounce_js__WEBPACK_IMPORTED_MODULE_6__.DebounceBindingBehavior;
const OneTimeBindingBehaviorRegistration = _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__.OneTimeBindingBehavior;
const ToViewBindingBehaviorRegistration = _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__.ToViewBindingBehavior;
const FromViewBindingBehaviorRegistration = _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__.FromViewBindingBehavior;
const SignalBindingBehaviorRegistration = _binding_behaviors_signals_js__WEBPACK_IMPORTED_MODULE_7__.SignalBindingBehavior;
const ThrottleBindingBehaviorRegistration = _binding_behaviors_throttle_js__WEBPACK_IMPORTED_MODULE_8__.ThrottleBindingBehavior;
const TwoWayBindingBehaviorRegistration = _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__.TwoWayBindingBehavior;
const ITemplateCompilerRegistration = _template_compiler_js__WEBPACK_IMPORTED_MODULE_3__.TemplateCompiler;
const INodeObserverLocatorRegistration = _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_26__.NodeObserverLocator;
/**
 * Default HTML-specific (but environment-agnostic) implementations for the following interfaces:
 * - `ITemplateCompiler`
 * - `ITargetAccessorLocator`
 * - `ITargetObserverLocator`
 */
const DefaultComponents = [
    ITemplateCompilerRegistration,
    INodeObserverLocatorRegistration,
];
const SVGAnalyzerRegistration = _observation_svg_analyzer_js__WEBPACK_IMPORTED_MODULE_9__.SVGAnalyzer;
const AtPrefixedTriggerAttributePatternRegistration = _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_1__.AtPrefixedTriggerAttributePattern;
const ColonPrefixedBindAttributePatternRegistration = _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_1__.ColonPrefixedBindAttributePattern;
const RefAttributePatternRegistration = _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_1__.RefAttributePattern;
const DotSeparatedAttributePatternRegistration = _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_1__.DotSeparatedAttributePattern;
/**
 * Default binding syntax for the following attribute name patterns:
 * - `ref`
 * - `target.command` (dot-separated)
 */
const DefaultBindingSyntax = [
    RefAttributePatternRegistration,
    DotSeparatedAttributePatternRegistration
];
/**
 * Binding syntax for short-hand attribute name patterns:
 * - `@target` (short-hand for `target.trigger`)
 * - `:target` (short-hand for `target.bind`)
 */
const ShortHandBindingSyntax = [
    AtPrefixedTriggerAttributePatternRegistration,
    ColonPrefixedBindAttributePatternRegistration
];
const CallBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.CallBindingCommand;
const DefaultBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.DefaultBindingCommand;
const ForBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.ForBindingCommand;
const FromViewBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.FromViewBindingCommand;
const OneTimeBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.OneTimeBindingCommand;
const ToViewBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.ToViewBindingCommand;
const TwoWayBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.TwoWayBindingCommand;
const RefBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.RefBindingCommand;
const TriggerBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.TriggerBindingCommand;
const DelegateBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.DelegateBindingCommand;
const CaptureBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.CaptureBindingCommand;
const AttrBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.AttrBindingCommand;
const ClassBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.ClassBindingCommand;
const StyleBindingCommandRegistration = _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.StyleBindingCommand;
/**
 * Default HTML-specific (but environment-agnostic) binding commands:
 * - Property observation: `.bind`, `.one-time`, `.from-view`, `.to-view`, `.two-way`
 * - Function call: `.call`
 * - Collection observation: `.for`
 * - Event listeners: `.trigger`, `.delegate`, `.capture`
 */
const DefaultBindingLanguage = [
    DefaultBindingCommandRegistration,
    OneTimeBindingCommandRegistration,
    FromViewBindingCommandRegistration,
    ToViewBindingCommandRegistration,
    TwoWayBindingCommandRegistration,
    CallBindingCommandRegistration,
    ForBindingCommandRegistration,
    RefBindingCommandRegistration,
    TriggerBindingCommandRegistration,
    DelegateBindingCommandRegistration,
    CaptureBindingCommandRegistration,
    ClassBindingCommandRegistration,
    StyleBindingCommandRegistration,
    AttrBindingCommandRegistration,
];
const SanitizeValueConverterRegistration = _resources_value_converters_sanitize_js__WEBPACK_IMPORTED_MODULE_24__.SanitizeValueConverter;
const ViewValueConverterRegistration = _resources_value_converters_view_js__WEBPACK_IMPORTED_MODULE_25__.ViewValueConverter;
const FrequentMutationsRegistration = _resources_template_controllers_flags_js__WEBPACK_IMPORTED_MODULE_17__.FrequentMutations;
const ObserveShallowRegistration = _resources_template_controllers_flags_js__WEBPACK_IMPORTED_MODULE_17__.ObserveShallow;
const IfRegistration = _resources_template_controllers_if_js__WEBPACK_IMPORTED_MODULE_18__.If;
const ElseRegistration = _resources_template_controllers_if_js__WEBPACK_IMPORTED_MODULE_18__.Else;
const RepeatRegistration = _resources_template_controllers_repeat_js__WEBPACK_IMPORTED_MODULE_19__.Repeat;
const WithRegistration = _resources_template_controllers_with_js__WEBPACK_IMPORTED_MODULE_20__.With;
const SwitchRegistration = _resources_template_controllers_switch_js__WEBPACK_IMPORTED_MODULE_21__.Switch;
const CaseRegistration = _resources_template_controllers_switch_js__WEBPACK_IMPORTED_MODULE_21__.Case;
const DefaultCaseRegistration = _resources_template_controllers_switch_js__WEBPACK_IMPORTED_MODULE_21__.DefaultCase;
const AttrBindingBehaviorRegistration = _resources_binding_behaviors_attr_js__WEBPACK_IMPORTED_MODULE_10__.AttrBindingBehavior;
const SelfBindingBehaviorRegistration = _resources_binding_behaviors_self_js__WEBPACK_IMPORTED_MODULE_11__.SelfBindingBehavior;
const UpdateTriggerBindingBehaviorRegistration = _resources_binding_behaviors_update_trigger_js__WEBPACK_IMPORTED_MODULE_12__.UpdateTriggerBindingBehavior;
const ComposeRegistration = _resources_custom_elements_compose_js__WEBPACK_IMPORTED_MODULE_22__.Compose;
const PortalRegistration = _resources_template_controllers_portal_js__WEBPACK_IMPORTED_MODULE_16__.Portal;
const FocusRegistration = _resources_custom_attributes_focus_js__WEBPACK_IMPORTED_MODULE_14__.Focus;
const BlurRegistration = _resources_custom_attributes_blur_js__WEBPACK_IMPORTED_MODULE_13__.Blur;
const ShowRegistration = _resources_custom_attributes_show_js__WEBPACK_IMPORTED_MODULE_15__.Show;
/**
 * Default HTML-specific (but environment-agnostic) resources:
 * - Binding Behaviors: `oneTime`, `toView`, `fromView`, `twoWay`, `signal`, `debounce`, `throttle`, `attr`, `self`, `updateTrigger`
 * - Custom Elements: `au-compose`, `au-slot`
 * - Custom Attributes: `blur`, `focus`, `portal`
 * - Template controllers: `if`/`else`, `repeat`, `with`
 * - Value Converters: `sanitize`
 */
const DefaultResources = [
    DebounceBindingBehaviorRegistration,
    OneTimeBindingBehaviorRegistration,
    ToViewBindingBehaviorRegistration,
    FromViewBindingBehaviorRegistration,
    SignalBindingBehaviorRegistration,
    ThrottleBindingBehaviorRegistration,
    TwoWayBindingBehaviorRegistration,
    SanitizeValueConverterRegistration,
    ViewValueConverterRegistration,
    FrequentMutationsRegistration,
    ObserveShallowRegistration,
    IfRegistration,
    ElseRegistration,
    RepeatRegistration,
    WithRegistration,
    SwitchRegistration,
    CaseRegistration,
    DefaultCaseRegistration,
    AttrBindingBehaviorRegistration,
    SelfBindingBehaviorRegistration,
    UpdateTriggerBindingBehaviorRegistration,
    ComposeRegistration,
    PortalRegistration,
    FocusRegistration,
    BlurRegistration,
    ShowRegistration,
    _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_23__.AuSlot,
];
const CallBindingRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.CallBindingRenderer;
const CustomAttributeRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.CustomAttributeRenderer;
const CustomElementRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.CustomElementRenderer;
const InterpolationBindingRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.InterpolationBindingRenderer;
const IteratorBindingRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.IteratorBindingRenderer;
const LetElementRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.LetElementRenderer;
const PropertyBindingRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.PropertyBindingRenderer;
const RefBindingRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.RefBindingRenderer;
const SetPropertyRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.SetPropertyRenderer;
const TemplateControllerRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.TemplateControllerRenderer;
const ListenerBindingRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.ListenerBindingRenderer;
const AttributeBindingRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.AttributeBindingRenderer;
const SetAttributeRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.SetAttributeRenderer;
const SetClassAttributeRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.SetClassAttributeRenderer;
const SetStyleAttributeRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.SetStyleAttributeRenderer;
const StylePropertyBindingRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.StylePropertyBindingRenderer;
const TextBindingRendererRegistration = _renderer_js__WEBPACK_IMPORTED_MODULE_4__.TextBindingRenderer;
/**
 * Default renderers for:
 * - PropertyBinding: `bind`, `one-time`, `to-view`, `from-view`, `two-way`
 * - IteratorBinding: `for`
 * - CallBinding: `call`
 * - RefBinding: `ref`
 * - InterpolationBinding: `${}`
 * - SetProperty
 * - `customElement` hydration
 * - `customAttribute` hydration
 * - `templateController` hydration
 * - `let` element hydration
 * - Listener Bindings: `trigger`, `capture`, `delegate`
 * - SetAttribute
 * - StyleProperty: `style`, `css`
 * - TextBinding: `${}`
 */
const DefaultRenderers = [
    PropertyBindingRendererRegistration,
    IteratorBindingRendererRegistration,
    CallBindingRendererRegistration,
    RefBindingRendererRegistration,
    InterpolationBindingRendererRegistration,
    SetPropertyRendererRegistration,
    CustomElementRendererRegistration,
    CustomAttributeRendererRegistration,
    TemplateControllerRendererRegistration,
    LetElementRendererRegistration,
    ListenerBindingRendererRegistration,
    AttributeBindingRendererRegistration,
    SetAttributeRendererRegistration,
    SetClassAttributeRendererRegistration,
    SetStyleAttributeRendererRegistration,
    StylePropertyBindingRendererRegistration,
    TextBindingRendererRegistration,
];
/**
 * A DI configuration object containing html-specific (but environment-agnostic) registrations:
 * - `RuntimeConfiguration` from `@aurelia/runtime`
 * - `DefaultComponents`
 * - `DefaultResources`
 * - `DefaultRenderers`
 */
const StandardConfiguration = {
    /**
     * Apply this configuration to the provided container.
     */
    register(container) {
        return container.register(...DefaultComponents, ...DefaultResources, ...DefaultBindingSyntax, ...DefaultBindingLanguage, ...DefaultRenderers);
    },
    /**
     * Create a new container with this configuration applied to it.
     */
    createContainer() {
        return this.register(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createContainer());
    }
};
//# sourceMappingURL=configuration.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/create-element.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/create-element.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createElement": () => /* binding */ createElement,
/* harmony export */   "RenderPlan": () => /* binding */ RenderPlan
/* harmony export */ });
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/renderer.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
/* harmony import */ var _templating_render_context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./templating/render-context.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/render-context.js");



function createElement(p, tagOrType, props, children) {
    if (typeof tagOrType === 'string') {
        return createElementForTag(p, tagOrType, props, children);
    }
    else if (_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_1__.CustomElement.isType(tagOrType)) {
        return createElementForType(p, tagOrType, props, children);
    }
    else {
        throw new Error(`Invalid tagOrType.`);
    }
}
/**
 * RenderPlan. Todo: describe goal of this class
 */
class RenderPlan {
    constructor(node, instructions, dependencies) {
        this.node = node;
        this.instructions = instructions;
        this.dependencies = dependencies;
        this.lazyDefinition = void 0;
    }
    get definition() {
        if (this.lazyDefinition === void 0) {
            this.lazyDefinition = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_1__.CustomElementDefinition.create({
                name: _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_1__.CustomElement.generateName(),
                template: this.node,
                needsCompile: typeof this.node === 'string',
                instructions: this.instructions,
                dependencies: this.dependencies,
            });
        }
        return this.lazyDefinition;
    }
    getContext(parentContainer) {
        return (0,_templating_render_context_js__WEBPACK_IMPORTED_MODULE_2__.getRenderContext)(this.definition, parentContainer);
    }
    createView(parentContainer) {
        return this.getViewFactory(parentContainer).create();
    }
    getViewFactory(parentContainer) {
        return this.getContext(parentContainer).getViewFactory();
    }
    /** @internal */
    mergeInto(parent, instructions, dependencies) {
        parent.appendChild(this.node);
        instructions.push(...this.instructions);
        dependencies.push(...this.dependencies);
    }
}
function createElementForTag(p, tagName, props, children) {
    const instructions = [];
    const allInstructions = [];
    const dependencies = [];
    const element = p.document.createElement(tagName);
    let hasInstructions = false;
    if (props) {
        Object.keys(props)
            .forEach(to => {
            const value = props[to];
            if ((0,_renderer_js__WEBPACK_IMPORTED_MODULE_0__.isInstruction)(value)) {
                hasInstructions = true;
                instructions.push(value);
            }
            else {
                element.setAttribute(to, value);
            }
        });
    }
    if (hasInstructions) {
        element.className = 'au';
        allInstructions.push(instructions);
    }
    if (children) {
        addChildren(p, element, children, allInstructions, dependencies);
    }
    return new RenderPlan(element, allInstructions, dependencies);
}
function createElementForType(p, Type, props, children) {
    const definition = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_1__.CustomElement.getDefinition(Type);
    const tagName = definition.name;
    const instructions = [];
    const allInstructions = [instructions];
    const dependencies = [];
    const childInstructions = [];
    const bindables = definition.bindables;
    const element = p.document.createElement(tagName);
    element.className = 'au';
    if (!dependencies.includes(Type)) {
        dependencies.push(Type);
    }
    instructions.push(new _renderer_js__WEBPACK_IMPORTED_MODULE_0__.HydrateElementInstruction(tagName, void 0, childInstructions, null));
    if (props) {
        Object.keys(props)
            .forEach(to => {
            const value = props[to];
            if ((0,_renderer_js__WEBPACK_IMPORTED_MODULE_0__.isInstruction)(value)) {
                childInstructions.push(value);
            }
            else {
                const bindable = bindables[to];
                if (bindable !== void 0) {
                    childInstructions.push({
                        type: "re" /* setProperty */,
                        to,
                        value
                    });
                }
                else {
                    childInstructions.push(new _renderer_js__WEBPACK_IMPORTED_MODULE_0__.SetAttributeInstruction(value, to));
                }
            }
        });
    }
    if (children) {
        addChildren(p, element, children, allInstructions, dependencies);
    }
    return new RenderPlan(element, allInstructions, dependencies);
}
function addChildren(p, parent, children, allInstructions, dependencies) {
    for (let i = 0, ii = children.length; i < ii; ++i) {
        const current = children[i];
        switch (typeof current) {
            case 'string':
                parent.appendChild(p.document.createTextNode(current));
                break;
            case 'object':
                if (current instanceof p.Node) {
                    parent.appendChild(current);
                }
                else if ('mergeInto' in current) {
                    current.mergeInto(parent, allInstructions, dependencies);
                }
        }
    }
}
//# sourceMappingURL=create-element.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js":
/*!************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/dom.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "INode": () => /* binding */ INode,
/* harmony export */   "IEventTarget": () => /* binding */ IEventTarget,
/* harmony export */   "IRenderLocation": () => /* binding */ IRenderLocation,
/* harmony export */   "NodeType": () => /* binding */ NodeType,
/* harmony export */   "getEffectiveParentNode": () => /* binding */ getEffectiveParentNode,
/* harmony export */   "setEffectiveParentNode": () => /* binding */ setEffectiveParentNode,
/* harmony export */   "convertToRenderLocation": () => /* binding */ convertToRenderLocation,
/* harmony export */   "isRenderLocation": () => /* binding */ isRenderLocation,
/* harmony export */   "FragmentNodeSequence": () => /* binding */ FragmentNodeSequence,
/* harmony export */   "IWindow": () => /* binding */ IWindow,
/* harmony export */   "ILocation": () => /* binding */ ILocation,
/* harmony export */   "IHistory": () => /* binding */ IHistory
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _app_root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app-root.js */ "./node_modules/@aurelia/runtime-html/dist/esm/app-root.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");




const INode = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('INode');
const IEventTarget = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IEventTarget', x => x.cachedCallback(handler => {
    if (handler.has(_app_root_js__WEBPACK_IMPORTED_MODULE_1__.IAppRoot, true)) {
        return handler.get(_app_root_js__WEBPACK_IMPORTED_MODULE_1__.IAppRoot).host;
    }
    return handler.get(_platform_js__WEBPACK_IMPORTED_MODULE_2__.IPlatform).document;
}));
const IRenderLocation = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IRenderLocation');
var NodeType;
(function (NodeType) {
    NodeType[NodeType["Element"] = 1] = "Element";
    NodeType[NodeType["Attr"] = 2] = "Attr";
    NodeType[NodeType["Text"] = 3] = "Text";
    NodeType[NodeType["CDATASection"] = 4] = "CDATASection";
    NodeType[NodeType["EntityReference"] = 5] = "EntityReference";
    NodeType[NodeType["Entity"] = 6] = "Entity";
    NodeType[NodeType["ProcessingInstruction"] = 7] = "ProcessingInstruction";
    NodeType[NodeType["Comment"] = 8] = "Comment";
    NodeType[NodeType["Document"] = 9] = "Document";
    NodeType[NodeType["DocumentType"] = 10] = "DocumentType";
    NodeType[NodeType["DocumentFragment"] = 11] = "DocumentFragment";
    NodeType[NodeType["Notation"] = 12] = "Notation";
})(NodeType || (NodeType = {}));
const effectiveParentNodeOverrides = new WeakMap();
/**
 * Returns the effective parentNode according to Aurelia's component hierarchy.
 *
 * Used by Aurelia to find the closest parent controller relative to a node.
 *
 * This method supports 3 additional scenarios that `node.parentNode` does not support:
 * - Containerless elements. The parentNode in this case is a comment precending the element under specific conditions, rather than a node wrapping the element.
 * - ShadowDOM. If a `ShadowRoot` is encountered, this method retrieves the associated controller via the metadata api to locate the original host.
 * - Portals. If the provided node was moved to a different location in the DOM by a `portal` attribute, then the original parent of the node will be returned.
 *
 * @param node - The node to get the parent for.
 * @returns Either the closest parent node, the closest `IRenderLocation` (comment node that is the containerless host), original portal host, or `null` if this is either the absolute document root or a disconnected node.
 */
function getEffectiveParentNode(node) {
    // TODO: this method needs more tests!
    // First look for any overrides
    if (effectiveParentNodeOverrides.has(node)) {
        return effectiveParentNodeOverrides.get(node);
    }
    // Then try to get the nearest au-start render location, which would be the containerless parent,
    // again looking for any overrides along the way.
    // otherwise return the normal parent node
    let containerlessOffset = 0;
    let next = node.nextSibling;
    while (next !== null) {
        if (next.nodeType === 8 /* Comment */) {
            switch (next.textContent) {
                case 'au-start':
                    // If we see an au-start before we see au-end, it will precede the host of a sibling containerless element rather than a parent.
                    // So we use the offset to ignore the next au-end
                    ++containerlessOffset;
                    break;
                case 'au-end':
                    if (containerlessOffset-- === 0) {
                        return next;
                    }
            }
        }
        next = next.nextSibling;
    }
    if (node.parentNode === null && node.nodeType === 11 /* DocumentFragment */) {
        // Could be a shadow root; see if there's a controller and if so, get the original host via the projector
        const controller = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__.CustomElement.for(node);
        if (controller === void 0) {
            // Not a shadow root (or at least, not one created by Aurelia)
            // Nothing more we can try, just return null
            return null;
        }
        if (controller.mountTarget === 2 /* shadowRoot */) {
            return getEffectiveParentNode(controller.host);
        }
    }
    return node.parentNode;
}
function setEffectiveParentNode(childNodeOrNodeSequence, parentNode) {
    if (childNodeOrNodeSequence.platform !== void 0 && !(childNodeOrNodeSequence instanceof childNodeOrNodeSequence.platform.Node)) {
        const nodes = childNodeOrNodeSequence.childNodes;
        for (let i = 0, ii = nodes.length; i < ii; ++i) {
            effectiveParentNodeOverrides.set(nodes[i], parentNode);
        }
    }
    else {
        effectiveParentNodeOverrides.set(childNodeOrNodeSequence, parentNode);
    }
}
function convertToRenderLocation(node) {
    if (isRenderLocation(node)) {
        return node; // it's already a IRenderLocation (converted by FragmentNodeSequence)
    }
    const locationEnd = node.ownerDocument.createComment('au-end');
    const locationStart = node.ownerDocument.createComment('au-start');
    if (node.parentNode !== null) {
        node.parentNode.replaceChild(locationEnd, node);
        locationEnd.parentNode.insertBefore(locationStart, locationEnd);
    }
    locationEnd.$start = locationStart;
    return locationEnd;
}
function isRenderLocation(node) {
    return node.textContent === 'au-end';
}
class FragmentNodeSequence {
    constructor(platform, fragment) {
        this.platform = platform;
        this.fragment = fragment;
        this.isMounted = false;
        this.isLinked = false;
        this.next = void 0;
        this.refNode = void 0;
        const targetNodeList = fragment.querySelectorAll('.au');
        let i = 0;
        let ii = targetNodeList.length;
        const targets = this.targets = Array(ii);
        while (i < ii) {
            // eagerly convert all markers to RenderLocations (otherwise the renderer
            // will do it anyway) and store them in the target list (since the comments
            // can't be queried)
            const target = targetNodeList[i];
            if (target.nodeName === 'AU-M') {
                // note the renderer will still call this method, but it will just return the
                // location if it sees it's already a location
                targets[i] = convertToRenderLocation(target);
            }
            else {
                // also store non-markers for consistent ordering
                targets[i] = target;
            }
            ++i;
        }
        const childNodeList = fragment.childNodes;
        i = 0;
        ii = childNodeList.length;
        const childNodes = this.childNodes = Array(ii);
        while (i < ii) {
            childNodes[i] = childNodeList[i];
            ++i;
        }
        this.firstChild = fragment.firstChild;
        this.lastChild = fragment.lastChild;
    }
    findTargets() {
        return this.targets;
    }
    insertBefore(refNode) {
        if (this.isLinked && !!this.refNode) {
            this.addToLinked();
        }
        else {
            const parent = refNode.parentNode;
            if (this.isMounted) {
                let current = this.firstChild;
                const end = this.lastChild;
                let next;
                while (current != null) {
                    next = current.nextSibling;
                    parent.insertBefore(current, refNode);
                    if (current === end) {
                        break;
                    }
                    current = next;
                }
            }
            else {
                this.isMounted = true;
                refNode.parentNode.insertBefore(this.fragment, refNode);
            }
        }
    }
    appendTo(parent, enhance = false) {
        if (this.isMounted) {
            let current = this.firstChild;
            const end = this.lastChild;
            let next;
            while (current != null) {
                next = current.nextSibling;
                parent.appendChild(current);
                if (current === end) {
                    break;
                }
                current = next;
            }
        }
        else {
            this.isMounted = true;
            if (!enhance) {
                parent.appendChild(this.fragment);
            }
        }
    }
    remove() {
        if (this.isMounted) {
            this.isMounted = false;
            const fragment = this.fragment;
            const end = this.lastChild;
            let next;
            let current = this.firstChild;
            while (current !== null) {
                next = current.nextSibling;
                fragment.appendChild(current);
                if (current === end) {
                    break;
                }
                current = next;
            }
        }
    }
    addToLinked() {
        const refNode = this.refNode;
        const parent = refNode.parentNode;
        if (this.isMounted) {
            let current = this.firstChild;
            const end = this.lastChild;
            let next;
            while (current != null) {
                next = current.nextSibling;
                parent.insertBefore(current, refNode);
                if (current === end) {
                    break;
                }
                current = next;
            }
        }
        else {
            this.isMounted = true;
            parent.insertBefore(this.fragment, refNode);
        }
    }
    unlink() {
        this.isLinked = false;
        this.next = void 0;
        this.refNode = void 0;
    }
    link(next) {
        this.isLinked = true;
        if (isRenderLocation(next)) {
            this.refNode = next;
        }
        else {
            this.next = next;
            this.obtainRefNode();
        }
    }
    obtainRefNode() {
        if (this.next !== void 0) {
            this.refNode = this.next.firstChild;
        }
        else {
            this.refNode = void 0;
        }
    }
}
const IWindow = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IWindow', x => x.callback(handler => handler.get(_platform_js__WEBPACK_IMPORTED_MODULE_2__.IPlatform).window));
const ILocation = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ILocation', x => x.callback(handler => handler.get(IWindow).location));
const IHistory = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IHistory', x => x.callback(handler => handler.get(IWindow).history));
//# sourceMappingURL=dom.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Platform": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__.Platform,
/* harmony export */   "TaskQueue": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__.TaskQueue,
/* harmony export */   "Task": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__.Task,
/* harmony export */   "TaskAbortError": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__.TaskAbortError,
/* harmony export */   "TaskQueuePriority": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__.TaskQueuePriority,
/* harmony export */   "TaskStatus": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__.TaskStatus,
/* harmony export */   "BrowserPlatform": () => /* reexport safe */ _aurelia_platform_browser__WEBPACK_IMPORTED_MODULE_1__.BrowserPlatform,
/* harmony export */   "bindable": () => /* reexport safe */ _bindable_js__WEBPACK_IMPORTED_MODULE_2__.bindable,
/* harmony export */   "Bindable": () => /* reexport safe */ _bindable_js__WEBPACK_IMPORTED_MODULE_2__.Bindable,
/* harmony export */   "BindableDefinition": () => /* reexport safe */ _bindable_js__WEBPACK_IMPORTED_MODULE_2__.BindableDefinition,
/* harmony export */   "BindableObserver": () => /* reexport safe */ _observation_bindable_observer_js__WEBPACK_IMPORTED_MODULE_3__.BindableObserver,
/* harmony export */   "DebounceBindingBehaviorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.DebounceBindingBehaviorRegistration,
/* harmony export */   "OneTimeBindingBehaviorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.OneTimeBindingBehaviorRegistration,
/* harmony export */   "ToViewBindingBehaviorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ToViewBindingBehaviorRegistration,
/* harmony export */   "FromViewBindingBehaviorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.FromViewBindingBehaviorRegistration,
/* harmony export */   "SignalBindingBehaviorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.SignalBindingBehaviorRegistration,
/* harmony export */   "ThrottleBindingBehaviorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ThrottleBindingBehaviorRegistration,
/* harmony export */   "TwoWayBindingBehaviorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.TwoWayBindingBehaviorRegistration,
/* harmony export */   "BindingModeBehavior": () => /* reexport safe */ _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__.BindingModeBehavior,
/* harmony export */   "OneTimeBindingBehavior": () => /* reexport safe */ _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__.OneTimeBindingBehavior,
/* harmony export */   "ToViewBindingBehavior": () => /* reexport safe */ _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__.ToViewBindingBehavior,
/* harmony export */   "FromViewBindingBehavior": () => /* reexport safe */ _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__.FromViewBindingBehavior,
/* harmony export */   "TwoWayBindingBehavior": () => /* reexport safe */ _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__.TwoWayBindingBehavior,
/* harmony export */   "DebounceBindingBehavior": () => /* reexport safe */ _binding_behaviors_debounce_js__WEBPACK_IMPORTED_MODULE_6__.DebounceBindingBehavior,
/* harmony export */   "SignalBindingBehavior": () => /* reexport safe */ _binding_behaviors_signals_js__WEBPACK_IMPORTED_MODULE_7__.SignalBindingBehavior,
/* harmony export */   "ThrottleBindingBehavior": () => /* reexport safe */ _binding_behaviors_throttle_js__WEBPACK_IMPORTED_MODULE_8__.ThrottleBindingBehavior,
/* harmony export */   "alias": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.alias,
/* harmony export */   "registerAliases": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.registerAliases,
/* harmony export */   "CallFunctionExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.CallFunctionExpression,
/* harmony export */   "CustomExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.CustomExpression,
/* harmony export */   "BindingBehaviorExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingBehaviorExpression,
/* harmony export */   "ValueConverterExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ValueConverterExpression,
/* harmony export */   "AssignExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.AssignExpression,
/* harmony export */   "ConditionalExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ConditionalExpression,
/* harmony export */   "AccessThisExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.AccessThisExpression,
/* harmony export */   "AccessScopeExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.AccessScopeExpression,
/* harmony export */   "AccessMemberExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.AccessMemberExpression,
/* harmony export */   "AccessKeyedExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.AccessKeyedExpression,
/* harmony export */   "CallScopeExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.CallScopeExpression,
/* harmony export */   "CallMemberExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.CallMemberExpression,
/* harmony export */   "BinaryExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BinaryExpression,
/* harmony export */   "UnaryExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.UnaryExpression,
/* harmony export */   "PrimitiveLiteralExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.PrimitiveLiteralExpression,
/* harmony export */   "HtmlLiteralExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.HtmlLiteralExpression,
/* harmony export */   "ArrayLiteralExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ArrayLiteralExpression,
/* harmony export */   "ObjectLiteralExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ObjectLiteralExpression,
/* harmony export */   "TemplateExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.TemplateExpression,
/* harmony export */   "TaggedTemplateExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.TaggedTemplateExpression,
/* harmony export */   "ArrayBindingPattern": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ArrayBindingPattern,
/* harmony export */   "ObjectBindingPattern": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ObjectBindingPattern,
/* harmony export */   "BindingIdentifier": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingIdentifier,
/* harmony export */   "ForOfStatement": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ForOfStatement,
/* harmony export */   "Interpolation": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.Interpolation,
/* harmony export */   "connectable": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.connectable,
/* harmony export */   "BindingMediator": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingMediator,
/* harmony export */   "IExpressionParser": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.IExpressionParser,
/* harmony export */   "BindingType": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingType,
/* harmony export */   "parseExpression": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.parseExpression,
/* harmony export */   "Char": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.Char,
/* harmony export */   "Access": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.Access,
/* harmony export */   "Precedence": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.Precedence,
/* harmony export */   "parse": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.parse,
/* harmony export */   "ParserState": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ParserState,
/* harmony export */   "ArrayObserver": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ArrayObserver,
/* harmony export */   "ArrayIndexObserver": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ArrayIndexObserver,
/* harmony export */   "enableArrayObservation": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.enableArrayObservation,
/* harmony export */   "disableArrayObservation": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.disableArrayObservation,
/* harmony export */   "applyMutationsToIndices": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.applyMutationsToIndices,
/* harmony export */   "synchronizeIndices": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.synchronizeIndices,
/* harmony export */   "MapObserver": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.MapObserver,
/* harmony export */   "enableMapObservation": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.enableMapObservation,
/* harmony export */   "disableMapObservation": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.disableMapObservation,
/* harmony export */   "SetObserver": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.SetObserver,
/* harmony export */   "enableSetObservation": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.enableSetObservation,
/* harmony export */   "disableSetObservation": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.disableSetObservation,
/* harmony export */   "BindingContext": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingContext,
/* harmony export */   "Scope": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.Scope,
/* harmony export */   "OverrideContext": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.OverrideContext,
/* harmony export */   "CollectionLengthObserver": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.CollectionLengthObserver,
/* harmony export */   "CollectionSizeObserver": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.CollectionSizeObserver,
/* harmony export */   "IDirtyChecker": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.IDirtyChecker,
/* harmony export */   "DirtyCheckProperty": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.DirtyCheckProperty,
/* harmony export */   "DirtyCheckSettings": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.DirtyCheckSettings,
/* harmony export */   "ComputedObserver": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ComputedObserver,
/* harmony export */   "observable": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.observable,
/* harmony export */   "IObserverLocator": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.IObserverLocator,
/* harmony export */   "INodeObserverLocator": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.INodeObserverLocator,
/* harmony export */   "getCollectionObserver": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.getCollectionObserver,
/* harmony export */   "ObserverLocator": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ObserverLocator,
/* harmony export */   "PrimitiveObserver": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.PrimitiveObserver,
/* harmony export */   "PropertyAccessor": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.PropertyAccessor,
/* harmony export */   "SetterObserver": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.SetterObserver,
/* harmony export */   "ISignaler": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ISignaler,
/* harmony export */   "subscriberCollection": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.subscriberCollection,
/* harmony export */   "bindingBehavior": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.bindingBehavior,
/* harmony export */   "BindingBehavior": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingBehavior,
/* harmony export */   "BindingBehaviorDefinition": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingBehaviorDefinition,
/* harmony export */   "BindingInterceptor": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingInterceptor,
/* harmony export */   "BindingBehaviorFactory": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingBehaviorFactory,
/* harmony export */   "BindingBehaviorStrategy": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingBehaviorStrategy,
/* harmony export */   "ValueConverter": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ValueConverter,
/* harmony export */   "ValueConverterDefinition": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ValueConverterDefinition,
/* harmony export */   "valueConverter": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.valueConverter,
/* harmony export */   "BindingMode": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.BindingMode,
/* harmony export */   "ExpressionKind": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.ExpressionKind,
/* harmony export */   "LifecycleFlags": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.LifecycleFlags,
/* harmony export */   "AccessorType": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.AccessorType,
/* harmony export */   "CollectionKind": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.CollectionKind,
/* harmony export */   "DelegationStrategy": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.DelegationStrategy,
/* harmony export */   "isIndexMap": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.isIndexMap,
/* harmony export */   "copyIndexMap": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.copyIndexMap,
/* harmony export */   "cloneIndexMap": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.cloneIndexMap,
/* harmony export */   "createIndexMap": () => /* reexport safe */ _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__.createIndexMap,
/* harmony export */   "Aurelia": () => /* reexport safe */ _aurelia_js__WEBPACK_IMPORTED_MODULE_10__.Aurelia,
/* harmony export */   "IAurelia": () => /* reexport safe */ _aurelia_js__WEBPACK_IMPORTED_MODULE_10__.IAurelia,
/* harmony export */   "AppRoot": () => /* reexport safe */ _app_root_js__WEBPACK_IMPORTED_MODULE_11__.AppRoot,
/* harmony export */   "IAppRoot": () => /* reexport safe */ _app_root_js__WEBPACK_IMPORTED_MODULE_11__.IAppRoot,
/* harmony export */   "AppTask": () => /* reexport safe */ _app_task_js__WEBPACK_IMPORTED_MODULE_12__.AppTask,
/* harmony export */   "IAppTask": () => /* reexport safe */ _app_task_js__WEBPACK_IMPORTED_MODULE_12__.IAppTask,
/* harmony export */   "AttrSyntax": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.AttrSyntax,
/* harmony export */   "IAttributeParser": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.IAttributeParser,
/* harmony export */   "attributePattern": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.attributePattern,
/* harmony export */   "IAttributePattern": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.IAttributePattern,
/* harmony export */   "AttributePattern": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.AttributePattern,
/* harmony export */   "Interpretation": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.Interpretation,
/* harmony export */   "ISyntaxInterpreter": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.ISyntaxInterpreter,
/* harmony export */   "AtPrefixedTriggerAttributePattern": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.AtPrefixedTriggerAttributePattern,
/* harmony export */   "ColonPrefixedBindAttributePattern": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.ColonPrefixedBindAttributePattern,
/* harmony export */   "DotSeparatedAttributePattern": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.DotSeparatedAttributePattern,
/* harmony export */   "RefAttributePattern": () => /* reexport safe */ _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__.RefAttributePattern,
/* harmony export */   "bindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.bindingCommand,
/* harmony export */   "BindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.BindingCommand,
/* harmony export */   "BindingCommandDefinition": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.BindingCommandDefinition,
/* harmony export */   "getTarget": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.getTarget,
/* harmony export */   "CallBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.CallBindingCommand,
/* harmony export */   "DefaultBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.DefaultBindingCommand,
/* harmony export */   "ForBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.ForBindingCommand,
/* harmony export */   "FromViewBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.FromViewBindingCommand,
/* harmony export */   "OneTimeBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.OneTimeBindingCommand,
/* harmony export */   "ToViewBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.ToViewBindingCommand,
/* harmony export */   "TwoWayBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.TwoWayBindingCommand,
/* harmony export */   "TriggerBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.TriggerBindingCommand,
/* harmony export */   "DelegateBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.DelegateBindingCommand,
/* harmony export */   "CaptureBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.CaptureBindingCommand,
/* harmony export */   "AttrBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.AttrBindingCommand,
/* harmony export */   "ClassBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.ClassBindingCommand,
/* harmony export */   "StyleBindingCommand": () => /* reexport safe */ _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__.StyleBindingCommand,
/* harmony export */   "IAttrSyntaxTransformer": () => /* reexport safe */ _attribute_syntax_transformer_js__WEBPACK_IMPORTED_MODULE_15__.IAttrSyntaxTransformer,
/* harmony export */   "Listener": () => /* reexport safe */ _binding_listener_js__WEBPACK_IMPORTED_MODULE_16__.Listener,
/* harmony export */   "AttributeBinding": () => /* reexport safe */ _binding_attribute_js__WEBPACK_IMPORTED_MODULE_17__.AttributeBinding,
/* harmony export */   "CallBinding": () => /* reexport safe */ _binding_call_binding_js__WEBPACK_IMPORTED_MODULE_18__.CallBinding,
/* harmony export */   "InterpolationBinding": () => /* reexport safe */ _binding_interpolation_binding_js__WEBPACK_IMPORTED_MODULE_19__.InterpolationBinding,
/* harmony export */   "LetBinding": () => /* reexport safe */ _binding_let_binding_js__WEBPACK_IMPORTED_MODULE_20__.LetBinding,
/* harmony export */   "PropertyBinding": () => /* reexport safe */ _binding_property_binding_js__WEBPACK_IMPORTED_MODULE_21__.PropertyBinding,
/* harmony export */   "RefBinding": () => /* reexport safe */ _binding_ref_binding_js__WEBPACK_IMPORTED_MODULE_22__.RefBinding,
/* harmony export */   "IRenderer": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.IRenderer,
/* harmony export */   "ITemplateCompiler": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.ITemplateCompiler,
/* harmony export */   "renderer": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.renderer,
/* harmony export */   "CallBindingInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.CallBindingInstruction,
/* harmony export */   "HydrateAttributeInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.HydrateAttributeInstruction,
/* harmony export */   "HydrateElementInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.HydrateElementInstruction,
/* harmony export */   "HydrateTemplateController": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.HydrateTemplateController,
/* harmony export */   "InterpolationInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.InterpolationInstruction,
/* harmony export */   "IteratorBindingInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.IteratorBindingInstruction,
/* harmony export */   "LetBindingInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.LetBindingInstruction,
/* harmony export */   "HydrateLetElementInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.HydrateLetElementInstruction,
/* harmony export */   "RefBindingInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.RefBindingInstruction,
/* harmony export */   "SetPropertyInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.SetPropertyInstruction,
/* harmony export */   "AttributeBindingInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.AttributeBindingInstruction,
/* harmony export */   "ListenerBindingInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.ListenerBindingInstruction,
/* harmony export */   "PropertyBindingInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.PropertyBindingInstruction,
/* harmony export */   "SetAttributeInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.SetAttributeInstruction,
/* harmony export */   "SetClassAttributeInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.SetClassAttributeInstruction,
/* harmony export */   "SetStyleAttributeInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.SetStyleAttributeInstruction,
/* harmony export */   "StylePropertyBindingInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.StylePropertyBindingInstruction,
/* harmony export */   "TextBindingInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.TextBindingInstruction,
/* harmony export */   "isInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.isInstruction,
/* harmony export */   "IInstruction": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.IInstruction,
/* harmony export */   "InstructionType": () => /* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_23__.InstructionType,
/* harmony export */   "AttributeNSAccessor": () => /* reexport safe */ _observation_attribute_ns_accessor_js__WEBPACK_IMPORTED_MODULE_24__.AttributeNSAccessor,
/* harmony export */   "CheckedObserver": () => /* reexport safe */ _observation_checked_observer_js__WEBPACK_IMPORTED_MODULE_25__.CheckedObserver,
/* harmony export */   "ClassAttributeAccessor": () => /* reexport safe */ _observation_class_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_26__.ClassAttributeAccessor,
/* harmony export */   "DataAttributeAccessor": () => /* reexport safe */ _observation_data_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_27__.DataAttributeAccessor,
/* harmony export */   "IEventDelegator": () => /* reexport safe */ _observation_event_delegator_js__WEBPACK_IMPORTED_MODULE_28__.IEventDelegator,
/* harmony export */   "EventSubscriber": () => /* reexport safe */ _observation_event_delegator_js__WEBPACK_IMPORTED_MODULE_28__.EventSubscriber,
/* harmony export */   "EventDelegator": () => /* reexport safe */ _observation_event_delegator_js__WEBPACK_IMPORTED_MODULE_28__.EventDelegator,
/* harmony export */   "NodeObserverConfig": () => /* reexport safe */ _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_29__.NodeObserverConfig,
/* harmony export */   "NodeObserverLocator": () => /* reexport safe */ _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_29__.NodeObserverLocator,
/* harmony export */   "SelectValueObserver": () => /* reexport safe */ _observation_select_value_observer_js__WEBPACK_IMPORTED_MODULE_30__.SelectValueObserver,
/* harmony export */   "StyleAttributeAccessor": () => /* reexport safe */ _observation_style_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_31__.StyleAttributeAccessor,
/* harmony export */   "ISVGAnalyzer": () => /* reexport safe */ _observation_svg_analyzer_js__WEBPACK_IMPORTED_MODULE_32__.ISVGAnalyzer,
/* harmony export */   "SVGAnalyzer": () => /* reexport safe */ _observation_svg_analyzer_js__WEBPACK_IMPORTED_MODULE_32__.SVGAnalyzer,
/* harmony export */   "NoopSVGAnalyzer": () => /* reexport safe */ _observation_svg_analyzer_js__WEBPACK_IMPORTED_MODULE_32__.NoopSVGAnalyzer,
/* harmony export */   "ValueAttributeObserver": () => /* reexport safe */ _observation_value_attribute_observer_js__WEBPACK_IMPORTED_MODULE_33__.ValueAttributeObserver,
/* harmony export */   "AttrBindingBehavior": () => /* reexport safe */ _resources_binding_behaviors_attr_js__WEBPACK_IMPORTED_MODULE_34__.AttrBindingBehavior,
/* harmony export */   "SelfBindingBehavior": () => /* reexport safe */ _resources_binding_behaviors_self_js__WEBPACK_IMPORTED_MODULE_35__.SelfBindingBehavior,
/* harmony export */   "UpdateTriggerBindingBehavior": () => /* reexport safe */ _resources_binding_behaviors_update_trigger_js__WEBPACK_IMPORTED_MODULE_36__.UpdateTriggerBindingBehavior,
/* harmony export */   "customAttribute": () => /* reexport safe */ _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_37__.customAttribute,
/* harmony export */   "CustomAttribute": () => /* reexport safe */ _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_37__.CustomAttribute,
/* harmony export */   "CustomAttributeDefinition": () => /* reexport safe */ _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_37__.CustomAttributeDefinition,
/* harmony export */   "templateController": () => /* reexport safe */ _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_37__.templateController,
/* harmony export */   "FrequentMutations": () => /* reexport safe */ _resources_template_controllers_flags_js__WEBPACK_IMPORTED_MODULE_38__.FrequentMutations,
/* harmony export */   "ObserveShallow": () => /* reexport safe */ _resources_template_controllers_flags_js__WEBPACK_IMPORTED_MODULE_38__.ObserveShallow,
/* harmony export */   "If": () => /* reexport safe */ _resources_template_controllers_if_js__WEBPACK_IMPORTED_MODULE_39__.If,
/* harmony export */   "Else": () => /* reexport safe */ _resources_template_controllers_if_js__WEBPACK_IMPORTED_MODULE_39__.Else,
/* harmony export */   "Repeat": () => /* reexport safe */ _resources_template_controllers_repeat_js__WEBPACK_IMPORTED_MODULE_40__.Repeat,
/* harmony export */   "With": () => /* reexport safe */ _resources_template_controllers_with_js__WEBPACK_IMPORTED_MODULE_41__.With,
/* harmony export */   "Switch": () => /* reexport safe */ _resources_template_controllers_switch_js__WEBPACK_IMPORTED_MODULE_42__.Switch,
/* harmony export */   "Case": () => /* reexport safe */ _resources_template_controllers_switch_js__WEBPACK_IMPORTED_MODULE_42__.Case,
/* harmony export */   "DefaultCase": () => /* reexport safe */ _resources_template_controllers_switch_js__WEBPACK_IMPORTED_MODULE_42__.DefaultCase,
/* harmony export */   "Blur": () => /* reexport safe */ _resources_custom_attributes_blur_js__WEBPACK_IMPORTED_MODULE_43__.Blur,
/* harmony export */   "BlurManager": () => /* reexport safe */ _resources_custom_attributes_blur_js__WEBPACK_IMPORTED_MODULE_43__.BlurManager,
/* harmony export */   "Focus": () => /* reexport safe */ _resources_custom_attributes_focus_js__WEBPACK_IMPORTED_MODULE_44__.Focus,
/* harmony export */   "Portal": () => /* reexport safe */ _resources_template_controllers_portal_js__WEBPACK_IMPORTED_MODULE_45__.Portal,
/* harmony export */   "AuSlot": () => /* reexport safe */ _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_46__.AuSlot,
/* harmony export */   "IProjections": () => /* reexport safe */ _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_46__.IProjections,
/* harmony export */   "SlotInfo": () => /* reexport safe */ _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_46__.SlotInfo,
/* harmony export */   "AuSlotContentType": () => /* reexport safe */ _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_46__.AuSlotContentType,
/* harmony export */   "RegisteredProjections": () => /* reexport safe */ _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_46__.RegisteredProjections,
/* harmony export */   "IProjectionProvider": () => /* reexport safe */ _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_46__.IProjectionProvider,
/* harmony export */   "ProjectionContext": () => /* reexport safe */ _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_46__.ProjectionContext,
/* harmony export */   "containerless": () => /* reexport safe */ _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_47__.containerless,
/* harmony export */   "customElement": () => /* reexport safe */ _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_47__.customElement,
/* harmony export */   "CustomElement": () => /* reexport safe */ _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_47__.CustomElement,
/* harmony export */   "CustomElementDefinition": () => /* reexport safe */ _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_47__.CustomElementDefinition,
/* harmony export */   "useShadowDOM": () => /* reexport safe */ _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_47__.useShadowDOM,
/* harmony export */   "Compose": () => /* reexport safe */ _resources_custom_elements_compose_js__WEBPACK_IMPORTED_MODULE_48__.Compose,
/* harmony export */   "ISanitizer": () => /* reexport safe */ _resources_value_converters_sanitize_js__WEBPACK_IMPORTED_MODULE_49__.ISanitizer,
/* harmony export */   "SanitizeValueConverter": () => /* reexport safe */ _resources_value_converters_sanitize_js__WEBPACK_IMPORTED_MODULE_49__.SanitizeValueConverter,
/* harmony export */   "ViewValueConverter": () => /* reexport safe */ _resources_value_converters_view_js__WEBPACK_IMPORTED_MODULE_50__.ViewValueConverter,
/* harmony export */   "ITemplateCompilerRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ITemplateCompilerRegistration,
/* harmony export */   "INodeObserverLocatorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.INodeObserverLocatorRegistration,
/* harmony export */   "DefaultComponents": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.DefaultComponents,
/* harmony export */   "RefAttributePatternRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.RefAttributePatternRegistration,
/* harmony export */   "DotSeparatedAttributePatternRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.DotSeparatedAttributePatternRegistration,
/* harmony export */   "DefaultBindingSyntax": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.DefaultBindingSyntax,
/* harmony export */   "AtPrefixedTriggerAttributePatternRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.AtPrefixedTriggerAttributePatternRegistration,
/* harmony export */   "ColonPrefixedBindAttributePatternRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ColonPrefixedBindAttributePatternRegistration,
/* harmony export */   "ShortHandBindingSyntax": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ShortHandBindingSyntax,
/* harmony export */   "SVGAnalyzerRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.SVGAnalyzerRegistration,
/* harmony export */   "CallBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.CallBindingCommandRegistration,
/* harmony export */   "DefaultBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.DefaultBindingCommandRegistration,
/* harmony export */   "ForBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ForBindingCommandRegistration,
/* harmony export */   "RefBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.RefBindingCommandRegistration,
/* harmony export */   "FromViewBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.FromViewBindingCommandRegistration,
/* harmony export */   "OneTimeBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.OneTimeBindingCommandRegistration,
/* harmony export */   "ToViewBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ToViewBindingCommandRegistration,
/* harmony export */   "TwoWayBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.TwoWayBindingCommandRegistration,
/* harmony export */   "TriggerBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.TriggerBindingCommandRegistration,
/* harmony export */   "DelegateBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.DelegateBindingCommandRegistration,
/* harmony export */   "CaptureBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.CaptureBindingCommandRegistration,
/* harmony export */   "AttrBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.AttrBindingCommandRegistration,
/* harmony export */   "ClassBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ClassBindingCommandRegistration,
/* harmony export */   "StyleBindingCommandRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.StyleBindingCommandRegistration,
/* harmony export */   "DefaultBindingLanguage": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.DefaultBindingLanguage,
/* harmony export */   "ViewValueConverterRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ViewValueConverterRegistration,
/* harmony export */   "SanitizeValueConverterRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.SanitizeValueConverterRegistration,
/* harmony export */   "IfRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.IfRegistration,
/* harmony export */   "ElseRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ElseRegistration,
/* harmony export */   "RepeatRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.RepeatRegistration,
/* harmony export */   "WithRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.WithRegistration,
/* harmony export */   "AttrBindingBehaviorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.AttrBindingBehaviorRegistration,
/* harmony export */   "SelfBindingBehaviorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.SelfBindingBehaviorRegistration,
/* harmony export */   "UpdateTriggerBindingBehaviorRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.UpdateTriggerBindingBehaviorRegistration,
/* harmony export */   "ComposeRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ComposeRegistration,
/* harmony export */   "DefaultResources": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.DefaultResources,
/* harmony export */   "AttributeBindingRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.AttributeBindingRendererRegistration,
/* harmony export */   "ListenerBindingRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.ListenerBindingRendererRegistration,
/* harmony export */   "SetAttributeRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.SetAttributeRendererRegistration,
/* harmony export */   "SetClassAttributeRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.SetClassAttributeRendererRegistration,
/* harmony export */   "SetStyleAttributeRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.SetStyleAttributeRendererRegistration,
/* harmony export */   "StylePropertyBindingRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.StylePropertyBindingRendererRegistration,
/* harmony export */   "TextBindingRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.TextBindingRendererRegistration,
/* harmony export */   "RefBindingRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.RefBindingRendererRegistration,
/* harmony export */   "CallBindingRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.CallBindingRendererRegistration,
/* harmony export */   "CustomAttributeRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.CustomAttributeRendererRegistration,
/* harmony export */   "CustomElementRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.CustomElementRendererRegistration,
/* harmony export */   "InterpolationBindingRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.InterpolationBindingRendererRegistration,
/* harmony export */   "IteratorBindingRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.IteratorBindingRendererRegistration,
/* harmony export */   "LetElementRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.LetElementRendererRegistration,
/* harmony export */   "PropertyBindingRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.PropertyBindingRendererRegistration,
/* harmony export */   "SetPropertyRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.SetPropertyRendererRegistration,
/* harmony export */   "TemplateControllerRendererRegistration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.TemplateControllerRendererRegistration,
/* harmony export */   "DefaultRenderers": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.DefaultRenderers,
/* harmony export */   "StandardConfiguration": () => /* reexport safe */ _configuration_js__WEBPACK_IMPORTED_MODULE_4__.StandardConfiguration,
/* harmony export */   "TemplateBinder": () => /* reexport safe */ _template_binder_js__WEBPACK_IMPORTED_MODULE_51__.TemplateBinder,
/* harmony export */   "ITemplateElementFactory": () => /* reexport safe */ _template_element_factory_js__WEBPACK_IMPORTED_MODULE_52__.ITemplateElementFactory,
/* harmony export */   "ChildrenDefinition": () => /* reexport safe */ _templating_children_js__WEBPACK_IMPORTED_MODULE_53__.ChildrenDefinition,
/* harmony export */   "Children": () => /* reexport safe */ _templating_children_js__WEBPACK_IMPORTED_MODULE_53__.Children,
/* harmony export */   "children": () => /* reexport safe */ _templating_children_js__WEBPACK_IMPORTED_MODULE_53__.children,
/* harmony export */   "ChildrenObserver": () => /* reexport safe */ _templating_children_js__WEBPACK_IMPORTED_MODULE_53__.ChildrenObserver,
/* harmony export */   "Controller": () => /* reexport safe */ _templating_controller_js__WEBPACK_IMPORTED_MODULE_54__.Controller,
/* harmony export */   "isCustomElementController": () => /* reexport safe */ _templating_controller_js__WEBPACK_IMPORTED_MODULE_54__.isCustomElementController,
/* harmony export */   "isCustomElementViewModel": () => /* reexport safe */ _templating_controller_js__WEBPACK_IMPORTED_MODULE_54__.isCustomElementViewModel,
/* harmony export */   "ViewModelKind": () => /* reexport safe */ _templating_controller_js__WEBPACK_IMPORTED_MODULE_54__.ViewModelKind,
/* harmony export */   "IController": () => /* reexport safe */ _templating_controller_js__WEBPACK_IMPORTED_MODULE_54__.IController,
/* harmony export */   "getRenderContext": () => /* reexport safe */ _templating_render_context_js__WEBPACK_IMPORTED_MODULE_55__.getRenderContext,
/* harmony export */   "isRenderContext": () => /* reexport safe */ _templating_render_context_js__WEBPACK_IMPORTED_MODULE_55__.isRenderContext,
/* harmony export */   "ViewFactory": () => /* reexport safe */ _templating_view_js__WEBPACK_IMPORTED_MODULE_56__.ViewFactory,
/* harmony export */   "IViewFactory": () => /* reexport safe */ _templating_view_js__WEBPACK_IMPORTED_MODULE_56__.IViewFactory,
/* harmony export */   "IViewLocator": () => /* reexport safe */ _templating_view_js__WEBPACK_IMPORTED_MODULE_56__.IViewLocator,
/* harmony export */   "ViewLocator": () => /* reexport safe */ _templating_view_js__WEBPACK_IMPORTED_MODULE_56__.ViewLocator,
/* harmony export */   "view": () => /* reexport safe */ _templating_view_js__WEBPACK_IMPORTED_MODULE_56__.view,
/* harmony export */   "Views": () => /* reexport safe */ _templating_view_js__WEBPACK_IMPORTED_MODULE_56__.Views,
/* harmony export */   "createElement": () => /* reexport safe */ _create_element_js__WEBPACK_IMPORTED_MODULE_57__.createElement,
/* harmony export */   "RenderPlan": () => /* reexport safe */ _create_element_js__WEBPACK_IMPORTED_MODULE_57__.RenderPlan,
/* harmony export */   "INode": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.INode,
/* harmony export */   "IEventTarget": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.IEventTarget,
/* harmony export */   "IRenderLocation": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.IRenderLocation,
/* harmony export */   "NodeType": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.NodeType,
/* harmony export */   "FragmentNodeSequence": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.FragmentNodeSequence,
/* harmony export */   "IHistory": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.IHistory,
/* harmony export */   "IWindow": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.IWindow,
/* harmony export */   "ILocation": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.ILocation,
/* harmony export */   "getEffectiveParentNode": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.getEffectiveParentNode,
/* harmony export */   "setEffectiveParentNode": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.setEffectiveParentNode,
/* harmony export */   "convertToRenderLocation": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.convertToRenderLocation,
/* harmony export */   "isRenderLocation": () => /* reexport safe */ _dom_js__WEBPACK_IMPORTED_MODULE_58__.isRenderLocation,
/* harmony export */   "IPlatform": () => /* reexport safe */ _platform_js__WEBPACK_IMPORTED_MODULE_59__.IPlatform,
/* harmony export */   "BindableInfo": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.BindableInfo,
/* harmony export */   "ElementInfo": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.ElementInfo,
/* harmony export */   "AttrInfo": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.AttrInfo,
/* harmony export */   "BindingSymbol": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.BindingSymbol,
/* harmony export */   "CustomAttributeSymbol": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.CustomAttributeSymbol,
/* harmony export */   "CustomElementSymbol": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.CustomElementSymbol,
/* harmony export */   "LetElementSymbol": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.LetElementSymbol,
/* harmony export */   "PlainAttributeSymbol": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.PlainAttributeSymbol,
/* harmony export */   "PlainElementSymbol": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.PlainElementSymbol,
/* harmony export */   "SymbolFlags": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.SymbolFlags,
/* harmony export */   "TemplateControllerSymbol": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.TemplateControllerSymbol,
/* harmony export */   "TextSymbol": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.TextSymbol,
/* harmony export */   "ProjectionSymbol": () => /* reexport safe */ _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__.ProjectionSymbol,
/* harmony export */   "CSSModulesProcessorRegistry": () => /* reexport safe */ _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__.CSSModulesProcessorRegistry,
/* harmony export */   "cssModules": () => /* reexport safe */ _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__.cssModules,
/* harmony export */   "ShadowDOMRegistry": () => /* reexport safe */ _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__.ShadowDOMRegistry,
/* harmony export */   "IShadowDOMStyleFactory": () => /* reexport safe */ _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__.IShadowDOMStyleFactory,
/* harmony export */   "shadowCSS": () => /* reexport safe */ _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__.shadowCSS,
/* harmony export */   "StyleConfiguration": () => /* reexport safe */ _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__.StyleConfiguration,
/* harmony export */   "AdoptedStyleSheetsStyles": () => /* reexport safe */ _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__.AdoptedStyleSheetsStyles,
/* harmony export */   "StyleElementStyles": () => /* reexport safe */ _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__.StyleElementStyles,
/* harmony export */   "IShadowDOMStyles": () => /* reexport safe */ _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__.IShadowDOMStyles,
/* harmony export */   "IShadowDOMGlobalStyles": () => /* reexport safe */ _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__.IShadowDOMGlobalStyles,
/* harmony export */   "Watch": () => /* reexport safe */ _watch_js__WEBPACK_IMPORTED_MODULE_62__.Watch,
/* harmony export */   "watch": () => /* reexport safe */ _watch_js__WEBPACK_IMPORTED_MODULE_62__.watch,
/* harmony export */   "ComputedWatcher": () => /* reexport safe */ _templating_watchers_js__WEBPACK_IMPORTED_MODULE_63__.ComputedWatcher,
/* harmony export */   "ExpressionWatcher": () => /* reexport safe */ _templating_watchers_js__WEBPACK_IMPORTED_MODULE_63__.ExpressionWatcher
/* harmony export */ });
/* harmony import */ var _aurelia_platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/platform */ "./node_modules/@aurelia/platform/dist/esm/index.js");
/* harmony import */ var _aurelia_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/platform-browser */ "./node_modules/@aurelia/platform-browser/dist/esm/index.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
/* harmony import */ var _observation_bindable_observer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./observation/bindable-observer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/bindable-observer.js");
/* harmony import */ var _configuration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./configuration.js */ "./node_modules/@aurelia/runtime-html/dist/esm/configuration.js");
/* harmony import */ var _binding_behaviors_binding_mode_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./binding-behaviors/binding-mode.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/binding-mode.js");
/* harmony import */ var _binding_behaviors_debounce_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./binding-behaviors/debounce.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/debounce.js");
/* harmony import */ var _binding_behaviors_signals_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./binding-behaviors/signals.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/signals.js");
/* harmony import */ var _binding_behaviors_throttle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./binding-behaviors/throttle.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding-behaviors/throttle.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _aurelia_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./aurelia.js */ "./node_modules/@aurelia/runtime-html/dist/esm/aurelia.js");
/* harmony import */ var _app_root_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./app-root.js */ "./node_modules/@aurelia/runtime-html/dist/esm/app-root.js");
/* harmony import */ var _app_task_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./app-task.js */ "./node_modules/@aurelia/runtime-html/dist/esm/app-task.js");
/* harmony import */ var _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./resources/attribute-pattern.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/attribute-pattern.js");
/* harmony import */ var _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./resources/binding-command.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-command.js");
/* harmony import */ var _attribute_syntax_transformer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./attribute-syntax-transformer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/attribute-syntax-transformer.js");
/* harmony import */ var _binding_listener_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./binding/listener.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/listener.js");
/* harmony import */ var _binding_attribute_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./binding/attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/attribute.js");
/* harmony import */ var _binding_call_binding_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./binding/call-binding.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/call-binding.js");
/* harmony import */ var _binding_interpolation_binding_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./binding/interpolation-binding.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/interpolation-binding.js");
/* harmony import */ var _binding_let_binding_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./binding/let-binding.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/let-binding.js");
/* harmony import */ var _binding_property_binding_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./binding/property-binding.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/property-binding.js");
/* harmony import */ var _binding_ref_binding_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./binding/ref-binding.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/ref-binding.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./renderer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/renderer.js");
/* harmony import */ var _observation_attribute_ns_accessor_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./observation/attribute-ns-accessor.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/attribute-ns-accessor.js");
/* harmony import */ var _observation_checked_observer_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./observation/checked-observer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/checked-observer.js");
/* harmony import */ var _observation_class_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./observation/class-attribute-accessor.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/class-attribute-accessor.js");
/* harmony import */ var _observation_data_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./observation/data-attribute-accessor.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/data-attribute-accessor.js");
/* harmony import */ var _observation_event_delegator_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./observation/event-delegator.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/event-delegator.js");
/* harmony import */ var _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./observation/observer-locator.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/observer-locator.js");
/* harmony import */ var _observation_select_value_observer_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./observation/select-value-observer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/select-value-observer.js");
/* harmony import */ var _observation_style_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./observation/style-attribute-accessor.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/style-attribute-accessor.js");
/* harmony import */ var _observation_svg_analyzer_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./observation/svg-analyzer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/svg-analyzer.js");
/* harmony import */ var _observation_value_attribute_observer_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./observation/value-attribute-observer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/value-attribute-observer.js");
/* harmony import */ var _resources_binding_behaviors_attr_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./resources/binding-behaviors/attr.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/attr.js");
/* harmony import */ var _resources_binding_behaviors_self_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./resources/binding-behaviors/self.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/self.js");
/* harmony import */ var _resources_binding_behaviors_update_trigger_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./resources/binding-behaviors/update-trigger.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/update-trigger.js");
/* harmony import */ var _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./resources/custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _resources_template_controllers_flags_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./resources/template-controllers/flags.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/flags.js");
/* harmony import */ var _resources_template_controllers_if_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./resources/template-controllers/if.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/if.js");
/* harmony import */ var _resources_template_controllers_repeat_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./resources/template-controllers/repeat.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/repeat.js");
/* harmony import */ var _resources_template_controllers_with_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./resources/template-controllers/with.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/with.js");
/* harmony import */ var _resources_template_controllers_switch_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./resources/template-controllers/switch.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/switch.js");
/* harmony import */ var _resources_custom_attributes_blur_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./resources/custom-attributes/blur.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/blur.js");
/* harmony import */ var _resources_custom_attributes_focus_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./resources/custom-attributes/focus.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/focus.js");
/* harmony import */ var _resources_template_controllers_portal_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./resources/template-controllers/portal.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/portal.js");
/* harmony import */ var _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./resources/custom-elements/au-slot.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-elements/au-slot.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
/* harmony import */ var _resources_custom_elements_compose_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./resources/custom-elements/compose.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-elements/compose.js");
/* harmony import */ var _resources_value_converters_sanitize_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./resources/value-converters/sanitize.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/value-converters/sanitize.js");
/* harmony import */ var _resources_value_converters_view_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./resources/value-converters/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/value-converters/view.js");
/* harmony import */ var _template_binder_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./template-binder.js */ "./node_modules/@aurelia/runtime-html/dist/esm/template-binder.js");
/* harmony import */ var _template_element_factory_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./template-element-factory.js */ "./node_modules/@aurelia/runtime-html/dist/esm/template-element-factory.js");
/* harmony import */ var _templating_children_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./templating/children.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/children.js");
/* harmony import */ var _templating_controller_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./templating/controller.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/controller.js");
/* harmony import */ var _templating_render_context_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./templating/render-context.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/render-context.js");
/* harmony import */ var _templating_view_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./templating/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js");
/* harmony import */ var _create_element_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./create-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/create-element.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _semantic_model_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./semantic-model.js */ "./node_modules/@aurelia/runtime-html/dist/esm/semantic-model.js");
/* harmony import */ var _templating_styles_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./templating/styles.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/styles.js");
/* harmony import */ var _watch_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./watch.js */ "./node_modules/@aurelia/runtime-html/dist/esm/watch.js");
/* harmony import */ var _templating_watchers_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./templating/watchers.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/watchers.js");























































// These exports are temporary until we have a proper way to unit test them










//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/attribute-ns-accessor.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/attribute-ns-accessor.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AttributeNSAccessor": () => /* binding */ AttributeNSAccessor
/* harmony export */ });
const nsMap = Object.create(null);
/**
 * Attribute accessor in a XML document/element that can be accessed via a namespace.
 * Wraps [`getAttributeNS`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS).
 */
class AttributeNSAccessor {
    constructor(namespace) {
        this.namespace = namespace;
        this.currentValue = null;
        // ObserverType.Layout is not always true, it depends on the property
        // but for simplicity, always treat as such
        this.type = 2 /* Node */ | 4 /* Layout */;
    }
    static forNs(ns) {
        return nsMap[ns] ?? (nsMap[ns] = new AttributeNSAccessor(ns));
    }
    getValue(obj, propertyKey) {
        return obj.getAttributeNS(this.namespace, propertyKey);
    }
    setValue(newValue, flags, obj, key) {
        if (newValue == void 0) {
            obj.removeAttributeNS(this.namespace, key);
        }
        else {
            obj.setAttributeNS(this.namespace, key, newValue);
        }
    }
}
//# sourceMappingURL=attribute-ns-accessor.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/bindable-observer.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/bindable-observer.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindableObserver": () => /* binding */ BindableObserver
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");


class BindableObserver {
    constructor(obj, propertyKey, cbName, set, $controller) {
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.set = set;
        this.$controller = $controller;
        this.currentValue = void 0;
        this.oldValue = void 0;
        const cb = obj[cbName];
        const cbAll = obj.propertyChanged;
        const hasCb = this.hasCb = typeof cb === 'function';
        const hasCbAll = this.hasCbAll = typeof cbAll === 'function';
        const hasSetter = this.hasSetter = set !== _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.noop;
        this.cb = hasCb ? cb : _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.noop;
        this.cbAll = this.hasCbAll ? cbAll : _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.noop;
        // when user declare @bindable({ set })
        // it's expected to work from the start,
        // regardless where the assignment comes from: either direct view model assignment or from binding during render
        // so if either getter/setter config is present, alter the accessor straight await
        if (this.cb === void 0 && !hasCbAll && !hasSetter) {
            this.observing = false;
        }
        else {
            this.observing = true;
            const val = obj[propertyKey];
            this.currentValue = hasSetter && val !== void 0 ? set(val) : val;
            this.createGetterSetter();
        }
    }
    get type() { return 1 /* Observer */; }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        if (this.hasSetter) {
            newValue = this.set(newValue);
        }
        if (this.observing) {
            const currentValue = this.currentValue;
            if (Object.is(newValue, currentValue)) {
                return;
            }
            this.currentValue = newValue;
            // todo: controller (if any) state should determine the invocation instead
            if ((flags & 32 /* fromBind */) === 0 || (flags & 16 /* updateSource */) > 0) {
                if (this.hasCb) {
                    this.cb.call(this.obj, newValue, currentValue, flags);
                }
                if (this.hasCbAll) {
                    this.cbAll.call(this.obj, this.propertyKey, newValue, currentValue, flags);
                }
            }
            this.subs.notify(newValue, currentValue, flags);
        }
        else {
            // See SetterObserver.setValue for explanation
            this.obj[this.propertyKey] = newValue;
        }
    }
    subscribe(subscriber) {
        if (!this.observing === false) {
            this.observing = true;
            const currentValue = this.obj[this.propertyKey];
            this.currentValue = this.hasSetter
                ? this.set(currentValue)
                : currentValue;
            this.createGetterSetter();
        }
        this.subs.add(subscriber);
    }
    createGetterSetter() {
        Reflect.defineProperty(this.obj, this.propertyKey, {
            enumerable: true,
            configurable: true,
            get: ( /* Bindable Observer */) => this.currentValue,
            set: (/* Bindable Observer */ value) => {
                this.setValue(value, 0 /* none */);
            }
        });
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.subscriberCollection)(BindableObserver);
//# sourceMappingURL=bindable-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/checked-observer.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/checked-observer.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CheckedObserver": () => /* binding */ CheckedObserver
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _observer_locator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observer-locator.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/observer-locator.js");


function defaultMatcher(a, b) {
    return a === b;
}
class CheckedObserver {
    constructor(obj, 
    // deepscan-disable-next-line
    _key, handler, observerLocator) {
        this.handler = handler;
        this.observerLocator = observerLocator;
        this.value = void 0;
        this.oldValue = void 0;
        this.type = 2 /* Node */ | 1 /* Observer */ | 4 /* Layout */;
        this.collectionObserver = void 0;
        this.valueObserver = void 0;
        this.obj = obj;
    }
    getValue() {
        return this.value;
    }
    setValue(newValue, flags) {
        const currentValue = this.value;
        if (newValue === currentValue) {
            return;
        }
        this.value = newValue;
        this.oldValue = currentValue;
        this.observe();
        this.synchronizeElement();
        this.subs.notify(newValue, currentValue, flags);
    }
    handleCollectionChange(indexMap, flags) {
        this.synchronizeElement();
    }
    handleChange(newValue, previousValue, flags) {
        this.synchronizeElement();
    }
    synchronizeElement() {
        const currentValue = this.value;
        const obj = this.obj;
        const elementValue = Object.prototype.hasOwnProperty.call(obj, 'model') ? obj.model : obj.value;
        const isRadio = obj.type === 'radio';
        const matcher = obj.matcher !== void 0 ? obj.matcher : defaultMatcher;
        if (isRadio) {
            obj.checked = !!matcher(currentValue, elementValue);
        }
        else if (currentValue === true) {
            obj.checked = true;
        }
        else {
            let hasMatch = false;
            if (currentValue instanceof Array) {
                hasMatch = currentValue.findIndex(item => !!matcher(item, elementValue)) !== -1;
            }
            else if (currentValue instanceof Set) {
                for (const v of currentValue) {
                    if (matcher(v, elementValue)) {
                        hasMatch = true;
                        break;
                    }
                }
            }
            else if (currentValue instanceof Map) {
                for (const pair of currentValue) {
                    const existingItem = pair[0];
                    const $isChecked = pair[1];
                    // a potential complain, when only `true` is supported
                    // but it's consistent with array
                    if (matcher(existingItem, elementValue) && $isChecked === true) {
                        hasMatch = true;
                        break;
                    }
                }
            }
            obj.checked = hasMatch;
        }
    }
    handleEvent() {
        let currentValue = this.oldValue = this.value;
        const obj = this.obj;
        const elementValue = Object.prototype.hasOwnProperty.call(obj, 'model') ? obj.model : obj.value;
        const isChecked = obj.checked;
        const matcher = obj.matcher !== void 0 ? obj.matcher : defaultMatcher;
        if (obj.type === 'checkbox') {
            if (currentValue instanceof Array) {
                // Array binding steps on a change event:
                // 1. find corresponding item INDEX in the Set based on current model/value and matcher
                // 2. is the checkbox checked?
                //    2.1. Yes: is the corresponding item in the Array (index === -1)?
                //        2.1.1 No: push the current model/value to the Array
                //    2.2. No: is the corresponding item in the Array (index !== -1)?
                //        2.2.1: Yes: remove the corresponding item
                // =================================================
                const index = currentValue.findIndex(item => !!matcher(item, elementValue));
                // if the checkbox is checkde, and there's no matching value in the existing array
                // add the checkbox model/value to the array
                if (isChecked && index === -1) {
                    currentValue.push(elementValue);
                }
                else if (!isChecked && index !== -1) {
                    // if the checkbox is not checked, and found a matching item in the array
                    // based on the checkbox model/value
                    // remove the existing item
                    currentValue.splice(index, 1);
                }
                // when existing currentValue is an array,
                // do not invoke callback as only the array obj has changed
                return;
            }
            else if (currentValue instanceof Set) {
                // Set binding steps on a change event:
                // 1. find corresponding item in the Set based on current model/value and matcher
                // 2. is the checkbox checked?
                //    2.1. Yes: is the corresponding item in the Set?
                //        2.1.1 No: add the current model/value to the Set
                //    2.2. No: is the corresponding item in the Set?
                //        2.2.1: Yes: remove the corresponding item
                // =================================================
                // 1. find corresponding item
                const unset = {};
                let existingItem = unset;
                for (const value of currentValue) {
                    if (matcher(value, elementValue) === true) {
                        existingItem = value;
                        break;
                    }
                }
                // 2.1. Checkbox is checked, is the corresponding item in the Set?
                //
                // if checkbox is checked and there's no value in the existing Set
                // add the checkbox model/value to the Set
                if (isChecked && existingItem === unset) {
                    // 2.1.1. add the current model/value to the Set
                    currentValue.add(elementValue);
                }
                else if (!isChecked && existingItem !== unset) {
                    // 2.2.1 Checkbox is unchecked, corresponding is in the Set
                    //
                    // if checkbox is not checked, and found a matching item in the Set
                    // based on the checkbox model/value
                    // remove the existing item
                    currentValue.delete(existingItem);
                }
                // when existing value is a Set,
                // do not invoke callback as only the Set has been mutated
                return;
            }
            else if (currentValue instanceof Map) {
                // Map binding steps on a change event
                // 1. find corresponding item in the Map based on current model/value and matcher
                // 2. Set the value of the corresponding item in the Map based on checked state of the checkbox
                // =================================================
                // 1. find the corresponding item
                let existingItem;
                for (const pair of currentValue) {
                    const currItem = pair[0];
                    if (matcher(currItem, elementValue) === true) {
                        existingItem = currItem;
                        break;
                    }
                }
                // 2. set the value of the corresponding item in the map
                // if checkbox is checked and there's no value in the existing Map
                // add the checkbox model/value to the Map as key,
                // and value will be checked state of the checkbox
                currentValue.set(existingItem, isChecked);
                // when existing value is a Map,
                // do not invoke callback as only the Map has been mutated
                return;
            }
            currentValue = isChecked;
        }
        else if (isChecked) {
            currentValue = elementValue;
        }
        else {
            // if it's a radio and it has been unchecked
            // do nothing, as the radio that was checked will fire change event and it will be handle there
            // a radio cannot be unchecked by user
            return;
        }
        this.value = currentValue;
        this.subs.notify(this.value, this.oldValue, 0 /* none */);
    }
    start() {
        this.handler.subscribe(this.obj, this);
        this.observe();
    }
    stop() {
        this.handler.dispose();
        this.collectionObserver?.unsubscribe(this);
        this.collectionObserver = void 0;
        this.valueObserver?.unsubscribe(this);
    }
    subscribe(subscriber) {
        if (this.subs.add(subscriber) && this.subs.count === 1) {
            this.start();
        }
    }
    unsubscribe(subscriber) {
        if (this.subs.remove(subscriber) && this.subs.count === 0) {
            this.stop();
        }
    }
    observe() {
        const obj = this.obj;
        (this.valueObserver ?? (this.valueObserver = obj.$observers?.model ?? obj.$observers?.value))?.subscribe(this);
        this.collectionObserver?.unsubscribe(this);
        this.collectionObserver = void 0;
        if (obj.type === 'checkbox') {
            (this.collectionObserver = (0,_observer_locator_js__WEBPACK_IMPORTED_MODULE_1__.getCollectionObserver)(this.value, this.observerLocator))?.subscribe(this);
        }
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.subscriberCollection)(CheckedObserver);
//# sourceMappingURL=checked-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/class-attribute-accessor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/class-attribute-accessor.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClassAttributeAccessor": () => /* binding */ ClassAttributeAccessor,
/* harmony export */   "getClassesToAdd": () => /* binding */ getClassesToAdd
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");

class ClassAttributeAccessor {
    constructor(obj) {
        this.obj = obj;
        this.currentValue = '';
        this.oldValue = '';
        this.doNotCache = true;
        this.nameIndex = {};
        this.version = 0;
        this.hasChanges = false;
        this.isActive = false;
        this.type = 2 /* Node */ | 4 /* Layout */;
    }
    getValue() {
        // is it safe to assume the observer has the latest value?
        // todo: ability to turn on/off cache based on type
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* noFlush */) === 0) {
            this.flushChanges(flags);
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const currentValue = this.currentValue;
            const nameIndex = this.nameIndex;
            let version = this.version;
            this.oldValue = currentValue;
            const classesToAdd = getClassesToAdd(currentValue);
            // Get strings split on a space not including empties
            if (classesToAdd.length > 0) {
                this.addClassesAndUpdateIndex(classesToAdd);
            }
            this.version += 1;
            // First call to setValue?  We're done.
            if (version === 0) {
                return;
            }
            // Remove classes from previous version.
            version -= 1;
            for (const name in nameIndex) {
                if (!Object.prototype.hasOwnProperty.call(nameIndex, name) || nameIndex[name] !== version) {
                    continue;
                }
                // TODO: this has the side-effect that classes already present which are added again,
                // will be removed if they're not present in the next update.
                // Better would be do have some configurability for this behavior, allowing the user to
                // decide whether initial classes always need to be kept, always removed, or something in between
                this.obj.classList.remove(name);
            }
        }
    }
    addClassesAndUpdateIndex(classes) {
        const node = this.obj;
        for (let i = 0, ii = classes.length; i < ii; i++) {
            const className = classes[i];
            if (className.length === 0) {
                continue;
            }
            this.nameIndex[className] = this.version;
            node.classList.add(className);
        }
    }
}
function getClassesToAdd(object) {
    if (typeof object === 'string') {
        return splitClassString(object);
    }
    if (typeof object !== 'object') {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
    }
    if (object instanceof Array) {
        const len = object.length;
        if (len > 0) {
            const classes = [];
            for (let i = 0; i < len; ++i) {
                classes.push(...getClassesToAdd(object[i]));
            }
            return classes;
        }
        else {
            return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
        }
    }
    const classes = [];
    for (const property in object) {
        // Let non typical values also evaluate true so disable bool check
        if (Boolean(object[property])) {
            // We must do this in case object property has a space in the name which results in two classes
            if (property.includes(' ')) {
                classes.push(...splitClassString(property));
            }
            else {
                classes.push(property);
            }
        }
    }
    return classes;
}
function splitClassString(classString) {
    const matches = classString.match(/\S+/g);
    if (matches === null) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
    }
    return matches;
}
//# sourceMappingURL=class-attribute-accessor.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/data-attribute-accessor.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/data-attribute-accessor.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataAttributeAccessor": () => /* binding */ DataAttributeAccessor,
/* harmony export */   "attrAccessor": () => /* binding */ attrAccessor
/* harmony export */ });
/**
 * Attribute accessor for HTML elements.
 * Note that Aurelia works with properties, so in all case it will try to assign to property instead of attributes.
 * Unless the property falls into a special set, then it will use attribute for it.
 *
 * @see ElementPropertyAccessor
 */
class DataAttributeAccessor {
    constructor() {
        this.propertyKey = '';
        this.currentValue = null;
        // ObserverType.Layout is not always true, it depends on the property
        // but for simplicity, always treat as such
        this.type = 2 /* Node */ | 4 /* Layout */;
    }
    getValue(obj, key) {
        return obj.getAttribute(key);
    }
    setValue(newValue, flags, obj, key) {
        if (newValue == void 0) {
            obj.removeAttribute(key);
        }
        else {
            obj.setAttribute(key, newValue);
        }
    }
}
const attrAccessor = new DataAttributeAccessor();
//# sourceMappingURL=data-attribute-accessor.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/element-attribute-observer.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/element-attribute-observer.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AttributeObserver": () => /* binding */ AttributeObserver
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");

/**
 * Observer for handling two-way binding with attributes
 * Has different strategy for class/style and normal attributes
 * TODO: handle SVG/attributes with namespace
 */
class AttributeObserver {
    constructor(platform, observerLocator, obj, propertyKey, targetAttribute) {
        this.platform = platform;
        this.observerLocator = observerLocator;
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.targetAttribute = targetAttribute;
        this.currentValue = null;
        this.oldValue = null;
        this.hasChanges = false;
        // layout is not certain, depends on the attribute being flushed to owner element
        // but for simple start, always treat as such
        this.type = 2 /* Node */ | 1 /* Observer */ | 4 /* Layout */;
    }
    getValue() {
        // is it safe to assume the observer has the latest value?
        // todo: ability to turn on/off cache based on type
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* noFlush */) === 0) {
            this.flushChanges(flags);
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const currentValue = this.currentValue;
            this.oldValue = currentValue;
            switch (this.targetAttribute) {
                case 'class': {
                    // Why does class attribute observer setValue look different with class attribute accessor?
                    // ==============
                    // For class list
                    // newValue is simply checked if truthy or falsy
                    // and toggle the class accordingly
                    // -- the rule of this is quite different to normal attribute
                    //
                    // for class attribute, observer is different in a way that it only observes one class at a time
                    // this also comes from syntax, where it would typically be my-class.class="someProperty"
                    //
                    // so there is no need for separating class by space and add all of them like class accessor
                    //
                    // note: not using .toggle API so that environment with broken impl (IE11) won't need to polfyfill by default
                    if (!!currentValue) {
                        this.obj.classList.add(this.propertyKey);
                    }
                    else {
                        this.obj.classList.remove(this.propertyKey);
                    }
                    break;
                }
                case 'style': {
                    let priority = '';
                    let newValue = currentValue;
                    if (typeof newValue === 'string' && newValue.includes('!important')) {
                        priority = 'important';
                        newValue = newValue.replace('!important', '');
                    }
                    this.obj.style.setProperty(this.propertyKey, newValue, priority);
                }
            }
        }
    }
    handleMutation(mutationRecords) {
        let shouldProcess = false;
        for (let i = 0, ii = mutationRecords.length; ii > i; ++i) {
            const record = mutationRecords[i];
            if (record.type === 'attributes' && record.attributeName === this.propertyKey) {
                shouldProcess = true;
                break;
            }
        }
        if (shouldProcess) {
            let newValue;
            switch (this.targetAttribute) {
                case 'class':
                    newValue = this.obj.classList.contains(this.propertyKey);
                    break;
                case 'style':
                    newValue = this.obj.style.getPropertyValue(this.propertyKey);
                    break;
                default:
                    throw new Error(`Unsupported targetAttribute: ${this.targetAttribute}`);
            }
            if (newValue !== this.currentValue) {
                const { currentValue } = this;
                this.currentValue = this.oldValue = newValue;
                this.hasChanges = false;
                this.subs.notify(newValue, currentValue, 0 /* none */);
            }
        }
    }
    subscribe(subscriber) {
        if (this.subs.add(subscriber) && this.subs.count === 1) {
            this.currentValue = this.oldValue = this.obj.getAttribute(this.propertyKey);
            startObservation(this.obj.ownerDocument.defaultView.MutationObserver, this.obj, this);
        }
    }
    unsubscribe(subscriber) {
        if (this.subs.remove(subscriber) && this.subs.count === 0) {
            stopObservation(this.obj, this);
        }
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.subscriberCollection)(AttributeObserver);
const startObservation = ($MutationObserver, element, subscription) => {
    if (element.$eMObservers === undefined) {
        element.$eMObservers = new Set();
    }
    if (element.$mObserver === undefined) {
        (element.$mObserver = new $MutationObserver(handleMutation)).observe(element, { attributes: true });
    }
    element.$eMObservers.add(subscription);
};
const stopObservation = (element, subscription) => {
    const $eMObservers = element.$eMObservers;
    if ($eMObservers && $eMObservers.delete(subscription)) {
        if ($eMObservers.size === 0) {
            element.$mObserver.disconnect();
            element.$mObserver = undefined;
        }
        return true;
    }
    return false;
};
const handleMutation = (mutationRecords) => {
    mutationRecords[0].target.$eMObservers.forEach(invokeHandleMutation, mutationRecords);
};
function invokeHandleMutation(s) {
    s.handleMutation(this);
}
//# sourceMappingURL=element-attribute-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/event-delegator.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/event-delegator.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DelegateSubscription": () => /* binding */ DelegateSubscription,
/* harmony export */   "EventSubscriber": () => /* binding */ EventSubscriber,
/* harmony export */   "IEventDelegator": () => /* binding */ IEventDelegator,
/* harmony export */   "EventDelegator": () => /* binding */ EventDelegator
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");

const defaultOptions = {
    capture: false,
};
class ListenerTracker {
    constructor(publisher, eventName, options = defaultOptions) {
        this.publisher = publisher;
        this.eventName = eventName;
        this.options = options;
        this.count = 0;
        this.captureLookups = new Map();
        this.bubbleLookups = new Map();
    }
    increment() {
        if (++this.count === 1) {
            this.publisher.addEventListener(this.eventName, this, this.options);
        }
    }
    decrement() {
        if (--this.count === 0) {
            this.publisher.removeEventListener(this.eventName, this, this.options);
        }
    }
    dispose() {
        if (this.count > 0) {
            this.count = 0;
            this.publisher.removeEventListener(this.eventName, this, this.options);
        }
        this.captureLookups.clear();
        this.bubbleLookups.clear();
    }
    /** @internal */
    getLookup(target) {
        const lookups = this.options.capture === true ? this.captureLookups : this.bubbleLookups;
        let lookup = lookups.get(target);
        if (lookup === void 0) {
            lookups.set(target, lookup = Object.create(null));
        }
        return lookup;
    }
    /** @internal */
    handleEvent(event) {
        const lookups = this.options.capture === true ? this.captureLookups : this.bubbleLookups;
        const path = event.composedPath();
        if (this.options.capture === true) {
            path.reverse();
        }
        for (const target of path) {
            const lookup = lookups.get(target);
            if (lookup === void 0) {
                continue;
            }
            const listener = lookup[this.eventName];
            if (listener === void 0) {
                continue;
            }
            if (typeof listener === 'function') {
                listener(event);
            }
            else {
                listener.handleEvent(event);
            }
            if (event.cancelBubble === true) {
                return;
            }
        }
    }
}
/**
 * Enable dispose() pattern for `delegate` & `capture` commands
 */
class DelegateSubscription {
    constructor(tracker, lookup, eventName, callback) {
        this.tracker = tracker;
        this.lookup = lookup;
        this.eventName = eventName;
        tracker.increment();
        lookup[eventName] = callback;
    }
    dispose() {
        this.tracker.decrement();
        this.lookup[this.eventName] = void 0;
    }
}
class EventSubscriber {
    constructor(config) {
        this.config = config;
        this.target = null;
        this.handler = null;
    }
    subscribe(node, callbackOrListener) {
        this.target = node;
        this.handler = callbackOrListener;
        for (const event of this.config.events) {
            node.addEventListener(event, callbackOrListener);
        }
    }
    dispose() {
        const { target, handler } = this;
        if (target !== null && handler !== null) {
            for (const event of this.config.events) {
                target.removeEventListener(event, handler);
            }
        }
        this.target = this.handler = null;
    }
}
const IEventDelegator = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IEventDelegator', x => x.singleton(EventDelegator));
class EventDelegator {
    // eslint-disable-next-line @typescript-eslint/no-useless-constructor
    constructor() {
        this.trackerMaps = Object.create(null);
    }
    addEventListener(publisher, target, eventName, listener, options) {
        var _a;
        const trackerMap = (_a = this.trackerMaps)[eventName] ?? (_a[eventName] = new Map());
        let tracker = trackerMap.get(publisher);
        if (tracker === void 0) {
            trackerMap.set(publisher, tracker = new ListenerTracker(publisher, eventName, options));
        }
        return new DelegateSubscription(tracker, tracker.getLookup(target), eventName, listener);
    }
    dispose() {
        for (const eventName in this.trackerMaps) {
            const trackerMap = this.trackerMaps[eventName];
            for (const tracker of trackerMap.values()) {
                tracker.dispose();
            }
            trackerMap.clear();
        }
    }
}
//# sourceMappingURL=event-delegator.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/observer-locator.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/observer-locator.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NodeObserverConfig": () => /* binding */ NodeObserverConfig,
/* harmony export */   "NodeObserverLocator": () => /* binding */ NodeObserverLocator,
/* harmony export */   "getCollectionObserver": () => /* binding */ getCollectionObserver
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _attribute_ns_accessor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./attribute-ns-accessor.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/attribute-ns-accessor.js");
/* harmony import */ var _checked_observer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./checked-observer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/checked-observer.js");
/* harmony import */ var _class_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./class-attribute-accessor.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/class-attribute-accessor.js");
/* harmony import */ var _data_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./data-attribute-accessor.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/data-attribute-accessor.js");
/* harmony import */ var _event_delegator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./event-delegator.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/event-delegator.js");
/* harmony import */ var _select_value_observer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./select-value-observer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/select-value-observer.js");
/* harmony import */ var _style_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./style-attribute-accessor.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/style-attribute-accessor.js");
/* harmony import */ var _svg_analyzer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./svg-analyzer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/svg-analyzer.js");
/* harmony import */ var _value_attribute_observer_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./value-attribute-observer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/value-attribute-observer.js");












// https://infra.spec.whatwg.org/#namespaces
const htmlNS = 'http://www.w3.org/1999/xhtml';
const mathmlNS = 'http://www.w3.org/1998/Math/MathML';
const svgNS = 'http://www.w3.org/2000/svg';
const xlinkNS = 'http://www.w3.org/1999/xlink';
const xmlNS = 'http://www.w3.org/XML/1998/namespace';
const xmlnsNS = 'http://www.w3.org/2000/xmlns/';
// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
const nsAttributes = Object.assign(createLookup(), {
    'xlink:actuate': ['actuate', xlinkNS],
    'xlink:arcrole': ['arcrole', xlinkNS],
    'xlink:href': ['href', xlinkNS],
    'xlink:role': ['role', xlinkNS],
    'xlink:show': ['show', xlinkNS],
    'xlink:title': ['title', xlinkNS],
    'xlink:type': ['type', xlinkNS],
    'xml:lang': ['lang', xmlNS],
    'xml:space': ['space', xmlNS],
    'xmlns': ['xmlns', xmlnsNS],
    'xmlns:xlink': ['xlink', xmlnsNS],
});
const elementPropertyAccessor = new _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.PropertyAccessor();
elementPropertyAccessor.type = 2 /* Node */ | 4 /* Layout */;
class NodeObserverConfig {
    constructor(config) {
        this.type = config.type ?? _value_attribute_observer_js__WEBPACK_IMPORTED_MODULE_11__.ValueAttributeObserver;
        this.events = config.events;
        this.readonly = config.readonly;
        this.default = config.default;
    }
}
class NodeObserverLocator {
    constructor(locator, platform, dirtyChecker, svgAnalyzer) {
        this.locator = locator;
        this.platform = platform;
        this.dirtyChecker = dirtyChecker;
        this.svgAnalyzer = svgAnalyzer;
        this.allowDirtyCheck = true;
        this.events = createLookup();
        this.globalEvents = createLookup();
        this.overrides = createLookup();
        this.globalOverrides = createLookup();
        // todo: atm, platform is required to be resolved too eagerly for the `.handles()` check
        // also a lot of tests assume default availability of observation
        // those 2 assumptions make it not the right time to extract the following line into a
        // default configuration for NodeObserverLocator yet
        // but in the future, they should be, so apps that don't use check box/select, or implement a different
        // observer don't have to pay the of the default implementation
        const inputEvents = ['change', 'input'];
        const inputEventsConfig = { events: inputEvents, default: '' };
        this.useConfig({
            INPUT: {
                value: inputEventsConfig,
                checked: { type: _checked_observer_js__WEBPACK_IMPORTED_MODULE_4__.CheckedObserver, events: inputEvents },
                files: { events: inputEvents, readonly: true },
            },
            SELECT: {
                value: { type: _select_value_observer_js__WEBPACK_IMPORTED_MODULE_8__.SelectValueObserver, events: ['change'], default: '' },
            },
            TEXTAREA: {
                value: inputEventsConfig,
            },
        });
        const contentEventsConfig = { events: ['change', 'input', 'blur', 'keyup', 'paste'], default: '' };
        const scrollEventsConfig = { events: ['scroll'], default: 0 };
        this.useConfigGlobal({
            scrollTop: scrollEventsConfig,
            scrollLeft: scrollEventsConfig,
            textContent: contentEventsConfig,
            innerHTML: contentEventsConfig,
        });
        this.overrideAccessorGlobal('css', 'style', 'class');
        this.overrideAccessor({
            INPUT: ['value', 'checked', 'model'],
            SELECT: ['value'],
            TEXTAREA: ['value'],
        });
    }
    static register(container) {
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.aliasTo(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.INodeObserverLocator, NodeObserverLocator).register(container);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.singleton(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.INodeObserverLocator, NodeObserverLocator).register(container);
    }
    // deepscan-disable-next-line
    handles(obj, _key) {
        return obj instanceof this.platform.Node;
    }
    useConfig(nodeNameOrConfig, key, eventsConfig) {
        const lookup = this.events;
        let existingMapping;
        if (typeof nodeNameOrConfig === 'string') {
            existingMapping = lookup[nodeNameOrConfig] ?? (lookup[nodeNameOrConfig] = createLookup());
            if (existingMapping[key] == null) {
                existingMapping[key] = new NodeObserverConfig(eventsConfig);
            }
            else {
                throwMappingExisted(nodeNameOrConfig, key);
            }
        }
        else {
            for (const nodeName in nodeNameOrConfig) {
                existingMapping = lookup[nodeName] ?? (lookup[nodeName] = createLookup());
                const newMapping = nodeNameOrConfig[nodeName];
                for (key in newMapping) {
                    if (existingMapping[key] == null) {
                        existingMapping[key] = new NodeObserverConfig(newMapping[key]);
                    }
                    else {
                        throwMappingExisted(nodeName, key);
                    }
                }
            }
        }
    }
    useConfigGlobal(configOrKey, eventsConfig) {
        const lookup = this.globalEvents;
        if (typeof configOrKey === 'object') {
            for (const key in configOrKey) {
                if (lookup[key] == null) {
                    lookup[key] = new NodeObserverConfig(configOrKey[key]);
                }
                else {
                    throwMappingExisted('*', key);
                }
            }
        }
        else {
            if (lookup[configOrKey] == null) {
                lookup[configOrKey] = new NodeObserverConfig(eventsConfig);
            }
            else {
                throwMappingExisted('*', configOrKey);
            }
        }
    }
    // deepscan-disable-nextline
    getAccessor(obj, key, requestor) {
        if (key in this.globalOverrides || (key in (this.overrides[obj.tagName] ?? _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyObject))) {
            return this.getObserver(obj, key, requestor);
        }
        switch (key) {
            // class / style / css attribute will be observed using .getObserver() per overrides
            //
            // TODO: there are (many) more situation where we want to default to DataAttributeAccessor,
            // but for now stick to what vCurrent does
            case 'src':
            case 'href':
            // https://html.spec.whatwg.org/multipage/dom.html#wai-aria
            case 'role':
                return _data_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_6__.attrAccessor;
            default: {
                const nsProps = nsAttributes[key];
                if (nsProps !== undefined) {
                    return _attribute_ns_accessor_js__WEBPACK_IMPORTED_MODULE_3__.AttributeNSAccessor.forNs(nsProps[1]);
                }
                if (isDataAttribute(obj, key, this.svgAnalyzer)) {
                    return _data_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_6__.attrAccessor;
                }
                return elementPropertyAccessor;
            }
        }
    }
    overrideAccessor(tagNameOrOverrides, key) {
        var _a, _b;
        let existingTagOverride;
        if (typeof tagNameOrOverrides === 'string') {
            existingTagOverride = (_a = this.overrides)[tagNameOrOverrides] ?? (_a[tagNameOrOverrides] = createLookup());
            existingTagOverride[key] = true;
        }
        else {
            for (const tagName in tagNameOrOverrides) {
                for (const key of tagNameOrOverrides[tagName]) {
                    existingTagOverride = (_b = this.overrides)[tagName] ?? (_b[tagName] = createLookup());
                    existingTagOverride[key] = true;
                }
            }
        }
    }
    /**
     * For all elements:
     * compose a list of properties,
     * to indicate that an overser should be returned instead of an accessor in `.getAccessor()`
     */
    overrideAccessorGlobal(...keys) {
        for (const key of keys) {
            this.globalOverrides[key] = true;
        }
    }
    getObserver(el, key, requestor) {
        switch (key) {
            case 'role':
                return _data_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_6__.attrAccessor;
            case 'class':
                return new _class_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_5__.ClassAttributeAccessor(el);
            case 'css':
            case 'style':
                return new _style_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_9__.StyleAttributeAccessor(el);
        }
        const eventsConfig = this.events[el.tagName]?.[key] ?? this.globalEvents[key];
        if (eventsConfig != null) {
            return new eventsConfig.type(el, key, new _event_delegator_js__WEBPACK_IMPORTED_MODULE_7__.EventSubscriber(eventsConfig), requestor, this.locator);
        }
        const nsProps = nsAttributes[key];
        if (nsProps !== undefined) {
            return _attribute_ns_accessor_js__WEBPACK_IMPORTED_MODULE_3__.AttributeNSAccessor.forNs(nsProps[1]);
        }
        if (isDataAttribute(el, key, this.svgAnalyzer)) {
            // todo: should observe
            return _data_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_6__.attrAccessor;
        }
        if (key in el.constructor.prototype) {
            if (this.allowDirtyCheck) {
                return this.dirtyChecker.createProperty(el, key);
            }
            // consider:
            // - maybe add a adapter API to handle unknown obj/key combo
            throw new Error(`Unable to observe property ${String(key)}. Register observation mapping with .useConfig().`);
        }
        else {
            // todo: probably still needs to get the property descriptor via getOwnPropertyDescriptor
            // but let's start with simplest scenario
            return new _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.SetterObserver(el, key);
        }
    }
}
NodeObserverLocator.inject = [_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IServiceLocator, _platform_js__WEBPACK_IMPORTED_MODULE_2__.IPlatform, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IDirtyChecker, _svg_analyzer_js__WEBPACK_IMPORTED_MODULE_10__.ISVGAnalyzer];
function getCollectionObserver(collection, observerLocator) {
    if (collection instanceof Array) {
        return observerLocator.getArrayObserver(collection);
    }
    if (collection instanceof Map) {
        return observerLocator.getMapObserver(collection);
    }
    if (collection instanceof Set) {
        return observerLocator.getSetObserver(collection);
    }
}
function throwMappingExisted(nodeName, key) {
    throw new Error(`Mapping for property ${String(key)} of <${nodeName} /> already exists`);
}
const IsDataAttribute = createLookup();
function isDataAttribute(obj, key, svgAnalyzer) {
    if (IsDataAttribute[key] === true) {
        return true;
    }
    if (typeof key !== 'string') {
        return false;
    }
    const prefix = key.slice(0, 5);
    // https://html.spec.whatwg.org/multipage/dom.html#wai-aria
    // https://html.spec.whatwg.org/multipage/dom.html#custom-data-attribute
    return IsDataAttribute[key] =
        prefix === 'aria-' ||
            prefix === 'data-' ||
            svgAnalyzer.isStandardSvgAttribute(obj, key);
}
function createLookup() {
    return Object.create(null);
}
//# sourceMappingURL=observer-locator.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/select-value-observer.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/select-value-observer.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectValueObserver": () => /* binding */ SelectValueObserver
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");

const hasOwn = Object.prototype.hasOwnProperty;
const childObserverOptions = {
    childList: true,
    subtree: true,
    characterData: true
};
function defaultMatcher(a, b) {
    return a === b;
}
class SelectValueObserver {
    constructor(obj, 
    // deepscan-disable-next-line
    _key, handler, observerLocator) {
        this.handler = handler;
        this.observerLocator = observerLocator;
        this.currentValue = void 0;
        this.oldValue = void 0;
        this.hasChanges = false;
        // ObserverType.Layout is not always true
        // but for simplicity, always treat as such
        this.type = 2 /* Node */ | 1 /* Observer */ | 4 /* Layout */;
        this.arrayObserver = void 0;
        this.nodeObserver = void 0;
        this.observing = false;
        this.obj = obj;
    }
    getValue() {
        // is it safe to assume the observer has the latest value?
        // todo: ability to turn on/off cache based on type
        return this.observing
            ? this.currentValue
            : this.obj.multiple
                ? Array.from(this.obj.options).map(o => o.value)
                : this.obj.value;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        this.observeArray(newValue instanceof Array ? newValue : null);
        if ((flags & 4096 /* noFlush */) === 0) {
            this.flushChanges(flags);
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            this.synchronizeOptions();
        }
    }
    handleCollectionChange() {
        // always sync "selected" property of <options/>
        // immediately whenever the array notifies its mutation
        this.synchronizeOptions();
    }
    notify(flags) {
        if ((flags & 32 /* fromBind */) > 0) {
            return;
        }
        const oldValue = this.oldValue;
        const newValue = this.currentValue;
        if (newValue === oldValue) {
            return;
        }
        this.subs.notify(newValue, oldValue, flags);
    }
    handleEvent() {
        const shouldNotify = this.synchronizeValue();
        if (shouldNotify) {
            this.subs.notify(this.currentValue, this.oldValue, 0 /* none */);
        }
    }
    synchronizeOptions(indexMap) {
        const { currentValue, obj } = this;
        const isArray = Array.isArray(currentValue);
        const matcher = obj.matcher !== void 0 ? obj.matcher : defaultMatcher;
        const options = obj.options;
        let i = options.length;
        while (i-- > 0) {
            const option = options[i];
            const optionValue = hasOwn.call(option, 'model') ? option.model : option.value;
            if (isArray) {
                option.selected = currentValue.findIndex(item => !!matcher(optionValue, item)) !== -1;
                continue;
            }
            option.selected = !!matcher(optionValue, currentValue);
        }
    }
    synchronizeValue() {
        // Spec for synchronizing value from `<select/>`  to `SelectObserver`
        // When synchronizing value to observed <select/> element, do the following steps:
        // A. If `<select/>` is multiple
        //    1. Check if current value, called `currentValue` is an array
        //      a. If not an array, return true to signal value has changed
        //      b. If is an array:
        //        i. gather all current selected <option/>, in to array called `values`
        //        ii. loop through the `currentValue` array and remove items that are nolonger selected based on matcher
        //        iii. loop through the `values` array and add items that are selected based on matcher
        //        iv. Return false to signal value hasn't changed
        // B. If the select is single
        //    1. Let `value` equal the first selected option, if no option selected, then `value` is `null`
        //    2. assign `this.currentValue` to `this.oldValue`
        //    3. assign `value` to `this.currentValue`
        //    4. return `true` to signal value has changed
        const obj = this.obj;
        const options = obj.options;
        const len = options.length;
        const currentValue = this.currentValue;
        let i = 0;
        if (obj.multiple) {
            // A.
            if (!(currentValue instanceof Array)) {
                // A.1.a
                return true;
            }
            // A.1.b
            // multi select
            let option;
            const matcher = obj.matcher || defaultMatcher;
            // A.1.b.i
            const values = [];
            while (i < len) {
                option = options[i];
                if (option.selected) {
                    values.push(hasOwn.call(option, 'model')
                        ? option.model
                        : option.value);
                }
                ++i;
            }
            // A.1.b.ii
            i = 0;
            while (i < currentValue.length) {
                const a = currentValue[i];
                // Todo: remove arrow fn
                if (values.findIndex(b => !!matcher(a, b)) === -1) {
                    currentValue.splice(i, 1);
                }
                else {
                    ++i;
                }
            }
            // A.1.b.iii
            i = 0;
            while (i < values.length) {
                const a = values[i];
                // Todo: remove arrow fn
                if (currentValue.findIndex(b => !!matcher(a, b)) === -1) {
                    currentValue.push(a);
                }
                ++i;
            }
            // A.1.b.iv
            return false;
        }
        // B. single select
        // B.1
        let value = null;
        while (i < len) {
            const option = options[i];
            if (option.selected) {
                value = hasOwn.call(option, 'model')
                    ? option.model
                    : option.value;
                break;
            }
            ++i;
        }
        // B.2
        this.oldValue = this.currentValue;
        // B.3
        this.currentValue = value;
        // B.4
        return true;
    }
    start() {
        (this.nodeObserver = new this.obj.ownerDocument.defaultView.MutationObserver(this.handleNodeChange.bind(this)))
            .observe(this.obj, childObserverOptions);
        this.observeArray(this.currentValue instanceof Array ? this.currentValue : null);
        this.observing = true;
    }
    stop() {
        this.nodeObserver.disconnect();
        this.arrayObserver?.unsubscribe(this);
        this.nodeObserver
            = this.arrayObserver
                = void 0;
        this.observing = false;
    }
    // todo: observe all kind of collection
    observeArray(array) {
        this.arrayObserver?.unsubscribe(this);
        this.arrayObserver = void 0;
        if (array != null) {
            if (!this.obj.multiple) {
                throw new Error('Only null or Array instances can be bound to a multi-select.');
            }
            (this.arrayObserver = this.observerLocator.getArrayObserver(array)).subscribe(this);
        }
    }
    handleNodeChange() {
        this.synchronizeOptions();
        const shouldNotify = this.synchronizeValue();
        if (shouldNotify) {
            this.notify(0 /* none */);
        }
    }
    subscribe(subscriber) {
        if (this.subs.add(subscriber) && this.subs.count === 1) {
            this.handler.subscribe(this.obj, this);
            this.start();
        }
    }
    unsubscribe(subscriber) {
        if (this.subs.remove(subscriber) && this.subs.count === 0) {
            this.handler.dispose();
            this.stop();
        }
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.subscriberCollection)(SelectValueObserver);
//# sourceMappingURL=select-value-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/style-attribute-accessor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/style-attribute-accessor.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleAttributeAccessor": () => /* binding */ StyleAttributeAccessor
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");

const customPropertyPrefix = '--';
class StyleAttributeAccessor {
    constructor(obj) {
        this.obj = obj;
        this.currentValue = '';
        this.oldValue = '';
        this.styles = {};
        this.version = 0;
        this.hasChanges = false;
        this.type = 2 /* Node */ | 4 /* Layout */;
    }
    getValue() {
        return this.obj.style.cssText;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if ((flags & 4096 /* noFlush */) === 0) {
            this.flushChanges(flags);
        }
    }
    getStyleTuplesFromString(currentValue) {
        const styleTuples = [];
        const urlRegexTester = /url\([^)]+$/;
        let offset = 0;
        let currentChunk = '';
        let nextSplit;
        let indexOfColon;
        let attribute;
        let value;
        while (offset < currentValue.length) {
            nextSplit = currentValue.indexOf(';', offset);
            if (nextSplit === -1) {
                nextSplit = currentValue.length;
            }
            currentChunk += currentValue.substring(offset, nextSplit);
            offset = nextSplit + 1;
            // Make sure we never split a url so advance to next
            if (urlRegexTester.test(currentChunk)) {
                currentChunk += ';';
                continue;
            }
            indexOfColon = currentChunk.indexOf(':');
            attribute = currentChunk.substring(0, indexOfColon).trim();
            value = currentChunk.substring(indexOfColon + 1).trim();
            styleTuples.push([attribute, value]);
            currentChunk = '';
        }
        return styleTuples;
    }
    getStyleTuplesFromObject(currentValue) {
        let value;
        const styles = [];
        for (const property in currentValue) {
            value = currentValue[property];
            if (value == null) {
                continue;
            }
            if (typeof value === 'string') {
                // Custom properties should not be tampered with
                if (property.startsWith(customPropertyPrefix)) {
                    styles.push([property, value]);
                    continue;
                }
                styles.push([(0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.kebabCase)(property), value]);
                continue;
            }
            styles.push(...this.getStyleTuples(value));
        }
        return styles;
    }
    getStyleTuplesFromArray(currentValue) {
        const len = currentValue.length;
        if (len > 0) {
            const styles = [];
            for (let i = 0; i < len; ++i) {
                styles.push(...this.getStyleTuples(currentValue[i]));
            }
            return styles;
        }
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
    }
    getStyleTuples(currentValue) {
        if (typeof currentValue === 'string') {
            return this.getStyleTuplesFromString(currentValue);
        }
        if (currentValue instanceof Array) {
            return this.getStyleTuplesFromArray(currentValue);
        }
        if (currentValue instanceof Object) {
            return this.getStyleTuplesFromObject(currentValue);
        }
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const currentValue = this.currentValue;
            const styles = this.styles;
            const styleTuples = this.getStyleTuples(currentValue);
            let style;
            let version = this.version;
            this.oldValue = currentValue;
            let tuple;
            let name;
            let value;
            const len = styleTuples.length;
            for (let i = 0; i < len; ++i) {
                tuple = styleTuples[i];
                name = tuple[0];
                value = tuple[1];
                this.setProperty(name, value);
                styles[name] = version;
            }
            this.styles = styles;
            this.version += 1;
            if (version === 0) {
                return;
            }
            version -= 1;
            for (style in styles) {
                if (!Object.prototype.hasOwnProperty.call(styles, style) || styles[style] !== version) {
                    continue;
                }
                this.obj.style.removeProperty(style);
            }
        }
    }
    setProperty(style, value) {
        let priority = '';
        if (value != null && typeof value.indexOf === 'function' && value.includes('!important')) {
            priority = 'important';
            value = value.replace('!important', '');
        }
        this.obj.style.setProperty(style, value, priority);
    }
    bind(flags) {
        this.currentValue = this.oldValue = this.obj.style.cssText;
    }
}
//# sourceMappingURL=style-attribute-accessor.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/svg-analyzer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/svg-analyzer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ISVGAnalyzer": () => /* binding */ ISVGAnalyzer,
/* harmony export */   "NoopSVGAnalyzer": () => /* binding */ NoopSVGAnalyzer,
/* harmony export */   "SVGAnalyzer": () => /* binding */ SVGAnalyzer
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");


const ISVGAnalyzer = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ISVGAnalyzer', x => x.singleton(NoopSVGAnalyzer));
class NoopSVGAnalyzer {
    isStandardSvgAttribute(node, attributeName) {
        return false;
    }
}
function o(keys) {
    const lookup = Object.create(null);
    for (const key of keys) {
        lookup[key] = true;
    }
    return lookup;
}
class SVGAnalyzer {
    constructor(platform) {
        this.svgElements = Object.assign(Object.create(null), {
            'a': o(['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'target', 'transform', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'altGlyph': o(['class', 'dx', 'dy', 'externalResourcesRequired', 'format', 'glyphRef', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'altglyph': Object.create(null),
            'altGlyphDef': o(['id', 'xml:base', 'xml:lang', 'xml:space']),
            'altglyphdef': Object.create(null),
            'altGlyphItem': o(['id', 'xml:base', 'xml:lang', 'xml:space']),
            'altglyphitem': Object.create(null),
            'animate': o(['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'animateColor': o(['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'animateMotion': o(['accumulate', 'additive', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keyPoints', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'origin', 'path', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'rotate', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'animateTransform': o(['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'type', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'circle': o(['class', 'cx', 'cy', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'r', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space']),
            'clipPath': o(['class', 'clipPathUnits', 'externalResourcesRequired', 'id', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space']),
            'color-profile': o(['id', 'local', 'name', 'rendering-intent', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'cursor': o(['externalResourcesRequired', 'id', 'requiredExtensions', 'requiredFeatures', 'systemLanguage', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'defs': o(['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space']),
            'desc': o(['class', 'id', 'style', 'xml:base', 'xml:lang', 'xml:space']),
            'ellipse': o(['class', 'cx', 'cy', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rx', 'ry', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space']),
            'feBlend': o(['class', 'height', 'id', 'in', 'in2', 'mode', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feColorMatrix': o(['class', 'height', 'id', 'in', 'result', 'style', 'type', 'values', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feComponentTransfer': o(['class', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feComposite': o(['class', 'height', 'id', 'in', 'in2', 'k1', 'k2', 'k3', 'k4', 'operator', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feConvolveMatrix': o(['bias', 'class', 'divisor', 'edgeMode', 'height', 'id', 'in', 'kernelMatrix', 'kernelUnitLength', 'order', 'preserveAlpha', 'result', 'style', 'targetX', 'targetY', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feDiffuseLighting': o(['class', 'diffuseConstant', 'height', 'id', 'in', 'kernelUnitLength', 'result', 'style', 'surfaceScale', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feDisplacementMap': o(['class', 'height', 'id', 'in', 'in2', 'result', 'scale', 'style', 'width', 'x', 'xChannelSelector', 'xml:base', 'xml:lang', 'xml:space', 'y', 'yChannelSelector']),
            'feDistantLight': o(['azimuth', 'elevation', 'id', 'xml:base', 'xml:lang', 'xml:space']),
            'feFlood': o(['class', 'height', 'id', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feFuncA': o(['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space']),
            'feFuncB': o(['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space']),
            'feFuncG': o(['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space']),
            'feFuncR': o(['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space']),
            'feGaussianBlur': o(['class', 'height', 'id', 'in', 'result', 'stdDeviation', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feImage': o(['class', 'externalResourcesRequired', 'height', 'id', 'preserveAspectRatio', 'result', 'style', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feMerge': o(['class', 'height', 'id', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feMergeNode': o(['id', 'xml:base', 'xml:lang', 'xml:space']),
            'feMorphology': o(['class', 'height', 'id', 'in', 'operator', 'radius', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feOffset': o(['class', 'dx', 'dy', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'fePointLight': o(['id', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'z']),
            'feSpecularLighting': o(['class', 'height', 'id', 'in', 'kernelUnitLength', 'result', 'specularConstant', 'specularExponent', 'style', 'surfaceScale', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feSpotLight': o(['id', 'limitingConeAngle', 'pointsAtX', 'pointsAtY', 'pointsAtZ', 'specularExponent', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'z']),
            'feTile': o(['class', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'feTurbulence': o(['baseFrequency', 'class', 'height', 'id', 'numOctaves', 'result', 'seed', 'stitchTiles', 'style', 'type', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'filter': o(['class', 'externalResourcesRequired', 'filterRes', 'filterUnits', 'height', 'id', 'primitiveUnits', 'style', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'font': o(['class', 'externalResourcesRequired', 'horiz-adv-x', 'horiz-origin-x', 'horiz-origin-y', 'id', 'style', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space']),
            'font-face': o(['accent-height', 'alphabetic', 'ascent', 'bbox', 'cap-height', 'descent', 'font-family', 'font-size', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'hanging', 'id', 'ideographic', 'mathematical', 'overline-position', 'overline-thickness', 'panose-1', 'slope', 'stemh', 'stemv', 'strikethrough-position', 'strikethrough-thickness', 'underline-position', 'underline-thickness', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'widths', 'x-height', 'xml:base', 'xml:lang', 'xml:space']),
            'font-face-format': o(['id', 'string', 'xml:base', 'xml:lang', 'xml:space']),
            'font-face-name': o(['id', 'name', 'xml:base', 'xml:lang', 'xml:space']),
            'font-face-src': o(['id', 'xml:base', 'xml:lang', 'xml:space']),
            'font-face-uri': o(['id', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'foreignObject': o(['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'g': o(['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space']),
            'glyph': o(['arabic-form', 'class', 'd', 'glyph-name', 'horiz-adv-x', 'id', 'lang', 'orientation', 'style', 'unicode', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space']),
            'glyphRef': o(['class', 'dx', 'dy', 'format', 'glyphRef', 'id', 'style', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'glyphref': Object.create(null),
            'hkern': o(['g1', 'g2', 'id', 'k', 'u1', 'u2', 'xml:base', 'xml:lang', 'xml:space']),
            'image': o(['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'line': o(['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'x1', 'x2', 'xml:base', 'xml:lang', 'xml:space', 'y1', 'y2']),
            'linearGradient': o(['class', 'externalResourcesRequired', 'gradientTransform', 'gradientUnits', 'id', 'spreadMethod', 'style', 'x1', 'x2', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y1', 'y2']),
            'marker': o(['class', 'externalResourcesRequired', 'id', 'markerHeight', 'markerUnits', 'markerWidth', 'orient', 'preserveAspectRatio', 'refX', 'refY', 'style', 'viewBox', 'xml:base', 'xml:lang', 'xml:space']),
            'mask': o(['class', 'externalResourcesRequired', 'height', 'id', 'maskContentUnits', 'maskUnits', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'metadata': o(['id', 'xml:base', 'xml:lang', 'xml:space']),
            'missing-glyph': o(['class', 'd', 'horiz-adv-x', 'id', 'style', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space']),
            'mpath': o(['externalResourcesRequired', 'id', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'path': o(['class', 'd', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'pathLength', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space']),
            'pattern': o(['class', 'externalResourcesRequired', 'height', 'id', 'patternContentUnits', 'patternTransform', 'patternUnits', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'viewBox', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'polygon': o(['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'points', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space']),
            'polyline': o(['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'points', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space']),
            'radialGradient': o(['class', 'cx', 'cy', 'externalResourcesRequired', 'fx', 'fy', 'gradientTransform', 'gradientUnits', 'id', 'r', 'spreadMethod', 'style', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'rect': o(['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rx', 'ry', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'script': o(['externalResourcesRequired', 'id', 'type', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'set': o(['attributeName', 'attributeType', 'begin', 'dur', 'end', 'externalResourcesRequired', 'fill', 'id', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'stop': o(['class', 'id', 'offset', 'style', 'xml:base', 'xml:lang', 'xml:space']),
            'style': o(['id', 'media', 'title', 'type', 'xml:base', 'xml:lang', 'xml:space']),
            'svg': o(['baseProfile', 'class', 'contentScriptType', 'contentStyleType', 'externalResourcesRequired', 'height', 'id', 'onabort', 'onactivate', 'onclick', 'onerror', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onresize', 'onscroll', 'onunload', 'onzoom', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'version', 'viewBox', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'zoomAndPan']),
            'switch': o(['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space']),
            'symbol': o(['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'preserveAspectRatio', 'style', 'viewBox', 'xml:base', 'xml:lang', 'xml:space']),
            'text': o(['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'transform', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'textPath': o(['class', 'externalResourcesRequired', 'id', 'lengthAdjust', 'method', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'spacing', 'startOffset', 'style', 'systemLanguage', 'textLength', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space']),
            'title': o(['class', 'id', 'style', 'xml:base', 'xml:lang', 'xml:space']),
            'tref': o(['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'x', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'tspan': o(['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'use': o(['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y']),
            'view': o(['externalResourcesRequired', 'id', 'preserveAspectRatio', 'viewBox', 'viewTarget', 'xml:base', 'xml:lang', 'xml:space', 'zoomAndPan']),
            'vkern': o(['g1', 'g2', 'id', 'k', 'u1', 'u2', 'xml:base', 'xml:lang', 'xml:space']),
        });
        this.svgPresentationElements = o([
            'a',
            'altGlyph',
            'animate',
            'animateColor',
            'circle',
            'clipPath',
            'defs',
            'ellipse',
            'feBlend',
            'feColorMatrix',
            'feComponentTransfer',
            'feComposite',
            'feConvolveMatrix',
            'feDiffuseLighting',
            'feDisplacementMap',
            'feFlood',
            'feGaussianBlur',
            'feImage',
            'feMerge',
            'feMorphology',
            'feOffset',
            'feSpecularLighting',
            'feTile',
            'feTurbulence',
            'filter',
            'font',
            'foreignObject',
            'g',
            'glyph',
            'glyphRef',
            'image',
            'line',
            'linearGradient',
            'marker',
            'mask',
            'missing-glyph',
            'path',
            'pattern',
            'polygon',
            'polyline',
            'radialGradient',
            'rect',
            'stop',
            'svg',
            'switch',
            'symbol',
            'text',
            'textPath',
            'tref',
            'tspan',
            'use',
        ]);
        this.svgPresentationAttributes = o([
            'alignment-baseline',
            'baseline-shift',
            'clip-path',
            'clip-rule',
            'clip',
            'color-interpolation-filters',
            'color-interpolation',
            'color-profile',
            'color-rendering',
            'color',
            'cursor',
            'direction',
            'display',
            'dominant-baseline',
            'enable-background',
            'fill-opacity',
            'fill-rule',
            'fill',
            'filter',
            'flood-color',
            'flood-opacity',
            'font-family',
            'font-size-adjust',
            'font-size',
            'font-stretch',
            'font-style',
            'font-variant',
            'font-weight',
            'glyph-orientation-horizontal',
            'glyph-orientation-vertical',
            'image-rendering',
            'kerning',
            'letter-spacing',
            'lighting-color',
            'marker-end',
            'marker-mid',
            'marker-start',
            'mask',
            'opacity',
            'overflow',
            'pointer-events',
            'shape-rendering',
            'stop-color',
            'stop-opacity',
            'stroke-dasharray',
            'stroke-dashoffset',
            'stroke-linecap',
            'stroke-linejoin',
            'stroke-miterlimit',
            'stroke-opacity',
            'stroke-width',
            'stroke',
            'text-anchor',
            'text-decoration',
            'text-rendering',
            'unicode-bidi',
            'visibility',
            'word-spacing',
            'writing-mode',
        ]);
        this.SVGElement = platform.globalThis.SVGElement;
        const div = platform.document.createElement('div');
        div.innerHTML = '<svg><altGlyph /></svg>';
        if (div.firstElementChild.nodeName === 'altglyph') {
            // handle chrome casing inconsistencies.
            const svg = this.svgElements;
            let tmp = svg.altGlyph;
            svg.altGlyph = svg.altglyph;
            svg.altglyph = tmp;
            tmp = svg.altGlyphDef;
            svg.altGlyphDef = svg.altglyphdef;
            svg.altglyphdef = tmp;
            tmp = svg.altGlyphItem;
            svg.altGlyphItem = svg.altglyphitem;
            svg.altglyphitem = tmp;
            tmp = svg.glyphRef;
            svg.glyphRef = svg.glyphref;
            svg.glyphref = tmp;
        }
    }
    static register(container) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.singleton(ISVGAnalyzer, this).register(container);
    }
    isStandardSvgAttribute(node, attributeName) {
        if (!(node instanceof this.SVGElement)) {
            return false;
        }
        return (this.svgPresentationElements[node.nodeName] === true && this.svgPresentationAttributes[attributeName] === true ||
            this.svgElements[node.nodeName]?.[attributeName] === true);
    }
}
/**
 * @internal
 */
SVGAnalyzer.inject = [_platform_js__WEBPACK_IMPORTED_MODULE_1__.IPlatform];
//# sourceMappingURL=svg-analyzer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/observation/value-attribute-observer.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/observation/value-attribute-observer.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ValueAttributeObserver": () => /* binding */ ValueAttributeObserver
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");

/**
 * Observer for non-radio, non-checkbox input.
 */
class ValueAttributeObserver {
    constructor(obj, propertyKey, handler) {
        this.propertyKey = propertyKey;
        this.handler = handler;
        this.currentValue = '';
        this.oldValue = '';
        this.hasChanges = false;
        // ObserverType.Layout is not always true, it depends on the element & property combo
        // but for simplicity, always treat as such
        this.type = 2 /* Node */ | 1 /* Observer */ | 4 /* Layout */;
        this.obj = obj;
    }
    getValue() {
        // is it safe to assume the observer has the latest value?
        // todo: ability to turn on/off cache based on type
        return this.currentValue;
    }
    setValue(newValue, flags) {
        this.currentValue = newValue;
        this.hasChanges = newValue !== this.oldValue;
        if (!this.handler.config.readonly && (flags & 4096 /* noFlush */) === 0) {
            this.flushChanges(flags);
        }
    }
    flushChanges(flags) {
        if (this.hasChanges) {
            this.hasChanges = false;
            const currentValue = this.currentValue;
            const oldValue = this.oldValue;
            this.oldValue = currentValue;
            this.obj[this.propertyKey] = currentValue ?? this.handler.config.default;
            if ((flags & 32 /* fromBind */) === 0) {
                this.subs.notify(currentValue, oldValue, flags);
            }
        }
    }
    handleEvent() {
        const oldValue = this.oldValue = this.currentValue;
        const currentValue = this.currentValue = this.obj[this.propertyKey];
        if (oldValue !== currentValue) {
            this.oldValue = currentValue;
            this.subs.notify(currentValue, oldValue, 0 /* none */);
        }
    }
    subscribe(subscriber) {
        if (this.subs.add(subscriber) && this.subs.count === 1) {
            this.handler.subscribe(this.obj, this);
            this.currentValue = this.oldValue = this.obj[this.propertyKey];
        }
    }
    unsubscribe(subscriber) {
        if (this.subs.remove(subscriber) && this.subs.count === 0) {
            this.handler.dispose();
        }
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.subscriberCollection)(ValueAttributeObserver);
//# sourceMappingURL=value-attribute-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/platform.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IPlatform": () => /* binding */ IPlatform
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");

const IPlatform = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IPlatform;
//# sourceMappingURL=platform.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/renderer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/renderer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InstructionType": () => /* binding */ InstructionType,
/* harmony export */   "IInstruction": () => /* binding */ IInstruction,
/* harmony export */   "isInstruction": () => /* binding */ isInstruction,
/* harmony export */   "InterpolationInstruction": () => /* binding */ InterpolationInstruction,
/* harmony export */   "PropertyBindingInstruction": () => /* binding */ PropertyBindingInstruction,
/* harmony export */   "IteratorBindingInstruction": () => /* binding */ IteratorBindingInstruction,
/* harmony export */   "CallBindingInstruction": () => /* binding */ CallBindingInstruction,
/* harmony export */   "RefBindingInstruction": () => /* binding */ RefBindingInstruction,
/* harmony export */   "SetPropertyInstruction": () => /* binding */ SetPropertyInstruction,
/* harmony export */   "HydrateElementInstruction": () => /* binding */ HydrateElementInstruction,
/* harmony export */   "HydrateAttributeInstruction": () => /* binding */ HydrateAttributeInstruction,
/* harmony export */   "HydrateTemplateController": () => /* binding */ HydrateTemplateController,
/* harmony export */   "HydrateLetElementInstruction": () => /* binding */ HydrateLetElementInstruction,
/* harmony export */   "LetBindingInstruction": () => /* binding */ LetBindingInstruction,
/* harmony export */   "TextBindingInstruction": () => /* binding */ TextBindingInstruction,
/* harmony export */   "ListenerBindingInstruction": () => /* binding */ ListenerBindingInstruction,
/* harmony export */   "StylePropertyBindingInstruction": () => /* binding */ StylePropertyBindingInstruction,
/* harmony export */   "SetAttributeInstruction": () => /* binding */ SetAttributeInstruction,
/* harmony export */   "SetClassAttributeInstruction": () => /* binding */ SetClassAttributeInstruction,
/* harmony export */   "SetStyleAttributeInstruction": () => /* binding */ SetStyleAttributeInstruction,
/* harmony export */   "AttributeBindingInstruction": () => /* binding */ AttributeBindingInstruction,
/* harmony export */   "ITemplateCompiler": () => /* binding */ ITemplateCompiler,
/* harmony export */   "IRenderer": () => /* binding */ IRenderer,
/* harmony export */   "renderer": () => /* binding */ renderer,
/* harmony export */   "SetPropertyRenderer": () => /* binding */ SetPropertyRenderer,
/* harmony export */   "CustomElementRenderer": () => /* binding */ CustomElementRenderer,
/* harmony export */   "CustomAttributeRenderer": () => /* binding */ CustomAttributeRenderer,
/* harmony export */   "TemplateControllerRenderer": () => /* binding */ TemplateControllerRenderer,
/* harmony export */   "LetElementRenderer": () => /* binding */ LetElementRenderer,
/* harmony export */   "CallBindingRenderer": () => /* binding */ CallBindingRenderer,
/* harmony export */   "RefBindingRenderer": () => /* binding */ RefBindingRenderer,
/* harmony export */   "InterpolationBindingRenderer": () => /* binding */ InterpolationBindingRenderer,
/* harmony export */   "PropertyBindingRenderer": () => /* binding */ PropertyBindingRenderer,
/* harmony export */   "IteratorBindingRenderer": () => /* binding */ IteratorBindingRenderer,
/* harmony export */   "applyBindingBehavior": () => /* binding */ applyBindingBehavior,
/* harmony export */   "TextBindingRenderer": () => /* binding */ TextBindingRenderer,
/* harmony export */   "ListenerBindingRenderer": () => /* binding */ ListenerBindingRenderer,
/* harmony export */   "SetAttributeRenderer": () => /* binding */ SetAttributeRenderer,
/* harmony export */   "SetClassAttributeRenderer": () => /* binding */ SetClassAttributeRenderer,
/* harmony export */   "SetStyleAttributeRenderer": () => /* binding */ SetStyleAttributeRenderer,
/* harmony export */   "StylePropertyBindingRenderer": () => /* binding */ StylePropertyBindingRenderer,
/* harmony export */   "AttributeBindingRenderer": () => /* binding */ AttributeBindingRenderer
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _binding_call_binding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./binding/call-binding.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/call-binding.js");
/* harmony import */ var _binding_attribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./binding/attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/attribute.js");
/* harmony import */ var _binding_interpolation_binding_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./binding/interpolation-binding.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/interpolation-binding.js");
/* harmony import */ var _binding_let_binding_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./binding/let-binding.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/let-binding.js");
/* harmony import */ var _binding_property_binding_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./binding/property-binding.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/property-binding.js");
/* harmony import */ var _binding_ref_binding_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./binding/ref-binding.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/ref-binding.js");
/* harmony import */ var _binding_listener_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./binding/listener.js */ "./node_modules/@aurelia/runtime-html/dist/esm/binding/listener.js");
/* harmony import */ var _observation_event_delegator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./observation/event-delegator.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/event-delegator.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
/* harmony import */ var _templating_render_context_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./templating/render-context.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/render-context.js");
/* harmony import */ var _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./resources/custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _templating_controller_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./templating/controller.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/controller.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
















var InstructionType;
(function (InstructionType) {
    InstructionType["hydrateElement"] = "ra";
    InstructionType["hydrateAttribute"] = "rb";
    InstructionType["hydrateTemplateController"] = "rc";
    InstructionType["hydrateLetElement"] = "rd";
    InstructionType["setProperty"] = "re";
    InstructionType["interpolation"] = "rf";
    InstructionType["propertyBinding"] = "rg";
    InstructionType["callBinding"] = "rh";
    InstructionType["letBinding"] = "ri";
    InstructionType["refBinding"] = "rj";
    InstructionType["iteratorBinding"] = "rk";
    InstructionType["textBinding"] = "ha";
    InstructionType["listenerBinding"] = "hb";
    InstructionType["attributeBinding"] = "hc";
    InstructionType["stylePropertyBinding"] = "hd";
    InstructionType["setAttribute"] = "he";
    InstructionType["setClassAttribute"] = "hf";
    InstructionType["setStyleAttribute"] = "hg";
})(InstructionType || (InstructionType = {}));
const IInstruction = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('Instruction');
function isInstruction(value) {
    const type = value.type;
    return typeof type === 'string' && type.length === 2;
}
class InterpolationInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
    }
    get type() { return "rf" /* interpolation */; }
}
class PropertyBindingInstruction {
    constructor(from, to, mode) {
        this.from = from;
        this.to = to;
        this.mode = mode;
    }
    get type() { return "rg" /* propertyBinding */; }
}
class IteratorBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
    }
    get type() { return "rk" /* iteratorBinding */; }
}
class CallBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
    }
    get type() { return "rh" /* callBinding */; }
}
class RefBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
    }
    get type() { return "rj" /* refBinding */; }
}
class SetPropertyInstruction {
    constructor(value, to) {
        this.value = value;
        this.to = to;
    }
    get type() { return "re" /* setProperty */; }
}
class HydrateElementInstruction {
    constructor(res, alias, instructions, slotInfo) {
        this.res = res;
        this.alias = alias;
        this.instructions = instructions;
        this.slotInfo = slotInfo;
    }
    get type() { return "ra" /* hydrateElement */; }
}
class HydrateAttributeInstruction {
    constructor(res, alias, instructions) {
        this.res = res;
        this.alias = alias;
        this.instructions = instructions;
    }
    get type() { return "rb" /* hydrateAttribute */; }
}
class HydrateTemplateController {
    constructor(def, res, alias, instructions) {
        this.def = def;
        this.res = res;
        this.alias = alias;
        this.instructions = instructions;
    }
    get type() { return "rc" /* hydrateTemplateController */; }
}
class HydrateLetElementInstruction {
    constructor(instructions, toBindingContext) {
        this.instructions = instructions;
        this.toBindingContext = toBindingContext;
    }
    get type() { return "rd" /* hydrateLetElement */; }
}
class LetBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
    }
    get type() { return "ri" /* letBinding */; }
}
class TextBindingInstruction {
    constructor(from) {
        this.from = from;
    }
    get type() { return "ha" /* textBinding */; }
}
class ListenerBindingInstruction {
    constructor(from, to, preventDefault, strategy) {
        this.from = from;
        this.to = to;
        this.preventDefault = preventDefault;
        this.strategy = strategy;
    }
    get type() { return "hb" /* listenerBinding */; }
}
class StylePropertyBindingInstruction {
    constructor(from, to) {
        this.from = from;
        this.to = to;
    }
    get type() { return "hd" /* stylePropertyBinding */; }
}
class SetAttributeInstruction {
    constructor(value, to) {
        this.value = value;
        this.to = to;
    }
    get type() { return "he" /* setAttribute */; }
}
class SetClassAttributeInstruction {
    constructor(value) {
        this.value = value;
        this.type = "hf" /* setClassAttribute */;
    }
}
class SetStyleAttributeInstruction {
    constructor(value) {
        this.value = value;
        this.type = "hg" /* setStyleAttribute */;
    }
}
class AttributeBindingInstruction {
    constructor(
    /**
     * `attr` and `to` have the same value on a normal attribute
     * Will be different on `class` and `style`
     * on `class`: attr = `class` (from binding command), to = attribute name
     * on `style`: attr = `style` (from binding command), to = attribute name
     */
    attr, from, to) {
        this.attr = attr;
        this.from = from;
        this.to = to;
    }
    get type() { return "hc" /* attributeBinding */; }
}
const ITemplateCompiler = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ITemplateCompiler');
const IRenderer = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IRenderer');
function renderer(instructionType) {
    return function decorator(target) {
        // wrap the constructor to set the instructionType to the instance (for better performance than when set on the prototype)
        const decoratedTarget = function (...args) {
            const instance = new target(...args);
            instance.instructionType = instructionType;
            return instance;
        };
        // make sure we register the decorated constructor with DI
        decoratedTarget.register = function register(container) {
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.singleton(IRenderer, decoratedTarget).register(container);
        };
        // copy over any metadata such as annotations (set by preceding decorators) as well as static properties set by the user
        // also copy the name, to be less confusing to users (so they can still use constructor.name for whatever reason)
        // the length (number of ctor arguments) is copied for the same reason
        const metadataKeys = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwnKeys(target);
        for (const key of metadataKeys) {
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(key, _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(key, target), decoratedTarget);
        }
        const ownProperties = Object.getOwnPropertyDescriptors(target);
        Object.keys(ownProperties).filter(prop => prop !== 'prototype').forEach(prop => {
            Reflect.defineProperty(decoratedTarget, prop, ownProperties[prop]);
        });
        return decoratedTarget;
    };
}
function ensureExpression(parser, srcOrExpr, bindingType) {
    if (typeof srcOrExpr === 'string') {
        return parser.parse(srcOrExpr, bindingType);
    }
    return srcOrExpr;
}
function getTarget(potentialTarget) {
    if (potentialTarget.viewModel != null) {
        return potentialTarget.viewModel;
    }
    return potentialTarget;
}
function getRefTarget(refHost, refTargetName) {
    if (refTargetName === 'element') {
        return refHost;
    }
    switch (refTargetName) {
        case 'controller':
            // this means it supports returning undefined
            return _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElement.for(refHost);
        case 'view':
            // todo: returns node sequences for fun?
            throw new Error('Not supported API');
        case 'view-model':
            // this means it supports returning undefined
            return _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElement.for(refHost).viewModel;
        default: {
            const caController = _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_12__.CustomAttribute.for(refHost, refTargetName);
            if (caController !== void 0) {
                return caController.viewModel;
            }
            const ceController = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElement.for(refHost, { name: refTargetName });
            if (ceController === void 0) {
                throw new Error(`Attempted to reference "${refTargetName}", but it was not found amongst the target's API.`);
            }
            return ceController.viewModel;
        }
    }
}
let SetPropertyRenderer = 
/** @internal */
class SetPropertyRenderer {
    render(flags, context, controller, target, instruction) {
        const obj = getTarget(target);
        if (obj.$observers !== void 0 && obj.$observers[instruction.to] !== void 0) {
            obj.$observers[instruction.to].setValue(instruction.value, 32 /* fromBind */);
        }
        else {
            obj[instruction.to] = instruction.value;
        }
    }
};
SetPropertyRenderer = __decorate([
    renderer("re" /* setProperty */)
    /** @internal */
], SetPropertyRenderer);

let CustomElementRenderer = 
/** @internal */
class CustomElementRenderer {
    render(flags, context, controller, target, instruction) {
        let viewFactory;
        const slotInfo = instruction.slotInfo;
        if (slotInfo !== null) {
            const projectionCtx = slotInfo.projectionContext;
            viewFactory = (0,_templating_render_context_js__WEBPACK_IMPORTED_MODULE_11__.getRenderContext)(projectionCtx.content, context).getViewFactory(void 0, slotInfo.type, projectionCtx.scope);
        }
        const factory = context.getComponentFactory(
        /* parentController */ controller, 
        /* host             */ target, 
        /* instruction      */ instruction, 
        /* viewFactory      */ viewFactory, 
        /* location         */ target);
        const key = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElement.keyFrom(instruction.res);
        const component = factory.createComponent(key);
        const childController = _templating_controller_js__WEBPACK_IMPORTED_MODULE_14__.Controller.forCustomElement(
        /* root                */ controller.root, 
        /* container           */ context, 
        /* viewModel           */ component, 
        /* host                */ target, 
        /* targetedProjections */ context.getProjectionFor(instruction), 
        /* flags               */ flags);
        flags = childController.flags;
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(key, childController, target);
        context.renderChildren(
        /* flags        */ flags, 
        /* instructions */ instruction.instructions, 
        /* controller   */ controller, 
        /* target       */ childController);
        controller.addController(childController);
        factory.dispose();
    }
};
CustomElementRenderer = __decorate([
    renderer("ra" /* hydrateElement */)
    /** @internal */
], CustomElementRenderer);

let CustomAttributeRenderer = 
/** @internal */
class CustomAttributeRenderer {
    render(flags, context, controller, target, instruction) {
        const factory = context.getComponentFactory(
        /* parentController */ controller, 
        /* host             */ target, 
        /* instruction      */ instruction, 
        /* viewFactory      */ void 0, 
        /* location         */ void 0);
        const key = _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_12__.CustomAttribute.keyFrom(instruction.res);
        const component = factory.createComponent(key);
        const childController = _templating_controller_js__WEBPACK_IMPORTED_MODULE_14__.Controller.forCustomAttribute(
        /* root      */ controller.root, 
        /* container */ context, 
        /* viewModel */ component, 
        /* host      */ target, 
        /* flags     */ flags);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(key, childController, target);
        context.renderChildren(
        /* flags        */ flags, 
        /* instructions */ instruction.instructions, 
        /* controller   */ controller, 
        /* target       */ childController);
        controller.addController(childController);
        factory.dispose();
    }
};
CustomAttributeRenderer = __decorate([
    renderer("rb" /* hydrateAttribute */)
    /** @internal */
], CustomAttributeRenderer);

let TemplateControllerRenderer = 
/** @internal */
class TemplateControllerRenderer {
    render(flags, context, controller, target, instruction) {
        const viewFactory = (0,_templating_render_context_js__WEBPACK_IMPORTED_MODULE_11__.getRenderContext)(instruction.def, context).getViewFactory();
        const renderLocation = (0,_dom_js__WEBPACK_IMPORTED_MODULE_13__.convertToRenderLocation)(target);
        const componentFactory = context.getComponentFactory(
        /* parentController */ controller, 
        /* host             */ target, 
        /* instruction      */ instruction, 
        /* viewFactory      */ viewFactory, 
        /* location         */ renderLocation);
        const key = _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_12__.CustomAttribute.keyFrom(instruction.res);
        const component = componentFactory.createComponent(key);
        const childController = _templating_controller_js__WEBPACK_IMPORTED_MODULE_14__.Controller.forCustomAttribute(
        /* root      */ controller.root, 
        /* container */ context, 
        /* viewModel */ component, 
        /* host      */ target, 
        /* flags     */ flags);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(key, childController, renderLocation);
        component.link?.(flags, context, controller, childController, target, instruction);
        context.renderChildren(
        /* flags        */ flags, 
        /* instructions */ instruction.instructions, 
        /* controller   */ controller, 
        /* target       */ childController);
        controller.addController(childController);
        componentFactory.dispose();
    }
};
TemplateControllerRenderer = __decorate([
    renderer("rc" /* hydrateTemplateController */)
    /** @internal */
], TemplateControllerRenderer);

let LetElementRenderer = 
/** @internal */
class LetElementRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        target.remove();
        const childInstructions = instruction.instructions;
        const toBindingContext = instruction.toBindingContext;
        let childInstruction;
        let expr;
        let binding;
        for (let i = 0, ii = childInstructions.length; i < ii; ++i) {
            childInstruction = childInstructions[i];
            expr = ensureExpression(this.parser, childInstruction.from, 48 /* IsPropertyCommand */);
            binding = applyBindingBehavior(new _binding_let_binding_js__WEBPACK_IMPORTED_MODULE_5__.LetBinding(expr, childInstruction.to, this.observerLocator, context, toBindingContext), expr, context);
            controller.addBinding(binding);
        }
    }
};
LetElementRenderer = __decorate([
    renderer("rd" /* hydrateLetElement */)
    /** @internal */
    ,
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser),
    __param(1, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator)
], LetElementRenderer);

let CallBindingRenderer = 
/** @internal */
class CallBindingRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 153 /* CallCommand */);
        const binding = applyBindingBehavior(new _binding_call_binding_js__WEBPACK_IMPORTED_MODULE_2__.CallBinding(expr, getTarget(target), instruction.to, this.observerLocator, context), expr, context);
        controller.addBinding(binding);
    }
};
CallBindingRenderer = __decorate([
    renderer("rh" /* callBinding */)
    /** @internal */
    ,
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser),
    __param(1, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator)
], CallBindingRenderer);

let RefBindingRenderer = 
/** @internal */
class RefBindingRenderer {
    constructor(parser) {
        this.parser = parser;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 5376 /* IsRef */);
        const binding = applyBindingBehavior(new _binding_ref_binding_js__WEBPACK_IMPORTED_MODULE_7__.RefBinding(expr, getRefTarget(target, instruction.to), context), expr, context);
        controller.addBinding(binding);
    }
};
RefBindingRenderer = __decorate([
    renderer("rj" /* refBinding */)
    /** @internal */
    ,
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser)
], RefBindingRenderer);

let InterpolationBindingRenderer = 
/** @internal */
class InterpolationBindingRenderer {
    constructor(parser, observerLocator, platform) {
        this.parser = parser;
        this.observerLocator = observerLocator;
        this.platform = platform;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 2048 /* Interpolation */);
        const binding = new _binding_interpolation_binding_js__WEBPACK_IMPORTED_MODULE_4__.InterpolationBinding(this.observerLocator, expr, getTarget(target), instruction.to, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView, context, this.platform.domWriteQueue);
        const partBindings = binding.partBindings;
        let partBinding;
        for (let i = 0, ii = partBindings.length; ii > i; ++i) {
            partBinding = partBindings[i];
            partBindings[i] = applyBindingBehavior(partBinding, partBinding.sourceExpression, context);
        }
        controller.addBinding(binding);
    }
};
InterpolationBindingRenderer = __decorate([
    renderer("rf" /* interpolation */)
    /** @internal */
    ,
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser),
    __param(1, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator),
    __param(2, _platform_js__WEBPACK_IMPORTED_MODULE_15__.IPlatform)
], InterpolationBindingRenderer);

let PropertyBindingRenderer = 
/** @internal */
class PropertyBindingRenderer {
    constructor(parser, observerLocator, platform) {
        this.parser = parser;
        this.observerLocator = observerLocator;
        this.platform = platform;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 48 /* IsPropertyCommand */ | instruction.mode);
        const binding = applyBindingBehavior(new _binding_property_binding_js__WEBPACK_IMPORTED_MODULE_6__.PropertyBinding(expr, getTarget(target), instruction.to, instruction.mode, this.observerLocator, context, this.platform.domWriteQueue), expr, context);
        controller.addBinding(binding);
    }
};
PropertyBindingRenderer = __decorate([
    renderer("rg" /* propertyBinding */)
    /** @internal */
    ,
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser),
    __param(1, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator),
    __param(2, _platform_js__WEBPACK_IMPORTED_MODULE_15__.IPlatform)
], PropertyBindingRenderer);

let IteratorBindingRenderer = 
/** @internal */
class IteratorBindingRenderer {
    constructor(parser, observerLocator, platform) {
        this.parser = parser;
        this.observerLocator = observerLocator;
        this.platform = platform;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 539 /* ForCommand */);
        const binding = applyBindingBehavior(new _binding_property_binding_js__WEBPACK_IMPORTED_MODULE_6__.PropertyBinding(expr, getTarget(target), instruction.to, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView, this.observerLocator, context, this.platform.domWriteQueue), expr, context);
        controller.addBinding(binding);
    }
};
IteratorBindingRenderer = __decorate([
    renderer("rk" /* iteratorBinding */)
    /** @internal */
    ,
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser),
    __param(1, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator),
    __param(2, _platform_js__WEBPACK_IMPORTED_MODULE_15__.IPlatform)
], IteratorBindingRenderer);

let behaviorExpressionIndex = 0;
const behaviorExpressions = [];
function applyBindingBehavior(binding, expression, locator) {
    while (expression instanceof _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingBehaviorExpression) {
        behaviorExpressions[behaviorExpressionIndex++] = expression;
        expression = expression.expression;
    }
    while (behaviorExpressionIndex > 0) {
        const behaviorExpression = behaviorExpressions[--behaviorExpressionIndex];
        const behaviorOrFactory = locator.get(behaviorExpression.behaviorKey);
        if (behaviorOrFactory instanceof _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingBehaviorFactory) {
            binding = behaviorOrFactory.construct(binding, behaviorExpression);
        }
    }
    behaviorExpressions.length = 0;
    return binding;
}
let TextBindingRenderer = 
/** @internal */
class TextBindingRenderer {
    constructor(parser, observerLocator, platform) {
        this.parser = parser;
        this.observerLocator = observerLocator;
        this.platform = platform;
    }
    render(flags, context, controller, target, instruction) {
        const next = target.nextSibling;
        if (target.nodeName === 'AU-M') {
            target.remove();
        }
        const expr = ensureExpression(this.parser, instruction.from, 2048 /* Interpolation */);
        const binding = new _binding_interpolation_binding_js__WEBPACK_IMPORTED_MODULE_4__.InterpolationBinding(this.observerLocator, expr, next, 'textContent', _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView, context, this.platform.domWriteQueue);
        const partBindings = binding.partBindings;
        let partBinding;
        for (let i = 0, ii = partBindings.length; ii > i; ++i) {
            partBinding = partBindings[i];
            partBindings[i] = applyBindingBehavior(partBinding, partBinding.sourceExpression, context);
        }
        controller.addBinding(binding);
    }
};
TextBindingRenderer = __decorate([
    renderer("ha" /* textBinding */)
    /** @internal */
    ,
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser),
    __param(1, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator),
    __param(2, _platform_js__WEBPACK_IMPORTED_MODULE_15__.IPlatform)
], TextBindingRenderer);

let ListenerBindingRenderer = 
/** @internal */
class ListenerBindingRenderer {
    constructor(parser, eventDelegator) {
        this.parser = parser;
        this.eventDelegator = eventDelegator;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 80 /* IsEventCommand */ | (instruction.strategy + 6 /* DelegationStrategyDelta */));
        const binding = applyBindingBehavior(new _binding_listener_js__WEBPACK_IMPORTED_MODULE_8__.Listener(context.platform, instruction.to, instruction.strategy, expr, target, instruction.preventDefault, this.eventDelegator, context), expr, context);
        controller.addBinding(binding);
    }
};
ListenerBindingRenderer = __decorate([
    renderer("hb" /* listenerBinding */)
    /** @internal */
    ,
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser),
    __param(1, _observation_event_delegator_js__WEBPACK_IMPORTED_MODULE_9__.IEventDelegator)
], ListenerBindingRenderer);

let SetAttributeRenderer = 
/** @internal */
class SetAttributeRenderer {
    render(flags, context, controller, target, instruction) {
        target.setAttribute(instruction.to, instruction.value);
    }
};
SetAttributeRenderer = __decorate([
    renderer("he" /* setAttribute */)
    /** @internal */
], SetAttributeRenderer);

let SetClassAttributeRenderer = class SetClassAttributeRenderer {
    render(flags, context, controller, target, instruction) {
        addClasses(target.classList, instruction.value);
    }
};
SetClassAttributeRenderer = __decorate([
    renderer("hf" /* setClassAttribute */)
], SetClassAttributeRenderer);

let SetStyleAttributeRenderer = class SetStyleAttributeRenderer {
    render(flags, context, controller, target, instruction) {
        target.style.cssText += instruction.value;
    }
};
SetStyleAttributeRenderer = __decorate([
    renderer("hg" /* setStyleAttribute */)
], SetStyleAttributeRenderer);

let StylePropertyBindingRenderer = 
/** @internal */
class StylePropertyBindingRenderer {
    constructor(parser, observerLocator, platform) {
        this.parser = parser;
        this.observerLocator = observerLocator;
        this.platform = platform;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 48 /* IsPropertyCommand */ | _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView);
        const binding = applyBindingBehavior(new _binding_property_binding_js__WEBPACK_IMPORTED_MODULE_6__.PropertyBinding(expr, target.style, instruction.to, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView, this.observerLocator, context, this.platform.domWriteQueue), expr, context);
        controller.addBinding(binding);
    }
};
StylePropertyBindingRenderer = __decorate([
    renderer("hd" /* stylePropertyBinding */)
    /** @internal */
    ,
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser),
    __param(1, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator),
    __param(2, _platform_js__WEBPACK_IMPORTED_MODULE_15__.IPlatform)
], StylePropertyBindingRenderer);

let AttributeBindingRenderer = 
/** @internal */
class AttributeBindingRenderer {
    constructor(parser, observerLocator) {
        this.parser = parser;
        this.observerLocator = observerLocator;
    }
    render(flags, context, controller, target, instruction) {
        const expr = ensureExpression(this.parser, instruction.from, 48 /* IsPropertyCommand */ | _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView);
        const binding = applyBindingBehavior(new _binding_attribute_js__WEBPACK_IMPORTED_MODULE_3__.AttributeBinding(expr, target, instruction.attr /* targetAttribute */, instruction.to /* targetKey */, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView, this.observerLocator, context), expr, context);
        controller.addBinding(binding);
    }
};
AttributeBindingRenderer = __decorate([
    renderer("hc" /* attributeBinding */)
    /** @internal */
    ,
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser),
    __param(1, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator)
], AttributeBindingRenderer);

// http://jsben.ch/7n5Kt
function addClasses(classList, className) {
    const len = className.length;
    let start = 0;
    for (let i = 0; i < len; ++i) {
        if (className.charCodeAt(i) === 0x20) {
            if (i !== start) {
                classList.add(className.slice(start, i));
            }
            start = i + 1;
        }
        else if (i + 1 === len) {
            classList.add(className.slice(start));
        }
    }
}
//# sourceMappingURL=renderer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/attribute-pattern.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/attribute-pattern.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CharSpec": () => /* binding */ CharSpec,
/* harmony export */   "Interpretation": () => /* binding */ Interpretation,
/* harmony export */   "State": () => /* binding */ State,
/* harmony export */   "StaticSegment": () => /* binding */ StaticSegment,
/* harmony export */   "DynamicSegment": () => /* binding */ DynamicSegment,
/* harmony export */   "SymbolSegment": () => /* binding */ SymbolSegment,
/* harmony export */   "SegmentTypes": () => /* binding */ SegmentTypes,
/* harmony export */   "ISyntaxInterpreter": () => /* binding */ ISyntaxInterpreter,
/* harmony export */   "SyntaxInterpreter": () => /* binding */ SyntaxInterpreter,
/* harmony export */   "AttrSyntax": () => /* binding */ AttrSyntax,
/* harmony export */   "IAttributePattern": () => /* binding */ IAttributePattern,
/* harmony export */   "IAttributeParser": () => /* binding */ IAttributeParser,
/* harmony export */   "AttributeParser": () => /* binding */ AttributeParser,
/* harmony export */   "attributePattern": () => /* binding */ attributePattern,
/* harmony export */   "AttributePatternResourceDefinition": () => /* binding */ AttributePatternResourceDefinition,
/* harmony export */   "AttributePattern": () => /* binding */ AttributePattern,
/* harmony export */   "DotSeparatedAttributePattern": () => /* binding */ DotSeparatedAttributePattern,
/* harmony export */   "RefAttributePattern": () => /* binding */ RefAttributePattern,
/* harmony export */   "ColonPrefixedBindAttributePattern": () => /* binding */ ColonPrefixedBindAttributePattern,
/* harmony export */   "AtPrefixedTriggerAttributePattern": () => /* binding */ AtPrefixedTriggerAttributePattern
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};

/** @internal */
class CharSpec {
    constructor(chars, repeat, isSymbol, isInverted) {
        this.chars = chars;
        this.repeat = repeat;
        this.isSymbol = isSymbol;
        this.isInverted = isInverted;
        if (isInverted) {
            switch (chars.length) {
                case 0:
                    this.has = this.hasOfNoneInverse;
                    break;
                case 1:
                    this.has = this.hasOfSingleInverse;
                    break;
                default:
                    this.has = this.hasOfMultipleInverse;
            }
        }
        else {
            switch (chars.length) {
                case 0:
                    this.has = this.hasOfNone;
                    break;
                case 1:
                    this.has = this.hasOfSingle;
                    break;
                default:
                    this.has = this.hasOfMultiple;
            }
        }
    }
    equals(other) {
        return this.chars === other.chars
            && this.repeat === other.repeat
            && this.isSymbol === other.isSymbol
            && this.isInverted === other.isInverted;
    }
    hasOfMultiple(char) {
        return this.chars.includes(char);
    }
    hasOfSingle(char) {
        return this.chars === char;
    }
    hasOfNone(char) {
        return false;
    }
    hasOfMultipleInverse(char) {
        return !this.chars.includes(char);
    }
    hasOfSingleInverse(char) {
        return this.chars !== char;
    }
    hasOfNoneInverse(char) {
        return true;
    }
}
class Interpretation {
    constructor() {
        this.parts = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
        this._pattern = '';
        this.currentRecord = {};
        this.partsRecord = {};
    }
    get pattern() {
        const value = this._pattern;
        if (value === '') {
            return null;
        }
        else {
            return value;
        }
    }
    set pattern(value) {
        if (value == null) {
            this._pattern = '';
            this.parts = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
        }
        else {
            this._pattern = value;
            this.parts = this.partsRecord[value];
        }
    }
    append(pattern, ch) {
        const { currentRecord } = this;
        if (currentRecord[pattern] === undefined) {
            currentRecord[pattern] = ch;
        }
        else {
            currentRecord[pattern] += ch;
        }
    }
    next(pattern) {
        const { currentRecord } = this;
        if (currentRecord[pattern] !== undefined) {
            const { partsRecord } = this;
            if (partsRecord[pattern] === undefined) {
                partsRecord[pattern] = [currentRecord[pattern]];
            }
            else {
                partsRecord[pattern].push(currentRecord[pattern]);
            }
            currentRecord[pattern] = undefined;
        }
    }
}
/** @internal */
class State {
    constructor(charSpec, ...patterns) {
        this.charSpec = charSpec;
        this.nextStates = [];
        this.types = null;
        this.isEndpoint = false;
        this.patterns = patterns;
    }
    get pattern() {
        return this.isEndpoint ? this.patterns[0] : null;
    }
    findChild(charSpec) {
        const nextStates = this.nextStates;
        const len = nextStates.length;
        let child = null;
        for (let i = 0; i < len; ++i) {
            child = nextStates[i];
            if (charSpec.equals(child.charSpec)) {
                return child;
            }
        }
        return null;
    }
    append(charSpec, pattern) {
        const { patterns } = this;
        if (!patterns.includes(pattern)) {
            patterns.push(pattern);
        }
        let state = this.findChild(charSpec);
        if (state == null) {
            state = new State(charSpec, pattern);
            this.nextStates.push(state);
            if (charSpec.repeat) {
                state.nextStates.push(state);
            }
        }
        return state;
    }
    findMatches(ch, interpretation) {
        // TODO: reuse preallocated arrays
        const results = [];
        const nextStates = this.nextStates;
        const len = nextStates.length;
        let childLen = 0;
        let child = null;
        let i = 0;
        let j = 0;
        for (; i < len; ++i) {
            child = nextStates[i];
            if (child.charSpec.has(ch)) {
                results.push(child);
                childLen = child.patterns.length;
                j = 0;
                if (child.charSpec.isSymbol) {
                    for (; j < childLen; ++j) {
                        interpretation.next(child.patterns[j]);
                    }
                }
                else {
                    for (; j < childLen; ++j) {
                        interpretation.append(child.patterns[j], ch);
                    }
                }
            }
        }
        return results;
    }
}
/** @internal */
class StaticSegment {
    constructor(text) {
        this.text = text;
        const len = this.len = text.length;
        const specs = this.specs = [];
        for (let i = 0; i < len; ++i) {
            specs.push(new CharSpec(text[i], false, false, false));
        }
    }
    eachChar(callback) {
        const { len, specs } = this;
        for (let i = 0; i < len; ++i) {
            callback(specs[i]);
        }
    }
}
/** @internal */
class DynamicSegment {
    constructor(symbols) {
        this.text = 'PART';
        this.spec = new CharSpec(symbols, true, false, true);
    }
    eachChar(callback) {
        callback(this.spec);
    }
}
/** @internal */
class SymbolSegment {
    constructor(text) {
        this.text = text;
        this.spec = new CharSpec(text, false, true, false);
    }
    eachChar(callback) {
        callback(this.spec);
    }
}
/** @internal */
class SegmentTypes {
    constructor() {
        this.statics = 0;
        this.dynamics = 0;
        this.symbols = 0;
    }
}
const ISyntaxInterpreter = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ISyntaxInterpreter', x => x.singleton(SyntaxInterpreter));
class SyntaxInterpreter {
    constructor() {
        this.rootState = new State(null);
        this.initialStates = [this.rootState];
    }
    add(defOrDefs) {
        let i = 0;
        if (Array.isArray(defOrDefs)) {
            const ii = defOrDefs.length;
            for (; i < ii; ++i) {
                this.add(defOrDefs[i]);
            }
            return;
        }
        let currentState = this.rootState;
        const def = defOrDefs;
        const pattern = def.pattern;
        const types = new SegmentTypes();
        const segments = this.parse(def, types);
        const len = segments.length;
        const callback = (ch) => {
            currentState = currentState.append(ch, pattern);
        };
        for (i = 0; i < len; ++i) {
            segments[i].eachChar(callback);
        }
        currentState.types = types;
        currentState.isEndpoint = true;
    }
    interpret(name) {
        const interpretation = new Interpretation();
        let states = this.initialStates;
        const len = name.length;
        for (let i = 0; i < len; ++i) {
            states = this.getNextStates(states, name.charAt(i), interpretation);
            if (states.length === 0) {
                break;
            }
        }
        states.sort((a, b) => {
            if (a.isEndpoint) {
                if (!b.isEndpoint) {
                    return -1;
                }
            }
            else if (b.isEndpoint) {
                return 1;
            }
            else {
                return 0;
            }
            const aTypes = a.types;
            const bTypes = b.types;
            if (aTypes.statics !== bTypes.statics) {
                return bTypes.statics - aTypes.statics;
            }
            if (aTypes.dynamics !== bTypes.dynamics) {
                return bTypes.dynamics - aTypes.dynamics;
            }
            if (aTypes.symbols !== bTypes.symbols) {
                return bTypes.symbols - aTypes.symbols;
            }
            return 0;
        });
        if (states.length > 0) {
            const state = states[0];
            if (!state.charSpec.isSymbol) {
                interpretation.next(state.pattern);
            }
            interpretation.pattern = state.pattern;
        }
        return interpretation;
    }
    getNextStates(states, ch, interpretation) {
        // TODO: reuse preallocated arrays
        const nextStates = [];
        let state = null;
        const len = states.length;
        for (let i = 0; i < len; ++i) {
            state = states[i];
            nextStates.push(...state.findMatches(ch, interpretation));
        }
        return nextStates;
    }
    parse(def, types) {
        const result = [];
        const pattern = def.pattern;
        const len = pattern.length;
        let i = 0;
        let start = 0;
        let c = '';
        while (i < len) {
            c = pattern.charAt(i);
            if (!def.symbols.includes(c)) {
                if (i === start) {
                    if (c === 'P' && pattern.slice(i, i + 4) === 'PART') {
                        start = i = (i + 4);
                        result.push(new DynamicSegment(def.symbols));
                        ++types.dynamics;
                    }
                    else {
                        ++i;
                    }
                }
                else {
                    ++i;
                }
            }
            else if (i !== start) {
                result.push(new StaticSegment(pattern.slice(start, i)));
                ++types.statics;
                start = i;
            }
            else {
                result.push(new SymbolSegment(pattern.slice(start, i + 1)));
                ++types.symbols;
                start = ++i;
            }
        }
        if (start !== i) {
            result.push(new StaticSegment(pattern.slice(start, i)));
            ++types.statics;
        }
        return result;
    }
}
class AttrSyntax {
    constructor(rawName, rawValue, target, command) {
        this.rawName = rawName;
        this.rawValue = rawValue;
        this.target = target;
        this.command = command;
    }
}
const IAttributePattern = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IAttributePattern');
const IAttributeParser = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IAttributeParser', x => x.singleton(AttributeParser));
let AttributeParser = class AttributeParser {
    constructor(interpreter, attrPatterns) {
        this.interpreter = interpreter;
        this.cache = {};
        const patterns = this.patterns = {};
        attrPatterns.forEach(attrPattern => {
            const defs = AttributePattern.getPatternDefinitions(attrPattern.constructor);
            interpreter.add(defs);
            defs.forEach(def => {
                patterns[def.pattern] = attrPattern;
            });
        });
    }
    parse(name, value) {
        let interpretation = this.cache[name];
        if (interpretation == null) {
            interpretation = this.cache[name] = this.interpreter.interpret(name);
        }
        const pattern = interpretation.pattern;
        if (pattern == null) {
            return new AttrSyntax(name, value, name, null);
        }
        else {
            return this.patterns[pattern][pattern](name, value, interpretation.parts);
        }
    }
};
AttributeParser = __decorate([
    __param(0, ISyntaxInterpreter),
    __param(1, (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.all)(IAttributePattern))
], AttributeParser);

function attributePattern(...patternDefs) {
    return function decorator(target) {
        return AttributePattern.define(patternDefs, target);
    };
}
class AttributePatternResourceDefinition {
    constructor(Type) {
        this.Type = Type;
        this.name = (void 0);
    }
    register(container) {
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.singleton(IAttributePattern, this.Type).register(container);
    }
}
const AttributePattern = Object.freeze({
    name: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.keyFor('attribute-pattern'),
    definitionAnnotationKey: 'attribute-pattern-definitions',
    define(patternDefs, Type) {
        const definition = new AttributePatternResourceDefinition(Type);
        const { name, definitionAnnotationKey } = AttributePattern;
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(name, definition, Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.appendTo(Type, name);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.set(Type, definitionAnnotationKey, patternDefs);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.appendTo(Type, definitionAnnotationKey);
        return Type;
    },
    getPatternDefinitions(Type) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.get(Type, AttributePattern.definitionAnnotationKey);
    }
});
let DotSeparatedAttributePattern = class DotSeparatedAttributePattern {
    'PART.PART'(rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, parts[0], parts[1]);
    }
    'PART.PART.PART'(rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, parts[0], parts[2]);
    }
};
DotSeparatedAttributePattern = __decorate([
    attributePattern({ pattern: 'PART.PART', symbols: '.' }, { pattern: 'PART.PART.PART', symbols: '.' })
], DotSeparatedAttributePattern);

let RefAttributePattern = class RefAttributePattern {
    'ref'(rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, 'element', 'ref');
    }
    'PART.ref'(rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, parts[0], 'ref');
    }
};
RefAttributePattern = __decorate([
    attributePattern({ pattern: 'ref', symbols: '' }, { pattern: 'PART.ref', symbols: '.' })
], RefAttributePattern);

let ColonPrefixedBindAttributePattern = class ColonPrefixedBindAttributePattern {
    ':PART'(rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, parts[0], 'bind');
    }
};
ColonPrefixedBindAttributePattern = __decorate([
    attributePattern({ pattern: ':PART', symbols: ':' })
], ColonPrefixedBindAttributePattern);

let AtPrefixedTriggerAttributePattern = class AtPrefixedTriggerAttributePattern {
    '@PART'(rawName, rawValue, parts) {
        return new AttrSyntax(rawName, rawValue, parts[0], 'trigger');
    }
};
AtPrefixedTriggerAttributePattern = __decorate([
    attributePattern({ pattern: '@PART', symbols: '@' })
], AtPrefixedTriggerAttributePattern);

//# sourceMappingURL=attribute-pattern.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/attr.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/attr.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AttrBindingBehavior": () => /* binding */ AttrBindingBehavior
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _observation_data_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../observation/data-attribute-accessor.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/data-attribute-accessor.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


let AttrBindingBehavior = class AttrBindingBehavior {
    bind(flags, _scope, _hostScope, binding) {
        binding.targetObserver = _observation_data_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_1__.attrAccessor;
    }
    unbind(flags, _scope, _hostScope, binding) {
        return;
    }
};
AttrBindingBehavior = __decorate([
    (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.bindingBehavior)('attr')
], AttrBindingBehavior);

//# sourceMappingURL=attr.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/self.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/self.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "handleSelfEvent": () => /* binding */ handleSelfEvent,
/* harmony export */   "SelfBindingBehavior": () => /* binding */ SelfBindingBehavior
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

/** @internal */
function handleSelfEvent(event) {
    const target = event.composedPath()[0];
    if (this.target !== target) {
        return;
    }
    return this.selfEventCallSource(event);
}
let SelfBindingBehavior = class SelfBindingBehavior {
    bind(flags, _scope, _hostScope, binding) {
        if (!binding.callSource || !binding.targetEvent) {
            throw new Error('Self binding behavior only supports events.');
        }
        binding.selfEventCallSource = binding.callSource;
        binding.callSource = handleSelfEvent;
    }
    unbind(flags, _scope, _hostScope, binding) {
        binding.callSource = binding.selfEventCallSource;
        binding.selfEventCallSource = null;
    }
};
SelfBindingBehavior = __decorate([
    (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.bindingBehavior)('self')
], SelfBindingBehavior);

//# sourceMappingURL=self.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/update-trigger.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-behaviors/update-trigger.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UpdateTriggerBindingBehavior": () => /* binding */ UpdateTriggerBindingBehavior
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _observation_event_delegator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../observation/event-delegator.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/event-delegator.js");
/* harmony import */ var _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../observation/observer-locator.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/observer-locator.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};



let UpdateTriggerBindingBehavior = class UpdateTriggerBindingBehavior {
    constructor(observerLocator) {
        this.observerLocator = observerLocator;
    }
    bind(flags, _scope, _hostScope, binding, ...events) {
        if (events.length === 0) {
            throw new Error('The updateTrigger binding behavior requires at least one event name argument: eg <input value.bind="firstName & updateTrigger:\'blur\'">');
        }
        if (binding.mode !== _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode.twoWay && binding.mode !== _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode.fromView) {
            throw new Error('The updateTrigger binding behavior can only be applied to two-way/ from-view bindings on input/select elements.');
        }
        // ensure the binding's target observer has been set.
        const targetObserver = this.observerLocator.getObserver(binding.target, binding.targetProperty);
        if (!targetObserver.handler) {
            throw new Error('The updateTrigger binding behavior can only be applied to two-way/ from-view bindings on input/select elements.');
        }
        binding.targetObserver = targetObserver;
        // stash the original element subscribe function.
        const originalHandler = targetObserver.handler;
        targetObserver.originalHandler = originalHandler;
        // replace the element subscribe function with one that uses the correct events.
        targetObserver.handler = new _observation_event_delegator_js__WEBPACK_IMPORTED_MODULE_1__.EventSubscriber(new _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_2__.NodeObserverConfig({
            default: originalHandler.config.default,
            events,
            readonly: originalHandler.config.readonly
        }));
    }
    unbind(flags, _scope, _hostScope, binding) {
        // restore the state of the binding.
        binding.targetObserver.handler.dispose();
        binding.targetObserver.handler = binding.targetObserver.originalHandler;
        binding.targetObserver.originalHandler = null;
    }
};
UpdateTriggerBindingBehavior = __decorate([
    (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.bindingBehavior)('updateTrigger'),
    __param(0, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.IObserverLocator)
], UpdateTriggerBindingBehavior);

//# sourceMappingURL=update-trigger.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-command.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-command.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bindingCommand": () => /* binding */ bindingCommand,
/* harmony export */   "BindingCommandDefinition": () => /* binding */ BindingCommandDefinition,
/* harmony export */   "BindingCommand": () => /* binding */ BindingCommand,
/* harmony export */   "getTarget": () => /* binding */ getTarget,
/* harmony export */   "OneTimeBindingCommand": () => /* binding */ OneTimeBindingCommand,
/* harmony export */   "ToViewBindingCommand": () => /* binding */ ToViewBindingCommand,
/* harmony export */   "FromViewBindingCommand": () => /* binding */ FromViewBindingCommand,
/* harmony export */   "TwoWayBindingCommand": () => /* binding */ TwoWayBindingCommand,
/* harmony export */   "DefaultBindingCommand": () => /* binding */ DefaultBindingCommand,
/* harmony export */   "CallBindingCommand": () => /* binding */ CallBindingCommand,
/* harmony export */   "ForBindingCommand": () => /* binding */ ForBindingCommand,
/* harmony export */   "TriggerBindingCommand": () => /* binding */ TriggerBindingCommand,
/* harmony export */   "DelegateBindingCommand": () => /* binding */ DelegateBindingCommand,
/* harmony export */   "CaptureBindingCommand": () => /* binding */ CaptureBindingCommand,
/* harmony export */   "AttrBindingCommand": () => /* binding */ AttrBindingCommand,
/* harmony export */   "StyleBindingCommand": () => /* binding */ StyleBindingCommand,
/* harmony export */   "ClassBindingCommand": () => /* binding */ ClassBindingCommand,
/* harmony export */   "RefBindingCommand": () => /* binding */ RefBindingCommand
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../renderer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/renderer.js");
/* harmony import */ var _semantic_model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../semantic-model.js */ "./node_modules/@aurelia/runtime-html/dist/esm/semantic-model.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




function bindingCommand(nameOrDefinition) {
    return function (target) {
        return BindingCommand.define(nameOrDefinition, target);
    };
}
class BindingCommandDefinition {
    constructor(Type, name, aliases, key, type) {
        this.Type = Type;
        this.name = name;
        this.aliases = aliases;
        this.key = key;
        this.type = type;
    }
    static create(nameOrDef, Type) {
        let name;
        let def;
        if (typeof nameOrDef === 'string') {
            name = nameOrDef;
            def = { name };
        }
        else {
            name = nameOrDef.name;
            def = nameOrDef;
        }
        return new BindingCommandDefinition(Type, (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(BindingCommand.getAnnotation(Type, 'name'), name), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(BindingCommand.getAnnotation(Type, 'aliases'), def.aliases, Type.aliases), BindingCommand.keyFrom(name), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(BindingCommand.getAnnotation(Type, 'type'), def.type, Type.type, null));
    }
    register(container) {
        const { Type, key, aliases } = this;
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.singleton(key, Type).register(container);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.aliasTo(key, Type).register(container);
        (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.registerAliases)(aliases, BindingCommand, key, container);
    }
}
const BindingCommand = {
    name: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.keyFor('binding-command'),
    keyFrom(name) {
        return `${BindingCommand.name}:${name}`;
    },
    isType(value) {
        return typeof value === 'function' && _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.hasOwn(BindingCommand.name, value);
    },
    define(nameOrDef, Type) {
        const definition = BindingCommandDefinition.create(nameOrDef, Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(BindingCommand.name, definition, definition.Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(BindingCommand.name, definition, definition);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.appendTo(Type, BindingCommand.name);
        return definition.Type;
    },
    getDefinition(Type) {
        const def = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(BindingCommand.name, Type);
        if (def === void 0) {
            throw new Error(`No definition found for type ${Type.name}`);
        }
        return def;
    },
    annotate(Type, prop, value) {
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor(prop), value, Type);
    },
    getAnnotation(Type, prop) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor(prop), Type);
    },
};
function getTarget(binding, makeCamelCase) {
    if (binding.flags & 256 /* isBinding */) {
        return binding.bindable.propName;
    }
    else if (makeCamelCase) {
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.camelCase)(binding.syntax.target);
    }
    else {
        return binding.syntax.target;
    }
}
let OneTimeBindingCommand = class OneTimeBindingCommand {
    constructor() {
        this.bindingType = 49 /* OneTimeCommand */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.PropertyBindingInstruction(binding.expression, getTarget(binding, false), _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.oneTime);
    }
};
OneTimeBindingCommand = __decorate([
    bindingCommand('one-time')
], OneTimeBindingCommand);

let ToViewBindingCommand = class ToViewBindingCommand {
    constructor() {
        this.bindingType = 50 /* ToViewCommand */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.PropertyBindingInstruction(binding.expression, getTarget(binding, false), _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView);
    }
};
ToViewBindingCommand = __decorate([
    bindingCommand('to-view')
], ToViewBindingCommand);

let FromViewBindingCommand = class FromViewBindingCommand {
    constructor() {
        this.bindingType = 51 /* FromViewCommand */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.PropertyBindingInstruction(binding.expression, getTarget(binding, false), _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.fromView);
    }
};
FromViewBindingCommand = __decorate([
    bindingCommand('from-view')
], FromViewBindingCommand);

let TwoWayBindingCommand = class TwoWayBindingCommand {
    constructor() {
        this.bindingType = 52 /* TwoWayCommand */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.PropertyBindingInstruction(binding.expression, getTarget(binding, false), _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay);
    }
};
TwoWayBindingCommand = __decorate([
    bindingCommand('two-way')
], TwoWayBindingCommand);

let DefaultBindingCommand = class DefaultBindingCommand {
    constructor() {
        this.bindingType = 53 /* BindCommand */;
    }
    compile(binding) {
        let mode = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.default;
        if (binding instanceof _semantic_model_js__WEBPACK_IMPORTED_MODULE_3__.BindingSymbol) {
            mode = binding.bindable.mode;
        }
        else {
            const command = binding.syntax.command;
            switch (command) {
                case 'bind':
                case 'to-view':
                    mode = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView;
                    break;
                case 'one-time':
                    mode = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.oneTime;
                    break;
                case 'from-view':
                    mode = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.fromView;
                    break;
                case 'two-way':
                    mode = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay;
                    break;
            }
        }
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.PropertyBindingInstruction(binding.expression, getTarget(binding, false), mode === _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.default ? _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView : mode);
    }
};
DefaultBindingCommand = __decorate([
    bindingCommand('bind')
], DefaultBindingCommand);

let CallBindingCommand = class CallBindingCommand {
    constructor() {
        this.bindingType = 153 /* CallCommand */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.CallBindingInstruction(binding.expression, getTarget(binding, true));
    }
};
CallBindingCommand = __decorate([
    bindingCommand('call')
], CallBindingCommand);

let ForBindingCommand = class ForBindingCommand {
    constructor() {
        this.bindingType = 539 /* ForCommand */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.IteratorBindingInstruction(binding.expression, getTarget(binding, false));
    }
};
ForBindingCommand = __decorate([
    bindingCommand('for')
], ForBindingCommand);

let TriggerBindingCommand = class TriggerBindingCommand {
    constructor() {
        this.bindingType = 4182 /* TriggerCommand */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.ListenerBindingInstruction(binding.expression, getTarget(binding, false), true, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.DelegationStrategy.none);
    }
};
TriggerBindingCommand = __decorate([
    bindingCommand('trigger')
], TriggerBindingCommand);

let DelegateBindingCommand = class DelegateBindingCommand {
    constructor() {
        this.bindingType = 4184 /* DelegateCommand */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.ListenerBindingInstruction(binding.expression, getTarget(binding, false), false, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.DelegationStrategy.bubbling);
    }
};
DelegateBindingCommand = __decorate([
    bindingCommand('delegate')
], DelegateBindingCommand);

let CaptureBindingCommand = class CaptureBindingCommand {
    constructor() {
        this.bindingType = 4183 /* CaptureCommand */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.ListenerBindingInstruction(binding.expression, getTarget(binding, false), false, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.DelegationStrategy.capturing);
    }
};
CaptureBindingCommand = __decorate([
    bindingCommand('capture')
], CaptureBindingCommand);

/**
 * Attr binding command. Compile attr with binding symbol with command `attr` to `AttributeBindingInstruction`
 */
let AttrBindingCommand = class AttrBindingCommand {
    constructor() {
        this.bindingType = 32 /* IsProperty */;
    }
    compile(binding) {
        const target = getTarget(binding, false);
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.AttributeBindingInstruction(target, binding.expression, target);
    }
};
AttrBindingCommand = __decorate([
    bindingCommand('attr')
], AttrBindingCommand);

/**
 * Style binding command. Compile attr with binding symbol with command `style` to `AttributeBindingInstruction`
 */
let StyleBindingCommand = class StyleBindingCommand {
    constructor() {
        this.bindingType = 32 /* IsProperty */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.AttributeBindingInstruction('style', binding.expression, getTarget(binding, false));
    }
};
StyleBindingCommand = __decorate([
    bindingCommand('style')
], StyleBindingCommand);

/**
 * Class binding command. Compile attr with binding symbol with command `class` to `AttributeBindingInstruction`
 */
let ClassBindingCommand = class ClassBindingCommand {
    constructor() {
        this.bindingType = 32 /* IsProperty */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.AttributeBindingInstruction('class', binding.expression, getTarget(binding, false));
    }
};
ClassBindingCommand = __decorate([
    bindingCommand('class')
], ClassBindingCommand);

/**
 * Binding command to refer different targets (element, custom element/attribute view models, controller) attached to an element
 */
let RefBindingCommand = class RefBindingCommand {
    constructor() {
        this.bindingType = 32 /* IsProperty */ | 4096 /* IgnoreCustomAttr */;
    }
    compile(binding) {
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_2__.RefBindingInstruction(binding.expression, getTarget(binding, false));
    }
};
RefBindingCommand = __decorate([
    bindingCommand('ref')
], RefBindingCommand);

//# sourceMappingURL=binding-command.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "customAttribute": () => /* binding */ customAttribute,
/* harmony export */   "templateController": () => /* binding */ templateController,
/* harmony export */   "CustomAttributeDefinition": () => /* binding */ CustomAttributeDefinition,
/* harmony export */   "CustomAttribute": () => /* binding */ CustomAttribute
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
/* harmony import */ var _watch_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../watch.js */ "./node_modules/@aurelia/runtime-html/dist/esm/watch.js");




function customAttribute(nameOrDef) {
    return function (target) {
        return CustomAttribute.define(nameOrDef, target);
    };
}
function templateController(nameOrDef) {
    return function (target) {
        return CustomAttribute.define(typeof nameOrDef === 'string'
            ? { isTemplateController: true, name: nameOrDef }
            : { isTemplateController: true, ...nameOrDef }, target);
    };
}
class CustomAttributeDefinition {
    constructor(Type, name, aliases, key, defaultBindingMode, isTemplateController, bindables, noMultiBindings, watches) {
        this.Type = Type;
        this.name = name;
        this.aliases = aliases;
        this.key = key;
        this.defaultBindingMode = defaultBindingMode;
        this.isTemplateController = isTemplateController;
        this.bindables = bindables;
        this.noMultiBindings = noMultiBindings;
        this.watches = watches;
    }
    static create(nameOrDef, Type) {
        let name;
        let def;
        if (typeof nameOrDef === 'string') {
            name = nameOrDef;
            def = { name };
        }
        else {
            name = nameOrDef.name;
            def = nameOrDef;
        }
        return new CustomAttributeDefinition(Type, (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(CustomAttribute.getAnnotation(Type, 'name'), name), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(CustomAttribute.getAnnotation(Type, 'aliases'), def.aliases, Type.aliases), CustomAttribute.keyFrom(name), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(CustomAttribute.getAnnotation(Type, 'defaultBindingMode'), def.defaultBindingMode, Type.defaultBindingMode, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(CustomAttribute.getAnnotation(Type, 'isTemplateController'), def.isTemplateController, Type.isTemplateController, false), _bindable_js__WEBPACK_IMPORTED_MODULE_2__.Bindable.from(..._bindable_js__WEBPACK_IMPORTED_MODULE_2__.Bindable.getAll(Type), CustomAttribute.getAnnotation(Type, 'bindables'), Type.bindables, def.bindables), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(CustomAttribute.getAnnotation(Type, 'noMultiBindings'), def.noMultiBindings, Type.noMultiBindings, false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(_watch_js__WEBPACK_IMPORTED_MODULE_3__.Watch.getAnnotation(Type), Type.watches));
    }
    register(container) {
        const { Type, key, aliases } = this;
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.transient(key, Type).register(container);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.aliasTo(key, Type).register(container);
        (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.registerAliases)(aliases, CustomAttribute, key, container);
    }
}
const CustomAttribute = {
    name: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.keyFor('custom-attribute'),
    keyFrom(name) {
        return `${CustomAttribute.name}:${name}`;
    },
    isType(value) {
        return typeof value === 'function' && _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.hasOwn(CustomAttribute.name, value);
    },
    for(node, name) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(CustomAttribute.keyFrom(name), node);
    },
    define(nameOrDef, Type) {
        const definition = CustomAttributeDefinition.create(nameOrDef, Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(CustomAttribute.name, definition, definition.Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(CustomAttribute.name, definition, definition);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.appendTo(Type, CustomAttribute.name);
        return definition.Type;
    },
    getDefinition(Type) {
        const def = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(CustomAttribute.name, Type);
        if (def === void 0) {
            throw new Error(`No definition found for type ${Type.name}`);
        }
        return def;
    },
    annotate(Type, prop, value) {
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor(prop), value, Type);
    },
    getAnnotation(Type, prop) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor(prop), Type);
    },
};
//# sourceMappingURL=custom-attribute.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/blur.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/blur.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BlurManager": () => /* binding */ BlurManager,
/* harmony export */   "Blur": () => /* binding */ Blur
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};





const unset = Symbol();
// Using passive to help with performance
const defaultCaptureEventInit = {
    passive: true,
    capture: true
};
// Using passive to help with performance
const defaultBubbleEventInit = {
    passive: true
};
// weakly connect a document to a blur manager
// to avoid polluting the document properties
const blurDocMap = new WeakMap();
class BlurManager {
    constructor(platform) {
        this.platform = platform;
        this.blurs = [];
        blurDocMap.set(platform.document, this);
        this.handler = createHandler(this, this.blurs);
    }
    static createFor(platform) {
        return blurDocMap.get(platform.document) || new BlurManager(platform);
    }
    register(blur) {
        const blurs = this.blurs;
        if (!blurs.includes(blur) && blurs.push(blur) === 1) {
            this.addListeners();
        }
    }
    unregister(blur) {
        const blurs = this.blurs;
        const index = blurs.indexOf(blur);
        if (index > -1) {
            blurs.splice(index, 1);
        }
        if (blurs.length === 0) {
            this.removeListeners();
        }
    }
    addListeners() {
        const p = this.platform;
        const doc = p.document;
        const win = p.window;
        const handler = this.handler;
        if (win.navigator.pointerEnabled) {
            doc.addEventListener('pointerdown', handler, defaultCaptureEventInit);
        }
        doc.addEventListener('touchstart', handler, defaultCaptureEventInit);
        doc.addEventListener('mousedown', handler, defaultCaptureEventInit);
        doc.addEventListener('focus', handler, defaultCaptureEventInit);
        win.addEventListener('blur', handler, defaultBubbleEventInit);
    }
    removeListeners() {
        const p = this.platform;
        const doc = p.document;
        const win = p.window;
        const handler = this.handler;
        if (win.navigator.pointerEnabled) {
            doc.removeEventListener('pointerdown', handler, defaultCaptureEventInit);
        }
        doc.removeEventListener('touchstart', handler, defaultCaptureEventInit);
        doc.removeEventListener('mousedown', handler, defaultCaptureEventInit);
        doc.removeEventListener('focus', handler, defaultCaptureEventInit);
        win.removeEventListener('blur', handler, defaultBubbleEventInit);
    }
}
let Blur = class Blur {
    constructor(element, p) {
        this.element = element;
        this.p = p;
        /**
         * By default, the behavior should be least surprise possible, that:
         *
         * it searches for anything from root context,
         * and root context is document body
         */
        this.linkedMultiple = true;
        this.searchSubTree = true;
        this.linkingContext = null;
        this.value = unset;
        this.manager = BlurManager.createFor(p);
    }
    attached() {
        this.manager.register(this);
    }
    detaching() {
        this.manager.unregister(this);
    }
    handleEventTarget(target) {
        if (this.value === false) {
            return;
        }
        const p = this.p;
        if (target === p.window || target === p.document || !this.contains(target)) {
            this.triggerBlur();
        }
    }
    contains(target) {
        if (!this.value) {
            return false;
        }
        let els;
        let i;
        let j, jj;
        let link;
        const element = this.element;
        if (containsElementOrShadowRoot(element, target)) {
            return true;
        }
        if (!this.linkedWith) {
            return false;
        }
        const doc = this.p.document;
        const linkedWith = this.linkedWith;
        const linkingContext = this.linkingContext;
        const searchSubTree = this.searchSubTree;
        const linkedMultiple = this.linkedMultiple;
        const links = Array.isArray(linkedWith) ? linkedWith : [linkedWith];
        const contextNode = (typeof linkingContext === 'string'
            ? doc.querySelector(linkingContext)
            : linkingContext)
            || doc.body;
        const ii = links.length;
        for (i = 0; ii > i; ++i) {
            link = links[i];
            // When user specify to link with something by a string, it acts as a CSS selector
            // We need to do some querying stuff to determine if target above is contained.
            if (typeof link === 'string') {
                // Default behavior, search the whole tree, from context that user specified, which default to document body
                if (searchSubTree) {
                    // todo: are there too many knobs?? Consider remove "linkedMultiple"??
                    if (!linkedMultiple) {
                        const el = contextNode.querySelector(link);
                        els = el !== null ? [el] : _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
                    }
                    else {
                        els = contextNode.querySelectorAll(link);
                    }
                    jj = els.length;
                    for (j = 0; jj > j; ++j) {
                        if (els[j].contains(target)) {
                            return true;
                        }
                    }
                }
                else {
                    // default to document body, if user didn't define a linking context, and wanted to ignore subtree.
                    // This is specifically performant and useful for dialogs, plugins
                    // that usually generate contents to document body
                    els = contextNode.children;
                    jj = els.length;
                    for (j = 0; jj > j; ++j) {
                        if (els[j].matches(link)) {
                            return true;
                        }
                    }
                }
            }
            else {
                // When user passed in something that is not a string,
                // simply check if has method `contains` (allow duck typing)
                // and call it against target.
                // This enables flexible usages
                if (link && link.contains(target)) {
                    return true;
                }
            }
        }
        return false;
    }
    triggerBlur() {
        this.value = false;
        if (typeof this.onBlur === 'function') {
            this.onBlur.call(null);
        }
    }
};
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_4__.bindable)()
], Blur.prototype, "value", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_4__.bindable)()
], Blur.prototype, "onBlur", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_4__.bindable)()
], Blur.prototype, "linkedWith", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_4__.bindable)()
], Blur.prototype, "linkedMultiple", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_4__.bindable)()
], Blur.prototype, "searchSubTree", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_4__.bindable)()
], Blur.prototype, "linkingContext", void 0);
Blur = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.customAttribute)('blur'),
    __param(0, _dom_js__WEBPACK_IMPORTED_MODULE_1__.INode),
    __param(1, _platform_js__WEBPACK_IMPORTED_MODULE_2__.IPlatform)
], Blur);

const containsElementOrShadowRoot = (container, target) => {
    if (container.contains(target)) {
        return true;
    }
    let parentNode = null;
    while (target != null) {
        if (target === container) {
            return true;
        }
        parentNode = target.parentNode;
        if (parentNode === null && target.nodeType === 11 /* DocumentFragment */) {
            target = target.host;
            continue;
        }
        target = parentNode;
    }
    return false;
};
const createHandler = (manager, checkTargets) => {
    // *******************************
    // EVENTS ORDER
    // -----------------------------
    // pointerdown
    // touchstart
    // pointerup
    // touchend
    // mousedown
    // --------------
    // BLUR
    // FOCUS
    // --------------
    // mouseup
    // click
    //
    // ******************************
    //
    // There are cases focus happens without mouse interaction (keyboard)
    // So it needs to capture both mouse / focus movement
    //
    // ******************************
    let hasChecked = false;
    const revertCheckage = () => {
        hasChecked = false;
    };
    const markChecked = () => {
        hasChecked = true;
        manager.platform.domWriteQueue.queueTask(revertCheckage, { preempt: true });
    };
    const handleMousedown = (e) => {
        if (!hasChecked) {
            handleEvent(e);
            markChecked();
        }
    };
    /**
     * Handle globally captured focus event
     * This can happen via a few way:
     * User clicks on a focusable element
     * User uses keyboard to navigate to a focusable element
     * User goes back to the window from another browser tab
     * User clicks on a non-focusable element
     * User clicks on the window, outside of the document
     */
    const handleFocus = (e) => {
        if (hasChecked) {
            return;
        }
        // there are two way a focus gets captured on window
        // when the windows itself got focus
        // and when an element in the document gets focus
        // when the window itself got focus, reacting to it is quite unnecessary
        // as it doesn't really affect element inside the document
        // Do a simple check and bail immediately
        const isWindow = e.target === manager.platform.window;
        if (isWindow) {
            for (let i = 0, ii = checkTargets.length; ii > i; ++i) {
                checkTargets[i].triggerBlur();
            }
        }
        else {
            handleEvent(e);
        }
        markChecked();
    };
    const handleWindowBlur = () => {
        hasChecked = false;
        for (let i = 0, ii = checkTargets.length; i < ii; ++i) {
            checkTargets[i].triggerBlur();
        }
    };
    const handleEvent = (e) => {
        const target = e.composed ? e.composedPath()[0] : e.target;
        if (target === null) {
            return;
        }
        for (let i = 0, ii = checkTargets.length; i < ii; ++i) {
            checkTargets[i].handleEventTarget(target);
        }
    };
    return {
        onpointerdown: handleMousedown,
        ontouchstart: handleMousedown,
        onmousedown: handleMousedown,
        onfocus: handleFocus,
        onblur: handleWindowBlur,
        handleEvent(e) {
            this[`on${e.type}`](e);
        }
    };
};
//# sourceMappingURL=blur.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/focus.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/focus.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Focus": () => /* binding */ Focus
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};





/**
 * Focus attribute for element focus binding
 */
let Focus = class Focus {
    constructor(element, p) {
        this.element = element;
        this.p = p;
        /**
         * Indicates whether `apply` should be called when `attached` callback is invoked
         */
        this.needsApply = false;
    }
    binding() {
        this.valueChanged();
    }
    /**
     * Invoked everytime the bound value changes.
     *
     * @param newValue - The new value.
     */
    valueChanged() {
        // In theory, we could/should react immediately
        // but focus state of an element cannot be achieved
        // while it's disconnected from the document
        // thus, there neesd to be a check if it's currently connected or not
        // before applying the value to the element
        if (this.$controller.isActive) {
            this.apply();
        }
        else {
            // If the element is not currently connect
            // toggle the flag to add pending work for later
            // in attached lifecycle
            this.needsApply = true;
        }
    }
    /**
     * Invoked when the attribute is attached to the DOM.
     */
    attached() {
        if (this.needsApply) {
            this.needsApply = false;
            this.apply();
        }
        const el = this.element;
        el.addEventListener('focus', this);
        el.addEventListener('blur', this);
    }
    /**
     * Invoked when the attribute is afterDetachChildren from the DOM.
     */
    afterDetachChildren() {
        const el = this.element;
        el.removeEventListener('focus', this);
        el.removeEventListener('blur', this);
    }
    /**
     * EventTarget interface handler for better memory usage
     */
    handleEvent(e) {
        // there are only two event listened to
        // if the even is focus, it menans the element is focused
        // only need to switch the value to true
        if (e.type === 'focus') {
            this.value = true;
        }
        else if (!this.isElFocused) {
            // else, it's blur event
            // when a blur event happens, there are two situations
            // 1. the element itself lost the focus
            // 2. window lost the focus
            // To handle both (1) and (2), only need to check if
            // current active element is still the same element of this focus custom attribute
            // If it's not, it's a blur event happened on Window because the browser tab lost focus
            this.value = false;
        }
    }
    /**
     * Focus/blur based on current value
     */
    apply() {
        const el = this.element;
        const isFocused = this.isElFocused;
        const shouldFocus = this.value;
        if (shouldFocus && !isFocused) {
            el.focus();
        }
        else if (!shouldFocus && isFocused) {
            el.blur();
        }
    }
    get isElFocused() {
        return this.element === this.p.document.activeElement;
    }
};
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_4__.bindable)({ mode: _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.BindingMode.twoWay })
], Focus.prototype, "value", void 0);
Focus = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.customAttribute)('focus'),
    __param(0, _dom_js__WEBPACK_IMPORTED_MODULE_1__.INode),
    __param(1, _platform_js__WEBPACK_IMPORTED_MODULE_2__.IPlatform)
], Focus);

//# sourceMappingURL=focus.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/show.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attributes/show.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Show": () => /* binding */ Show
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../renderer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/renderer.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};






let Show = class Show {
    constructor(el, p, instr) {
        this.el = el;
        this.p = p;
        this.isActive = false;
        this.task = null;
        this.$val = '';
        this.$prio = '';
        this.update = () => {
            this.task = null;
            // Only compare at the synchronous moment when we're about to update, because the value might have changed since the update was queued.
            if (Boolean(this.value) !== this.isToggled) {
                if (this.isToggled === this.base) {
                    this.isToggled = !this.base;
                    // Note: in v1 we used the 'au-hide' class, but in v2 it's so trivial to conditionally apply classes (e.g. 'hide.class="someCondition"'),
                    // that it's probably better to avoid the CSS inject infra involvement and keep this CA as simple as possible.
                    // Instead, just store and restore the property values (with each mutation, to account for in-between updates), to cover the common cases, until there is convincing feedback to do otherwise.
                    this.$val = this.el.style.getPropertyValue('display');
                    this.$prio = this.el.style.getPropertyPriority('display');
                    this.el.style.setProperty('display', 'none', 'important');
                }
                else {
                    this.isToggled = this.base;
                    this.el.style.setProperty('display', this.$val, this.$prio);
                    // If the style attribute is now empty, remove it.
                    if (this.el.getAttribute('style') === '') {
                        this.el.removeAttribute('style');
                    }
                }
            }
        };
        // if this is declared as a 'hide' attribute, then this.base will be false, inverting everything.
        this.isToggled = this.base = instr.alias !== 'hide';
    }
    binding() {
        this.isActive = true;
        this.update();
    }
    detaching() {
        this.isActive = false;
        this.task?.cancel();
        this.task = null;
    }
    valueChanged() {
        if (this.isActive && this.task === null) {
            this.task = this.p.domWriteQueue.queueTask(this.update);
        }
    }
};
__decorate([
    _bindable_js__WEBPACK_IMPORTED_MODULE_4__.bindable
], Show.prototype, "value", void 0);
Show = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.customAttribute)('show'),
    (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.alias)('hide'),
    __param(0, _dom_js__WEBPACK_IMPORTED_MODULE_1__.INode),
    __param(1, _platform_js__WEBPACK_IMPORTED_MODULE_2__.IPlatform),
    __param(2, _renderer_js__WEBPACK_IMPORTED_MODULE_5__.IInstruction)
], Show);

//# sourceMappingURL=show.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "customElement": () => /* binding */ customElement,
/* harmony export */   "useShadowDOM": () => /* binding */ useShadowDOM,
/* harmony export */   "containerless": () => /* binding */ containerless,
/* harmony export */   "strict": () => /* binding */ strict,
/* harmony export */   "CustomElementDefinition": () => /* binding */ CustomElementDefinition,
/* harmony export */   "CustomElement": () => /* binding */ CustomElement
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _templating_children_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../templating/children.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/children.js");
/* harmony import */ var _watch_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../watch.js */ "./node_modules/@aurelia/runtime-html/dist/esm/watch.js");






function customElement(nameOrDef) {
    return function (target) {
        return CustomElement.define(nameOrDef, target);
    };
}
function useShadowDOM(targetOrOptions) {
    if (targetOrOptions === void 0) {
        return function ($target) {
            CustomElement.annotate($target, 'shadowOptions', { mode: 'open' });
        };
    }
    if (typeof targetOrOptions !== 'function') {
        return function ($target) {
            CustomElement.annotate($target, 'shadowOptions', targetOrOptions);
        };
    }
    CustomElement.annotate(targetOrOptions, 'shadowOptions', { mode: 'open' });
}
function containerless(target) {
    if (target === void 0) {
        return function ($target) {
            CustomElement.annotate($target, 'containerless', true);
        };
    }
    CustomElement.annotate(target, 'containerless', true);
}
function strict(target) {
    if (target === void 0) {
        return function ($target) {
            CustomElement.annotate($target, 'isStrictBinding', true);
        };
    }
    CustomElement.annotate(target, 'isStrictBinding', true);
}
const definitionLookup = new WeakMap();
class CustomElementDefinition {
    constructor(Type, name, aliases, key, cache, template, instructions, dependencies, injectable, needsCompile, surrogates, bindables, childrenObservers, containerless, isStrictBinding, shadowOptions, hasSlots, enhance, projectionsMap, watches) {
        this.Type = Type;
        this.name = name;
        this.aliases = aliases;
        this.key = key;
        this.cache = cache;
        this.template = template;
        this.instructions = instructions;
        this.dependencies = dependencies;
        this.injectable = injectable;
        this.needsCompile = needsCompile;
        this.surrogates = surrogates;
        this.bindables = bindables;
        this.childrenObservers = childrenObservers;
        this.containerless = containerless;
        this.isStrictBinding = isStrictBinding;
        this.shadowOptions = shadowOptions;
        this.hasSlots = hasSlots;
        this.enhance = enhance;
        this.projectionsMap = projectionsMap;
        this.watches = watches;
    }
    static create(nameOrDef, Type = null) {
        if (Type === null) {
            const def = nameOrDef;
            if (typeof def === 'string') {
                throw new Error(`Cannot create a custom element definition with only a name and no type: ${nameOrDef}`);
            }
            const name = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('name', def, CustomElement.generateName);
            if (typeof def.Type === 'function') {
                // This needs to be a clone (it will usually be the compiler calling this signature)
                // TODO: we need to make sure it's documented that passing in the type via the definition (while passing in null
                // as the "Type" parameter) effectively skips type analysis, so it should only be used this way for cloning purposes.
                Type = def.Type;
            }
            else {
                Type = CustomElement.generateType((0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.pascalCase)(name));
            }
            return new CustomElementDefinition(Type, name, (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(def.aliases), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('key', def, () => CustomElement.keyFrom(name)), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('cache', def, () => 0), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('template', def, () => null), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(def.instructions), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(def.dependencies), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('injectable', def, () => null), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('needsCompile', def, () => true), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(def.surrogates), _bindable_js__WEBPACK_IMPORTED_MODULE_2__.Bindable.from(def.bindables), _templating_children_js__WEBPACK_IMPORTED_MODULE_4__.Children.from(def.childrenObservers), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('containerless', def, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('isStrictBinding', def, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('shadowOptions', def, () => null), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('hasSlots', def, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('enhance', def, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('projectionsMap', def, () => new Map()), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('watches', def, () => _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray));
        }
        // If a type is passed in, we ignore the Type property on the definition if it exists.
        // TODO: document this behavior
        if (typeof nameOrDef === 'string') {
            return new CustomElementDefinition(Type, nameOrDef, (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(CustomElement.getAnnotation(Type, 'aliases'), Type.aliases), CustomElement.keyFrom(nameOrDef), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrTypeOrDefault)('cache', Type, () => 0), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrTypeOrDefault)('template', Type, () => null), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(CustomElement.getAnnotation(Type, 'instructions'), Type.instructions), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(CustomElement.getAnnotation(Type, 'dependencies'), Type.dependencies), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrTypeOrDefault)('injectable', Type, () => null), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrTypeOrDefault)('needsCompile', Type, () => true), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(CustomElement.getAnnotation(Type, 'surrogates'), Type.surrogates), _bindable_js__WEBPACK_IMPORTED_MODULE_2__.Bindable.from(..._bindable_js__WEBPACK_IMPORTED_MODULE_2__.Bindable.getAll(Type), CustomElement.getAnnotation(Type, 'bindables'), Type.bindables), _templating_children_js__WEBPACK_IMPORTED_MODULE_4__.Children.from(..._templating_children_js__WEBPACK_IMPORTED_MODULE_4__.Children.getAll(Type), CustomElement.getAnnotation(Type, 'childrenObservers'), Type.childrenObservers), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrTypeOrDefault)('containerless', Type, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrTypeOrDefault)('isStrictBinding', Type, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrTypeOrDefault)('shadowOptions', Type, () => null), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrTypeOrDefault)('hasSlots', Type, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrTypeOrDefault)('enhance', Type, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrTypeOrDefault)('projectionsMap', Type, () => new Map()), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(_watch_js__WEBPACK_IMPORTED_MODULE_5__.Watch.getAnnotation(Type), Type.watches));
        }
        // This is the typical default behavior, e.g. from regular CustomElement.define invocations or from @customElement deco
        // The ViewValueConverter also uses this signature and passes in a definition where everything except for the 'hooks'
        // property needs to be copied. So we have that exception for 'hooks', but we may need to revisit that default behavior
        // if this turns out to be too opinionated.
        const name = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromDefinitionOrDefault)('name', nameOrDef, CustomElement.generateName);
        return new CustomElementDefinition(Type, name, (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(CustomElement.getAnnotation(Type, 'aliases'), nameOrDef.aliases, Type.aliases), CustomElement.keyFrom(name), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('cache', nameOrDef, Type, () => 0), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('template', nameOrDef, Type, () => null), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(CustomElement.getAnnotation(Type, 'instructions'), nameOrDef.instructions, Type.instructions), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(CustomElement.getAnnotation(Type, 'dependencies'), nameOrDef.dependencies, Type.dependencies), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('injectable', nameOrDef, Type, () => null), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('needsCompile', nameOrDef, Type, () => true), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(CustomElement.getAnnotation(Type, 'surrogates'), nameOrDef.surrogates, Type.surrogates), _bindable_js__WEBPACK_IMPORTED_MODULE_2__.Bindable.from(..._bindable_js__WEBPACK_IMPORTED_MODULE_2__.Bindable.getAll(Type), CustomElement.getAnnotation(Type, 'bindables'), Type.bindables, nameOrDef.bindables), _templating_children_js__WEBPACK_IMPORTED_MODULE_4__.Children.from(..._templating_children_js__WEBPACK_IMPORTED_MODULE_4__.Children.getAll(Type), CustomElement.getAnnotation(Type, 'childrenObservers'), Type.childrenObservers, nameOrDef.childrenObservers), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('containerless', nameOrDef, Type, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('isStrictBinding', nameOrDef, Type, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('shadowOptions', nameOrDef, Type, () => null), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('hasSlots', nameOrDef, Type, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('enhance', nameOrDef, Type, () => false), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('projectionsMap', nameOrDef, Type, () => new Map()), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(nameOrDef.watches, _watch_js__WEBPACK_IMPORTED_MODULE_5__.Watch.getAnnotation(Type), Type.watches));
    }
    static getOrCreate(partialDefinition) {
        if (partialDefinition instanceof CustomElementDefinition) {
            return partialDefinition;
        }
        if (definitionLookup.has(partialDefinition)) {
            return definitionLookup.get(partialDefinition);
        }
        const definition = CustomElementDefinition.create(partialDefinition);
        definitionLookup.set(partialDefinition, definition);
        // Make sure the full definition can be retrieved from dynamically created classes as well
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(CustomElement.name, definition, definition.Type);
        return definition;
    }
    register(container) {
        const { Type, key, aliases } = this;
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.transient(key, Type).register(container);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.aliasTo(key, Type).register(container);
        (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.registerAliases)(aliases, CustomElement, key, container);
    }
}
const defaultForOpts = {
    name: undefined,
    searchParents: false,
    optional: false,
};
const CustomElement = {
    name: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.keyFor('custom-element'),
    keyFrom(name) {
        return `${CustomElement.name}:${name}`;
    },
    isType(value) {
        return typeof value === 'function' && _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.hasOwn(CustomElement.name, value);
    },
    for(node, opts = defaultForOpts) {
        if (opts.name === void 0 && opts.searchParents !== true) {
            const controller = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(CustomElement.name, node);
            if (controller === void 0) {
                if (opts.optional === true) {
                    return null;
                }
                throw new Error(`The provided node is not a custom element or containerless host.`);
            }
            return controller;
        }
        if (opts.name !== void 0) {
            if (opts.searchParents !== true) {
                const controller = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(CustomElement.name, node);
                if (controller === void 0) {
                    throw new Error(`The provided node is not a custom element or containerless host.`);
                }
                if (controller.is(opts.name)) {
                    return controller;
                }
                return (void 0);
            }
            let cur = node;
            let foundAController = false;
            while (cur !== null) {
                const controller = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(CustomElement.name, cur);
                if (controller !== void 0) {
                    foundAController = true;
                    if (controller.is(opts.name)) {
                        return controller;
                    }
                }
                cur = (0,_dom_js__WEBPACK_IMPORTED_MODULE_3__.getEffectiveParentNode)(cur);
            }
            if (foundAController) {
                return (void 0);
            }
            throw new Error(`The provided node does does not appear to be part of an Aurelia app DOM tree, or it was added to the DOM in a way that Aurelia cannot properly resolve its position in the component tree.`);
        }
        let cur = node;
        while (cur !== null) {
            const controller = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(CustomElement.name, cur);
            if (controller !== void 0) {
                return controller;
            }
            cur = (0,_dom_js__WEBPACK_IMPORTED_MODULE_3__.getEffectiveParentNode)(cur);
        }
        throw new Error(`The provided node does does not appear to be part of an Aurelia app DOM tree, or it was added to the DOM in a way that Aurelia cannot properly resolve its position in the component tree.`);
    },
    define(nameOrDef, Type) {
        const definition = CustomElementDefinition.create(nameOrDef, Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(CustomElement.name, definition, definition.Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(CustomElement.name, definition, definition);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.appendTo(definition.Type, CustomElement.name);
        return definition.Type;
    },
    getDefinition(Type) {
        const def = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(CustomElement.name, Type);
        if (def === void 0) {
            throw new Error(`No definition found for type ${Type.name}`);
        }
        return def;
    },
    annotate(Type, prop, value) {
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor(prop), value, Type);
    },
    getAnnotation(Type, prop) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor(prop), Type);
    },
    generateName: (function () {
        let id = 0;
        return function () {
            return `unnamed-${++id}`;
        };
    })(),
    createInjectable() {
        const $injectable = function (target, property, index) {
            const annotationParamtypes = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.getOrCreateAnnotationParamTypes(target);
            annotationParamtypes[index] = $injectable;
            return target;
        };
        $injectable.register = function (container) {
            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
            return {
                resolve(container, requestor) {
                    if (requestor.has($injectable, true)) {
                        return requestor.get($injectable);
                    }
                    else {
                        return null;
                    }
                },
            };
        };
        return $injectable;
    },
    generateType: (function () {
        const nameDescriptor = {
            value: '',
            writable: false,
            enumerable: false,
            configurable: true,
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const defaultProto = {};
        return function (name, proto = defaultProto) {
            // Anonymous class ensures that minification cannot cause unintended side-effects, and keeps the class
            // looking similarly from the outside (when inspected via debugger, etc).
            const Type = class {
            };
            // Define the name property so that Type.name can be used by end users / plugin authors if they really need to,
            // even when minified.
            nameDescriptor.value = name;
            Reflect.defineProperty(Type, 'name', nameDescriptor);
            // Assign anything from the prototype that was passed in
            if (proto !== defaultProto) {
                Object.assign(Type.prototype, proto);
            }
            return Type;
        };
    })(),
};
//# sourceMappingURL=custom-element.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-elements/au-slot.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-elements/au-slot.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IProjections": () => /* binding */ IProjections,
/* harmony export */   "AuSlotContentType": () => /* binding */ AuSlotContentType,
/* harmony export */   "SlotInfo": () => /* binding */ SlotInfo,
/* harmony export */   "ProjectionContext": () => /* binding */ ProjectionContext,
/* harmony export */   "RegisteredProjections": () => /* binding */ RegisteredProjections,
/* harmony export */   "IProjectionProvider": () => /* binding */ IProjectionProvider,
/* harmony export */   "ProjectionProvider": () => /* binding */ ProjectionProvider,
/* harmony export */   "AuSlot": () => /* binding */ AuSlot
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _custom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
/* harmony import */ var _templating_view_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../templating/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js");




const IProjections = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface("IProjections");
var AuSlotContentType;
(function (AuSlotContentType) {
    AuSlotContentType[AuSlotContentType["Projection"] = 0] = "Projection";
    AuSlotContentType[AuSlotContentType["Fallback"] = 1] = "Fallback";
})(AuSlotContentType || (AuSlotContentType = {}));
class SlotInfo {
    constructor(name, type, projectionContext) {
        this.name = name;
        this.type = type;
        this.projectionContext = projectionContext;
    }
}
class ProjectionContext {
    constructor(content, scope = null) {
        this.content = content;
        this.scope = scope;
    }
}
class RegisteredProjections {
    constructor(scope, projections) {
        this.scope = scope;
        this.projections = projections;
    }
}
const IProjectionProvider = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IProjectionProvider', x => x.singleton(ProjectionProvider));
const projectionMap = new WeakMap();
class ProjectionProvider {
    registerProjections(projections, scope) {
        for (const [instruction, $projections] of projections) {
            projectionMap.set(instruction, new RegisteredProjections(scope, $projections));
        }
    }
    getProjectionFor(instruction) {
        return projectionMap.get(instruction) ?? null;
    }
}
class AuSlot {
    constructor(factory, location) {
        this.factory = factory;
        this.hostScope = null;
        this.view = factory.create().setLocation(location);
        this.isProjection = factory.contentType === AuSlotContentType.Projection;
        this.outerScope = factory.projectionScope;
    }
    /**
     * @internal
     */
    static get inject() { return [_templating_view_js__WEBPACK_IMPORTED_MODULE_3__.IViewFactory, _dom_js__WEBPACK_IMPORTED_MODULE_1__.IRenderLocation]; }
    binding(initiator, parent, flags) {
        this.hostScope = this.$controller.scope.parentScope;
    }
    attaching(initiator, parent, flags) {
        const { $controller } = this;
        return this.view.activate(initiator, $controller, flags, this.outerScope ?? this.hostScope, this.hostScope);
    }
    detaching(initiator, parent, flags) {
        return this.view.deactivate(initiator, this.$controller, flags);
    }
    dispose() {
        this.view.dispose();
        this.view = (void 0);
    }
    accept(visitor) {
        if (this.view?.accept(visitor) === true) {
            return true;
        }
    }
}
(0,_custom_element_js__WEBPACK_IMPORTED_MODULE_2__.customElement)({ name: 'au-slot', template: null, containerless: true })(AuSlot);
//# sourceMappingURL=au-slot.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-elements/compose.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-elements/compose.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Compose": () => /* binding */ Compose
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _create_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../create-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/create-element.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../renderer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/renderer.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _templating_render_context_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../templating/render-context.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/render-context.js");
/* harmony import */ var _custom_element_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};








function toLookup(acc, item) {
    const to = item.to;
    if (to !== void 0 && to !== 'subject' && to !== 'composing') {
        acc[to] = item;
    }
    return acc;
}
let Compose = class Compose {
    constructor(p, instruction) {
        this.p = p;
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
        this.subject = void 0;
        this.composing = false;
        this.view = void 0;
        this.lastSubject = void 0;
        this.properties = instruction.instructions.reduce(toLookup, {});
    }
    attaching(initiator, parent, flags) {
        const { subject, view } = this;
        if (view === void 0 || this.lastSubject !== subject) {
            this.lastSubject = subject;
            this.composing = true;
            return this.compose(void 0, subject, initiator, flags);
        }
        return this.compose(view, subject, initiator, flags);
    }
    detaching(initiator, parent, flags) {
        return this.deactivate(this.view, initiator, flags);
    }
    subjectChanged(newValue, previousValue, flags) {
        const { $controller } = this;
        if (!$controller.isActive) {
            return;
        }
        if (this.lastSubject === newValue) {
            return;
        }
        this.lastSubject = newValue;
        this.composing = true;
        flags |= $controller.flags;
        const ret = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.deactivate(this.view, null, flags), () => {
            // TODO(fkleuver): handle & test race condition
            return this.compose(void 0, newValue, null, flags);
        });
        if (ret instanceof Promise) {
            ret.catch(err => { throw err; });
        }
    }
    compose(view, subject, initiator, flags) {
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(view === void 0
            ? (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(subject, resolvedSubject => {
                return this.resolveView(resolvedSubject, flags);
            })
            : view, resolvedView => {
            return this.activate(resolvedView, initiator, flags);
        });
    }
    deactivate(view, initiator, flags) {
        return view?.deactivate(initiator ?? view, this.$controller, flags);
    }
    activate(view, initiator, flags) {
        const { $controller } = this;
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(view?.activate(initiator ?? view, $controller, flags, $controller.scope, $controller.hostScope), () => {
            this.composing = false;
        });
    }
    resolveView(subject, flags) {
        const view = this.provideViewFor(subject, flags);
        if (view) {
            view.setLocation(this.$controller.location);
            view.lockScope(this.$controller.scope);
            return view;
        }
        return void 0;
    }
    provideViewFor(subject, flags) {
        if (!subject) {
            return void 0;
        }
        if (isController(subject)) { // IController
            return subject;
        }
        if ('createView' in subject) { // RenderPlan
            return subject.createView(this.$controller.context);
        }
        if ('create' in subject) { // IViewFactory
            return subject.create(flags);
        }
        if ('template' in subject) { // Raw Template Definition
            const definition = _custom_element_js__WEBPACK_IMPORTED_MODULE_6__.CustomElementDefinition.getOrCreate(subject);
            return (0,_templating_render_context_js__WEBPACK_IMPORTED_MODULE_5__.getRenderContext)(definition, this.$controller.context).getViewFactory().create(flags);
        }
        // Constructable (Custom Element Constructor)
        return (0,_create_element_js__WEBPACK_IMPORTED_MODULE_2__.createElement)(this.p, subject, this.properties, this.$controller.host.childNodes).createView(this.$controller.context);
    }
    dispose() {
        this.view?.dispose();
        this.view = (void 0);
    }
    accept(visitor) {
        if (this.view?.accept(visitor) === true) {
            return true;
        }
    }
};
__decorate([
    _bindable_js__WEBPACK_IMPORTED_MODULE_7__.bindable
], Compose.prototype, "subject", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_7__.bindable)({ mode: _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.fromView })
], Compose.prototype, "composing", void 0);
Compose = __decorate([
    (0,_custom_element_js__WEBPACK_IMPORTED_MODULE_6__.customElement)({ name: 'au-compose', template: null, containerless: true }),
    __param(0, _platform_js__WEBPACK_IMPORTED_MODULE_4__.IPlatform),
    __param(1, _renderer_js__WEBPACK_IMPORTED_MODULE_3__.IInstruction)
], Compose);

function isController(subject) {
    return 'lockScope' in subject;
}
//# sourceMappingURL=compose.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/flags.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/flags.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FrequentMutations": () => /* binding */ FrequentMutations,
/* harmony export */   "ObserveShallow": () => /* binding */ ObserveShallow
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _templating_view_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../templating/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js");
/* harmony import */ var _custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");




class FlagsTemplateController {
    constructor(factory, location, flags) {
        this.factory = factory;
        this.flags = flags;
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
        this.view = this.factory.create().setLocation(location);
    }
    attaching(initiator, parent, flags) {
        const { $controller } = this;
        return this.view.activate(initiator, $controller, flags | this.flags, $controller.scope, $controller.hostScope);
    }
    detaching(initiator, parent, flags) {
        return this.view.deactivate(initiator, this.$controller, flags);
    }
    dispose() {
        this.view.dispose();
        this.view = (void 0);
    }
    accept(visitor) {
        if (this.view?.accept(visitor) === true) {
            return true;
        }
    }
}
class FrequentMutations extends FlagsTemplateController {
    constructor(factory, location) {
        super(factory, location, 8192 /* persistentTargetObserverQueue */);
    }
}
/**
 * @internal
 */
FrequentMutations.inject = [_templating_view_js__WEBPACK_IMPORTED_MODULE_2__.IViewFactory, _dom_js__WEBPACK_IMPORTED_MODULE_1__.IRenderLocation];
class ObserveShallow extends FlagsTemplateController {
    constructor(factory, location) {
        super(factory, location, 2048 /* observeLeafPropertiesOnly */);
    }
}
/**
 * @internal
 */
ObserveShallow.inject = [_templating_view_js__WEBPACK_IMPORTED_MODULE_2__.IViewFactory, _dom_js__WEBPACK_IMPORTED_MODULE_1__.IRenderLocation];
(0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.templateController)('frequent-mutations')(FrequentMutations);
(0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.templateController)('observe-shallow')(ObserveShallow);
//# sourceMappingURL=flags.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/if.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/if.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "If": () => /* binding */ If,
/* harmony export */   "Else": () => /* binding */ Else
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _templating_view_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../templating/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js");
/* harmony import */ var _custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};





let If = class If {
    constructor(ifFactory, location) {
        this.ifFactory = ifFactory;
        this.location = location;
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
        this.elseFactory = void 0;
        this.elseView = void 0;
        this.ifView = void 0;
        this.view = void 0;
        this.value = false;
    }
    attaching(initiator, parent, flags) {
        const view = this.view = this.updateView(this.value, flags);
        if (view !== void 0) {
            const { $controller } = this;
            return view.activate(initiator, $controller, flags, $controller.scope, $controller.hostScope);
        }
    }
    detaching(initiator, parent, flags) {
        if (this.view !== void 0) {
            return this.view.deactivate(initiator, this.$controller, flags);
        }
    }
    valueChanged(newValue, oldValue, flags) {
        const { $controller } = this;
        if (!$controller.isActive) {
            return;
        }
        const ret = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.view?.deactivate(this.view, $controller, flags), () => {
            const view = this.view = this.updateView(this.value, flags);
            if (view !== void 0) {
                // TODO(fkleuver): add logic to the controller that ensures correct handling of race conditions and add a variety of `if` integration tests
                return view.activate(view, $controller, flags, $controller.scope, $controller.hostScope);
            }
        });
        if (ret instanceof Promise) {
            ret.catch(err => { throw err; });
        }
    }
    /** @internal */
    updateView(value, flags) {
        if (value) {
            return this.ifView = this.ensureView(this.ifView, this.ifFactory, flags);
        }
        if (this.elseFactory != void 0) {
            return this.elseView = this.ensureView(this.elseView, this.elseFactory, flags);
        }
        return void 0;
    }
    /** @internal */
    ensureView(view, factory, flags) {
        if (view === void 0) {
            view = factory.create(flags);
        }
        view.setLocation(this.location);
        return view;
    }
    dispose() {
        if (this.ifView !== void 0) {
            this.ifView.dispose();
            this.ifView = void 0;
        }
        if (this.elseView !== void 0) {
            this.elseView.dispose();
            this.elseView = void 0;
        }
        this.view = void 0;
    }
    accept(visitor) {
        if (this.view?.accept(visitor) === true) {
            return true;
        }
    }
};
__decorate([
    _bindable_js__WEBPACK_IMPORTED_MODULE_4__.bindable
], If.prototype, "value", void 0);
If = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.templateController)('if'),
    __param(0, _templating_view_js__WEBPACK_IMPORTED_MODULE_2__.IViewFactory),
    __param(1, _dom_js__WEBPACK_IMPORTED_MODULE_1__.IRenderLocation)
], If);

let Else = class Else {
    constructor(factory) {
        this.factory = factory;
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
    }
    link(flags, parentContext, controller, _childController, _target, _instruction) {
        const children = controller.children;
        const ifBehavior = children[children.length - 1];
        if (ifBehavior instanceof If) {
            ifBehavior.elseFactory = this.factory;
        }
        else if (ifBehavior.viewModel instanceof If) {
            ifBehavior.viewModel.elseFactory = this.factory;
        }
        else {
            throw new Error(`Unsupported IfBehavior`); // TODO: create error code
        }
    }
};
Else = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.templateController)({ name: 'else' }),
    __param(0, _templating_view_js__WEBPACK_IMPORTED_MODULE_2__.IViewFactory)
], Else);

//# sourceMappingURL=if.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/portal.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/portal.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Portal": () => /* binding */ Portal
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _templating_view_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../templating/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js");
/* harmony import */ var _custom_attribute_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};






let Portal = class Portal {
    constructor(factory, originalLoc, p) {
        this.factory = factory;
        this.originalLoc = originalLoc;
        this.p = p;
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
        this.strict = false;
        // to make the shape of this object consistent.
        // todo: is this necessary
        this.currentTarget = p.document.createElement('div');
        this.view = this.factory.create();
        (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.setEffectiveParentNode)(this.view.nodes, originalLoc);
    }
    attaching(initiator, parent, flags) {
        if (this.callbackContext == null) {
            this.callbackContext = this.$controller.scope.bindingContext;
        }
        const newTarget = this.currentTarget = this.resolveTarget();
        this.view.setHost(newTarget);
        return this.$activating(initiator, newTarget, flags);
    }
    detaching(initiator, parent, flags) {
        return this.$deactivating(initiator, this.currentTarget, flags);
    }
    targetChanged() {
        const { $controller } = this;
        if (!$controller.isActive) {
            return;
        }
        const oldTarget = this.currentTarget;
        const newTarget = this.currentTarget = this.resolveTarget();
        if (oldTarget === newTarget) {
            return;
        }
        this.view.setHost(newTarget);
        // TODO(fkleuver): fix and test possible race condition
        const ret = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.$deactivating(null, newTarget, $controller.flags), () => {
            return this.$activating(null, newTarget, $controller.flags);
        });
        if (ret instanceof Promise) {
            ret.catch(err => { throw err; });
        }
    }
    $activating(initiator, target, flags) {
        const { activating, callbackContext, view } = this;
        view.setHost(target);
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(activating?.call(callbackContext, target, view), () => {
            return this.activate(initiator, target, flags);
        });
    }
    activate(initiator, target, flags) {
        const { $controller, view } = this;
        if (initiator === null) {
            view.nodes.appendTo(target);
        }
        else {
            // TODO(fkleuver): fix and test possible race condition
            return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(view.activate(initiator ?? view, $controller, flags, $controller.scope), () => {
                return this.$activated(target);
            });
        }
        return this.$activated(target);
    }
    $activated(target) {
        const { activated, callbackContext, view } = this;
        return activated?.call(callbackContext, target, view);
    }
    $deactivating(initiator, target, flags) {
        const { deactivating, callbackContext, view } = this;
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(deactivating?.call(callbackContext, target, view), () => {
            return this.deactivate(initiator, target, flags);
        });
    }
    deactivate(initiator, target, flags) {
        const { $controller, view } = this;
        if (initiator === null) {
            view.nodes.remove();
        }
        else {
            return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(view.deactivate(initiator, $controller, flags), () => {
                return this.$deactivated(target);
            });
        }
        return this.$deactivated(target);
    }
    $deactivated(target) {
        const { deactivated, callbackContext, view } = this;
        return deactivated?.call(callbackContext, target, view);
    }
    resolveTarget() {
        const p = this.p;
        // with a $ in front to make it less confusing/error prone
        const $document = p.document;
        let target = this.target;
        let context = this.renderContext;
        if (target === '') {
            if (this.strict) {
                throw new Error('Empty querySelector');
            }
            return $document.body;
        }
        if (typeof target === 'string') {
            let queryContext = $document;
            if (typeof context === 'string') {
                context = $document.querySelector(context);
            }
            if (context instanceof p.Node) {
                queryContext = context;
            }
            target = queryContext.querySelector(target);
        }
        if (target instanceof p.Node) {
            return target;
        }
        if (target == null) {
            if (this.strict) {
                throw new Error('Portal target not found');
            }
            return $document.body;
        }
        return target;
    }
    dispose() {
        this.view.dispose();
        this.view = (void 0);
        this.callbackContext = null;
    }
    accept(visitor) {
        if (this.view?.accept(visitor) === true) {
            return true;
        }
    }
};
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable)({ primary: true })
], Portal.prototype, "target", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable)({ callback: 'targetChanged' })
], Portal.prototype, "renderContext", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable)()
], Portal.prototype, "strict", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable)()
], Portal.prototype, "deactivating", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable)()
], Portal.prototype, "activating", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable)()
], Portal.prototype, "deactivated", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable)()
], Portal.prototype, "activated", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable)()
], Portal.prototype, "callbackContext", void 0);
Portal = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_4__.templateController)('portal'),
    __param(0, _templating_view_js__WEBPACK_IMPORTED_MODULE_3__.IViewFactory),
    __param(1, _dom_js__WEBPACK_IMPORTED_MODULE_1__.IRenderLocation),
    __param(2, _platform_js__WEBPACK_IMPORTED_MODULE_2__.IPlatform)
], Portal);

//# sourceMappingURL=portal.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/repeat.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/repeat.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Repeat": () => /* binding */ Repeat,
/* harmony export */   "longestIncreasingSubsequence": () => /* binding */ longestIncreasingSubsequence
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _templating_view_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../templating/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js");
/* harmony import */ var _custom_attribute_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _templating_controller_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../templating/controller.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/controller.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};







function dispose(disposable) {
    disposable.dispose();
}
let Repeat = class Repeat {
    constructor(location, parent, factory) {
        this.location = location;
        this.parent = parent;
        this.factory = factory;
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
        this.hasPendingInstanceMutation = false;
        this.observer = void 0;
        this.views = [];
        this.key = void 0;
        this.normalizedItems = void 0;
    }
    binding(initiator, parent, flags) {
        this.checkCollectionObserver(flags);
        const bindings = this.parent.bindings;
        let binding = (void 0);
        for (let i = 0, ii = bindings.length; i < ii; ++i) {
            binding = bindings[i];
            if (binding.target === this && binding.targetProperty === 'items') {
                this.forOf = binding.sourceExpression;
                break;
            }
        }
        this.local = this.forOf.declaration.evaluate(flags, this.$controller.scope, null, binding.locator, null);
    }
    attaching(initiator, parent, flags) {
        this.normalizeToArray(flags);
        return this.activateAllViews(initiator, flags);
    }
    detaching(initiator, parent, flags) {
        this.checkCollectionObserver(flags);
        return this.deactivateAllViews(initiator, flags);
    }
    // called by SetterObserver
    itemsChanged(flags) {
        const { $controller } = this;
        if (!$controller.isActive) {
            return;
        }
        flags |= $controller.flags;
        this.checkCollectionObserver(flags);
        flags |= 8 /* updateTarget */;
        this.normalizeToArray(flags);
        const ret = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.deactivateAllViews(null, flags), () => {
            // TODO(fkleuver): add logic to the controller that ensures correct handling of race conditions and add a variety of `if` integration tests
            return this.activateAllViews(null, flags);
        });
        if (ret instanceof Promise) {
            ret.catch(err => { throw err; });
        }
    }
    // called by a CollectionObserver
    handleCollectionChange(indexMap, flags) {
        const { $controller } = this;
        if (!$controller.isActive) {
            return;
        }
        flags |= $controller.flags;
        flags |= 8 /* updateTarget */;
        this.normalizeToArray(flags);
        if (indexMap === void 0) {
            const ret = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.deactivateAllViews(null, flags), () => {
                // TODO(fkleuver): add logic to the controller that ensures correct handling of race conditions and add a variety of `if` integration tests
                return this.activateAllViews(null, flags);
            });
            if (ret instanceof Promise) {
                ret.catch(err => { throw err; });
            }
        }
        else {
            const oldLength = this.views.length;
            (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.applyMutationsToIndices)(indexMap);
            // first detach+unbind+(remove from array) the deleted view indices
            if (indexMap.deletedItems.length > 0) {
                indexMap.deletedItems.sort(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.compareNumber);
                const ret = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.deactivateAndRemoveViewsByKey(indexMap, flags), () => {
                    // TODO(fkleuver): add logic to the controller that ensures correct handling of race conditions and add a variety of `if` integration tests
                    return this.createAndActivateAndSortViewsByKey(oldLength, indexMap, flags);
                });
                if (ret instanceof Promise) {
                    ret.catch(err => { throw err; });
                }
            }
            else {
                // TODO(fkleuver): add logic to the controller that ensures correct handling of race conditions and add integration tests
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.createAndActivateAndSortViewsByKey(oldLength, indexMap, flags);
            }
        }
    }
    // todo: subscribe to collection from inner expression
    checkCollectionObserver(flags) {
        const oldObserver = this.observer;
        if ((flags & 64 /* fromUnbind */)) {
            if (oldObserver !== void 0) {
                oldObserver.unsubscribe(this);
            }
        }
        else if (this.$controller.isActive) {
            const newObserver = this.observer = (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.getCollectionObserver)(this.items);
            if (oldObserver !== newObserver && oldObserver) {
                oldObserver.unsubscribe(this);
            }
            if (newObserver) {
                newObserver.subscribe(this);
            }
        }
    }
    normalizeToArray(flags) {
        const items = this.items;
        if (items instanceof Array) {
            this.normalizedItems = items;
            return;
        }
        const forOf = this.forOf;
        if (forOf === void 0) {
            return;
        }
        const normalizedItems = [];
        this.forOf.iterate(flags, items, (arr, index, item) => {
            normalizedItems[index] = item;
        });
        this.normalizedItems = normalizedItems;
    }
    activateAllViews(initiator, flags) {
        let promises = void 0;
        let ret;
        let view;
        let viewScope;
        const { $controller, factory, local, location, items } = this;
        const parentScope = $controller.scope;
        const hostScope = $controller.hostScope;
        const newLen = this.forOf.count(flags, items);
        const views = this.views = Array(newLen);
        this.forOf.iterate(flags, items, (arr, i, item) => {
            view = views[i] = factory.create(flags).setLocation(location);
            view.nodes.unlink();
            viewScope = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.Scope.fromParent(parentScope, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingContext.create(local, item));
            setContextualProperties(viewScope.overrideContext, i, newLen);
            ret = view.activate(initiator ?? view, $controller, flags, viewScope, hostScope);
            if (ret instanceof Promise) {
                (promises ?? (promises = [])).push(ret);
            }
        });
        if (promises !== void 0) {
            return promises.length === 1
                ? promises[0]
                : Promise.all(promises);
        }
    }
    deactivateAllViews(initiator, flags) {
        let promises = void 0;
        let ret;
        let view;
        const { views, $controller } = this;
        for (let i = 0, ii = views.length; i < ii; ++i) {
            view = views[i];
            view.release();
            ret = view.deactivate(initiator ?? view, $controller, flags);
            if (ret instanceof Promise) {
                (promises ?? (promises = [])).push(ret);
            }
        }
        if (promises !== void 0) {
            return promises.length === 1
                ? promises[0]
                : Promise.all(promises);
        }
    }
    deactivateAndRemoveViewsByKey(indexMap, flags) {
        let promises = void 0;
        let ret;
        let view;
        const { $controller, views } = this;
        const deleted = indexMap.deletedItems;
        const deletedLen = deleted.length;
        let i = 0;
        for (; i < deletedLen; ++i) {
            view = views[deleted[i]];
            view.release();
            ret = view.deactivate(view, $controller, flags);
            if (ret instanceof Promise) {
                (promises ?? (promises = [])).push(ret);
            }
        }
        i = 0;
        let j = 0;
        for (; i < deletedLen; ++i) {
            j = deleted[i] - i;
            views.splice(j, 1);
        }
        if (promises !== void 0) {
            return promises.length === 1
                ? promises[0]
                : Promise.all(promises);
        }
    }
    createAndActivateAndSortViewsByKey(oldLength, indexMap, flags) {
        let promises = void 0;
        let ret;
        let view;
        let viewScope;
        const { $controller, factory, local, normalizedItems, location, views } = this;
        const mapLen = indexMap.length;
        for (let i = 0; i < mapLen; ++i) {
            if (indexMap[i] === -2) {
                view = factory.create(flags);
                views.splice(i, 0, view);
            }
        }
        if (views.length !== mapLen) {
            // TODO: create error code and use reporter with more informative message
            throw new Error(`viewsLen=${views.length}, mapLen=${mapLen}`);
        }
        const parentScope = $controller.scope;
        const hostScope = $controller.hostScope;
        const newLen = indexMap.length;
        (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.synchronizeIndices)(views, indexMap);
        // this algorithm retrieves the indices of the longest increasing subsequence of items in the repeater
        // the items on those indices are not moved; this minimizes the number of DOM operations that need to be performed
        const seq = longestIncreasingSubsequence(indexMap);
        const seqLen = seq.length;
        let next;
        let j = seqLen - 1;
        let i = newLen - 1;
        for (; i >= 0; --i) {
            view = views[i];
            next = views[i + 1];
            view.nodes.link(next?.nodes ?? location);
            if (indexMap[i] === -2) {
                viewScope = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.Scope.fromParent(parentScope, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingContext.create(local, normalizedItems[i]));
                setContextualProperties(viewScope.overrideContext, i, newLen);
                view.setLocation(location);
                ret = view.activate(view, $controller, flags, viewScope, hostScope);
                if (ret instanceof Promise) {
                    (promises ?? (promises = [])).push(ret);
                }
            }
            else if (j < 0 || seqLen === 1 || i !== seq[j]) {
                setContextualProperties(view.scope.overrideContext, i, newLen);
                view.nodes.insertBefore(view.location);
            }
            else {
                if (oldLength !== newLen) {
                    setContextualProperties(view.scope.overrideContext, i, newLen);
                }
                --j;
            }
        }
        if (promises !== void 0) {
            return promises.length === 1
                ? promises[0]
                : Promise.all(promises);
        }
    }
    dispose() {
        this.views.forEach(dispose);
        this.views = (void 0);
    }
    accept(visitor) {
        const { views } = this;
        if (views !== void 0) {
            for (let i = 0, ii = views.length; i < ii; ++i) {
                if (views[i].accept(visitor) === true) {
                    return true;
                }
            }
        }
    }
};
__decorate([
    _bindable_js__WEBPACK_IMPORTED_MODULE_6__.bindable
], Repeat.prototype, "items", void 0);
Repeat = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_4__.templateController)('repeat'),
    __param(0, _dom_js__WEBPACK_IMPORTED_MODULE_2__.IRenderLocation),
    __param(1, _templating_controller_js__WEBPACK_IMPORTED_MODULE_5__.IController),
    __param(2, _templating_view_js__WEBPACK_IMPORTED_MODULE_3__.IViewFactory)
], Repeat);

let maxLen = 16;
let prevIndices = new Int32Array(maxLen);
let tailIndices = new Int32Array(maxLen);
// Based on inferno's lis_algorithm @ https://github.com/infernojs/inferno/blob/master/packages/inferno/src/DOM/patching.ts#L732
// with some tweaks to make it just a bit faster + account for IndexMap (and some names changes for readability)
/** @internal */
function longestIncreasingSubsequence(indexMap) {
    const len = indexMap.length;
    if (len > maxLen) {
        maxLen = len;
        prevIndices = new Int32Array(len);
        tailIndices = new Int32Array(len);
    }
    let cursor = 0;
    let cur = 0;
    let prev = 0;
    let i = 0;
    let j = 0;
    let low = 0;
    let high = 0;
    let mid = 0;
    for (; i < len; i++) {
        cur = indexMap[i];
        if (cur !== -2) {
            j = prevIndices[cursor];
            prev = indexMap[j];
            if (prev !== -2 && prev < cur) {
                tailIndices[i] = j;
                prevIndices[++cursor] = i;
                continue;
            }
            low = 0;
            high = cursor;
            while (low < high) {
                mid = (low + high) >> 1;
                prev = indexMap[prevIndices[mid]];
                if (prev !== -2 && prev < cur) {
                    low = mid + 1;
                }
                else {
                    high = mid;
                }
            }
            prev = indexMap[prevIndices[low]];
            if (cur < prev || prev === -2) {
                if (low > 0) {
                    tailIndices[i] = prevIndices[low - 1];
                }
                prevIndices[low] = i;
            }
        }
    }
    i = ++cursor;
    const result = new Int32Array(i);
    cur = prevIndices[cursor - 1];
    while (cursor-- > 0) {
        result[cursor] = cur;
        cur = tailIndices[cur];
    }
    while (i-- > 0)
        prevIndices[i] = 0;
    return result;
}
function setContextualProperties(oc, index, length) {
    const isFirst = index === 0;
    const isLast = index === length - 1;
    const isEven = index % 2 === 0;
    oc.$index = index;
    oc.$first = isFirst;
    oc.$last = isLast;
    oc.$middle = !isFirst && !isLast;
    oc.$even = isEven;
    oc.$odd = !isEven;
    oc.$length = length;
}
//# sourceMappingURL=repeat.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/switch.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/switch.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Switch": () => /* binding */ Switch,
/* harmony export */   "Case": () => /* binding */ Case,
/* harmony export */   "DefaultCase": () => /* binding */ DefaultCase
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _templating_view_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../templating/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};






let Switch = class Switch {
    constructor(factory, location) {
        this.factory = factory;
        this.location = location;
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
        /** @internal */
        this.cases = [];
        this.activeCases = [];
        /**
         * This is kept around here so that changes can be awaited from the tests.
         * This needs to be removed after the scheduler is ready to handle/queue the floating promises.
         */
        this.promise = void 0;
    }
    link(flags, _parentContext, _controller, _childController, _target, _instruction) {
        this.view = this.factory.create(flags, this.$controller).setLocation(this.location);
    }
    attaching(initiator, parent, flags) {
        const view = this.view;
        const $controller = this.$controller;
        this.queue(() => view.activate(initiator, $controller, flags, $controller.scope, $controller.hostScope));
        this.queue(() => this.swap(initiator, flags, this.value));
        return this.promise;
    }
    detaching(initiator, parent, flags) {
        this.queue(() => {
            const view = this.view;
            return view.deactivate(initiator, this.$controller, flags);
        });
        return this.promise;
    }
    dispose() {
        this.view?.dispose();
        this.view = (void 0);
    }
    valueChanged(_newValue, _oldValue, flags) {
        if (!this.$controller.isActive) {
            return;
        }
        this.queue(() => this.swap(null, flags, this.value));
    }
    caseChanged($case, flags) {
        this.queue(() => this.handleCaseChange($case, flags));
    }
    handleCaseChange($case, flags) {
        const isMatch = $case.isMatch(this.value, flags);
        const activeCases = this.activeCases;
        const numActiveCases = activeCases.length;
        // Early termination #1
        if (!isMatch) {
            /** The previous match started with this; thus clear. */
            if (numActiveCases > 0 && activeCases[0].id === $case.id) {
                return this.clearActiveCases(null, flags);
            }
            /**
             * There are 2 different scenarios here:
             * 1. $case in activeCases: Indicates by-product of fallthrough. The starting case still satisfies. Return.
             * 2. $case not in activeCases: It was previously not active, and currently also not a match. Return.
             */
            return;
        }
        // Early termination #2
        if (numActiveCases > 0 && activeCases[0].id < $case.id) {
            // Even if this case now a match, the previous case still wins by as that has lower ordinal.
            return;
        }
        // compute the new active cases
        const newActiveCases = [];
        let fallThrough = $case.fallThrough;
        if (!fallThrough) {
            newActiveCases.push($case);
        }
        else {
            const cases = this.cases;
            const idx = cases.indexOf($case);
            for (let i = idx, ii = cases.length; i < ii && fallThrough; i++) {
                const c = cases[i];
                newActiveCases.push(c);
                fallThrough = c.fallThrough;
            }
        }
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.clearActiveCases(null, flags, newActiveCases), () => {
            this.activeCases = newActiveCases;
            return this.activateCases(null, flags);
        });
    }
    swap(initiator, flags, value) {
        const newActiveCases = [];
        let fallThrough = false;
        for (const $case of this.cases) {
            if (fallThrough || $case.isMatch(value, flags)) {
                newActiveCases.push($case);
                fallThrough = $case.fallThrough;
            }
            if (newActiveCases.length > 0 && !fallThrough) {
                break;
            }
        }
        const defaultCase = this.defaultCase;
        if (newActiveCases.length === 0 && defaultCase !== void 0) {
            newActiveCases.push(defaultCase);
        }
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(this.activeCases.length > 0
            ? this.clearActiveCases(initiator, flags, newActiveCases)
            : void 0, () => {
            this.activeCases = newActiveCases;
            if (newActiveCases.length === 0) {
                return;
            }
            return this.activateCases(initiator, flags);
        });
    }
    activateCases(initiator, flags) {
        const controller = this.$controller;
        if (!controller.isActive) {
            return;
        }
        const cases = this.activeCases;
        const length = cases.length;
        if (length === 0) {
            return;
        }
        const scope = controller.scope;
        const hostScope = controller.hostScope;
        // most common case
        if (length === 1) {
            return cases[0].activate(initiator, flags, scope, hostScope);
        }
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.resolveAll)(...cases.map(($case) => $case.activate(initiator, flags, scope, hostScope)));
    }
    clearActiveCases(initiator, flags, newActiveCases = []) {
        const cases = this.activeCases;
        const numCases = cases.length;
        if (numCases === 0) {
            return;
        }
        if (numCases === 1) {
            const firstCase = cases[0];
            if (!newActiveCases.includes(firstCase)) {
                cases.length = 0;
                return firstCase.deactivate(initiator, flags);
            }
            return;
        }
        return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)((0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.resolveAll)(...cases.reduce((acc, $case) => {
            if (!newActiveCases.includes($case)) {
                acc.push($case.deactivate(initiator, flags));
            }
            return acc;
        }, [])), () => {
            cases.length = 0;
        });
    }
    queue(action) {
        const previousPromise = this.promise;
        let promise = void 0;
        promise = this.promise = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)((0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.onResolve)(previousPromise, action), () => {
            if (this.promise === promise) {
                this.promise = void 0;
            }
        });
    }
    accept(visitor) {
        if (this.$controller.accept(visitor) === true) {
            return true;
        }
        if (this.activeCases.some(x => x.accept(visitor))) {
            return true;
        }
    }
};
__decorate([
    _bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable
], Switch.prototype, "value", void 0);
Switch = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.templateController)('switch'),
    __param(0, _templating_view_js__WEBPACK_IMPORTED_MODULE_4__.IViewFactory),
    __param(1, _dom_js__WEBPACK_IMPORTED_MODULE_2__.IRenderLocation)
], Switch);

let Case = class Case {
    constructor(factory, locator, location, logger) {
        this.factory = factory;
        this.locator = locator;
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
        this.fallThrough = false;
        this.debug = logger.config.level <= 1 /* debug */;
        this.logger = logger.scopeTo(`${this.constructor.name}-#${this.id}`);
        this.view = this.factory.create().setLocation(location);
    }
    link(flags, parentContext, controller, _childController, _target, _instruction) {
        const switchController = controller.parent;
        const $switch = switchController?.viewModel;
        if ($switch instanceof Switch) {
            this.$switch = $switch;
            this.linkToSwitch($switch);
        }
        else {
            throw new Error('The parent switch not found; only `*[switch] > *[case|default-case]` relation is supported.');
        }
    }
    detaching(initiator, parent, flags) {
        return this.deactivate(initiator, flags);
    }
    isMatch(value, flags) {
        if (this.debug) {
            this.logger.debug('isMatch()');
        }
        const $value = this.value;
        if (Array.isArray($value)) {
            if (this.observer === void 0) {
                this.observer = this.observeCollection(flags, $value);
            }
            return $value.includes(value);
        }
        return $value === value;
    }
    valueChanged(newValue, _oldValue, flags) {
        if (Array.isArray(newValue)) {
            this.observer?.unsubscribe(this);
            this.observer = this.observeCollection(flags, newValue);
        }
        else if (this.observer !== void 0) {
            this.observer.unsubscribe(this);
        }
        this.$switch.caseChanged(this, flags);
    }
    handleCollectionChange(_indexMap, flags) {
        this.$switch.caseChanged(this, flags);
    }
    activate(initiator, flags, scope, hostScope) {
        const view = this.view;
        if (view.isActive) {
            return;
        }
        return view.activate(initiator ?? view, this.$controller, flags, scope, hostScope);
    }
    deactivate(initiator, flags) {
        const view = this.view;
        if (!view.isActive) {
            return;
        }
        return view.deactivate(initiator ?? view, this.$controller, flags);
    }
    dispose() {
        this.observer?.unsubscribe(this);
        this.view?.dispose();
        this.view = (void 0);
    }
    linkToSwitch(auSwitch) {
        auSwitch.cases.push(this);
    }
    observeCollection(flags, $value) {
        const observer = this.locator.getArrayObserver($value);
        observer.subscribe(this);
        return observer;
    }
    accept(visitor) {
        if (this.$controller.accept(visitor) === true) {
            return true;
        }
        return this.view?.accept(visitor);
    }
};
__decorate([
    _bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable
], Case.prototype, "value", void 0);
__decorate([
    (0,_bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable)({
        set: v => {
            switch (v) {
                case 'true': return true;
                case 'false': return false;
                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
                default: return !!v;
            }
        },
        mode: _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.oneTime
    })
], Case.prototype, "fallThrough", void 0);
Case = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.templateController)('case'),
    __param(0, _templating_view_js__WEBPACK_IMPORTED_MODULE_4__.IViewFactory),
    __param(1, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator),
    __param(2, _dom_js__WEBPACK_IMPORTED_MODULE_2__.IRenderLocation),
    __param(3, _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.ILogger)
], Case);

let DefaultCase = class DefaultCase extends Case {
    linkToSwitch($switch) {
        if ($switch.defaultCase !== void 0) {
            throw new Error('Multiple \'default-case\'s are not allowed.');
        }
        $switch.defaultCase = this;
    }
};
DefaultCase = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.templateController)('default-case')
], DefaultCase);

//# sourceMappingURL=switch.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/with.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/template-controllers/with.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "With": () => /* binding */ With
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _templating_view_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../templating/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js");
/* harmony import */ var _custom_attribute_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};






let With = class With {
    constructor(factory, location) {
        this.factory = factory;
        this.location = location;
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
        this.view = this.factory.create().setLocation(location);
    }
    valueChanged(newValue, oldValue, flags) {
        if (this.$controller.isActive) {
            // TODO(fkleuver): add logic to the controller that ensures correct handling of race conditions and add integration tests
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.activateView(this.view, 32 /* fromBind */);
        }
    }
    attaching(initiator, parent, flags) {
        return this.activateView(initiator, flags);
    }
    detaching(initiator, parent, flags) {
        return this.view.deactivate(initiator, this.$controller, flags);
    }
    activateView(initiator, flags) {
        const { $controller, value } = this;
        const scope = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.Scope.fromParent($controller.scope, value === void 0 ? {} : value);
        return this.view.activate(initiator, $controller, flags, scope, $controller.hostScope);
    }
    dispose() {
        this.view.dispose();
        this.view = (void 0);
    }
    accept(visitor) {
        if (this.view?.accept(visitor) === true) {
            return true;
        }
    }
};
__decorate([
    _bindable_js__WEBPACK_IMPORTED_MODULE_5__.bindable
], With.prototype, "value", void 0);
With = __decorate([
    (0,_custom_attribute_js__WEBPACK_IMPORTED_MODULE_4__.templateController)('with'),
    __param(0, _templating_view_js__WEBPACK_IMPORTED_MODULE_3__.IViewFactory),
    __param(1, _dom_js__WEBPACK_IMPORTED_MODULE_2__.IRenderLocation)
], With);

//# sourceMappingURL=with.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/value-converters/sanitize.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/value-converters/sanitize.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ISanitizer": () => /* binding */ ISanitizer,
/* harmony export */   "SanitizeValueConverter": () => /* binding */ SanitizeValueConverter
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


const SCRIPT_REGEX = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
const ISanitizer = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ISanitizer', x => x.singleton(class {
    sanitize(input) {
        return input.replace(SCRIPT_REGEX, '');
    }
}));
/**
 * Simple html sanitization converter to preserve whitelisted elements and attributes on a bound property containing html.
 */
let SanitizeValueConverter = class SanitizeValueConverter {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * Process the provided markup that flows to the view.
     *
     * @param untrustedMarkup - The untrusted markup to be sanitized.
     */
    toView(untrustedMarkup) {
        if (untrustedMarkup == null) {
            return null;
        }
        return this.sanitizer.sanitize(untrustedMarkup);
    }
};
SanitizeValueConverter = __decorate([
    __param(0, ISanitizer)
], SanitizeValueConverter);

(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.valueConverter)('sanitize')(SanitizeValueConverter);
//# sourceMappingURL=sanitize.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/resources/value-converters/view.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/resources/value-converters/view.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ViewValueConverter": () => /* binding */ ViewValueConverter
/* harmony export */ });
/* harmony import */ var _templating_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../templating/view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


let ViewValueConverter = class ViewValueConverter {
    constructor(viewLocator) {
        this.viewLocator = viewLocator;
    }
    toView(object, viewNameOrSelector) {
        return this.viewLocator.getViewComponentForObject(object, viewNameOrSelector);
    }
};
ViewValueConverter = __decorate([
    __param(0, _templating_view_js__WEBPACK_IMPORTED_MODULE_0__.IViewLocator)
], ViewValueConverter);

(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.valueConverter)('view')(ViewValueConverter);
//# sourceMappingURL=view.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/semantic-model.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/semantic-model.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SymbolFlags": () => /* binding */ SymbolFlags,
/* harmony export */   "TemplateControllerSymbol": () => /* binding */ TemplateControllerSymbol,
/* harmony export */   "ProjectionSymbol": () => /* binding */ ProjectionSymbol,
/* harmony export */   "CustomAttributeSymbol": () => /* binding */ CustomAttributeSymbol,
/* harmony export */   "PlainAttributeSymbol": () => /* binding */ PlainAttributeSymbol,
/* harmony export */   "BindingSymbol": () => /* binding */ BindingSymbol,
/* harmony export */   "CustomElementSymbol": () => /* binding */ CustomElementSymbol,
/* harmony export */   "LetElementSymbol": () => /* binding */ LetElementSymbol,
/* harmony export */   "PlainElementSymbol": () => /* binding */ PlainElementSymbol,
/* harmony export */   "TextSymbol": () => /* binding */ TextSymbol,
/* harmony export */   "BindableInfo": () => /* binding */ BindableInfo,
/* harmony export */   "ElementInfo": () => /* binding */ ElementInfo,
/* harmony export */   "AttrInfo": () => /* binding */ AttrInfo
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");


var SymbolFlags;
(function (SymbolFlags) {
    SymbolFlags[SymbolFlags["type"] = 1023] = "type";
    SymbolFlags[SymbolFlags["isTemplateController"] = 1] = "isTemplateController";
    SymbolFlags[SymbolFlags["isProjection"] = 2] = "isProjection";
    SymbolFlags[SymbolFlags["isCustomAttribute"] = 4] = "isCustomAttribute";
    SymbolFlags[SymbolFlags["isPlainAttribute"] = 8] = "isPlainAttribute";
    SymbolFlags[SymbolFlags["isCustomElement"] = 16] = "isCustomElement";
    SymbolFlags[SymbolFlags["isLetElement"] = 32] = "isLetElement";
    SymbolFlags[SymbolFlags["isPlainElement"] = 64] = "isPlainElement";
    SymbolFlags[SymbolFlags["isText"] = 128] = "isText";
    SymbolFlags[SymbolFlags["isBinding"] = 256] = "isBinding";
    SymbolFlags[SymbolFlags["isAuSlot"] = 512] = "isAuSlot";
    SymbolFlags[SymbolFlags["hasMarker"] = 1024] = "hasMarker";
    SymbolFlags[SymbolFlags["hasTemplate"] = 2048] = "hasTemplate";
    SymbolFlags[SymbolFlags["hasAttributes"] = 4096] = "hasAttributes";
    SymbolFlags[SymbolFlags["hasBindings"] = 8192] = "hasBindings";
    SymbolFlags[SymbolFlags["hasChildNodes"] = 16384] = "hasChildNodes";
    SymbolFlags[SymbolFlags["hasProjections"] = 32768] = "hasProjections";
})(SymbolFlags || (SymbolFlags = {}));
function createMarker(p) {
    const marker = p.document.createElement('au-m');
    marker.className = 'au';
    return marker;
}
/**
 * A html attribute that is associated with a registered resource, specifically a template controller.
 */
class TemplateControllerSymbol {
    constructor(p, syntax, info, res = info.name) {
        this.syntax = syntax;
        this.info = info;
        this.res = res;
        this.flags = 1 /* isTemplateController */ | 1024 /* hasMarker */;
        this.physicalNode = null;
        this.template = null;
        this.templateController = null;
        this._bindings = null;
        this.marker = createMarker(p);
    }
    get bindings() {
        if (this._bindings === null) {
            this._bindings = [];
            this.flags |= 8192 /* hasBindings */;
        }
        return this._bindings;
    }
}
class ProjectionSymbol {
    constructor(name, template) {
        this.name = name;
        this.template = template;
        this.flags = 2 /* isProjection */;
    }
}
/**
 * A html attribute that is associated with a registered resource, but not a template controller.
 */
class CustomAttributeSymbol {
    constructor(syntax, info, res = info.name) {
        this.syntax = syntax;
        this.info = info;
        this.res = res;
        this.flags = 4 /* isCustomAttribute */;
        this._bindings = null;
    }
    get bindings() {
        if (this._bindings === null) {
            this._bindings = [];
            this.flags |= 8192 /* hasBindings */;
        }
        return this._bindings;
    }
}
/**
 * An attribute, with either a binding command or an interpolation, whose target is the html
 * attribute of the element.
 *
 * This will never target a bindable property of a custom attribute or element;
 */
class PlainAttributeSymbol {
    constructor(syntax, command, expression) {
        this.syntax = syntax;
        this.command = command;
        this.expression = expression;
        this.flags = 8 /* isPlainAttribute */;
    }
}
/**
 * Either an attribute on an custom element that maps to a declared bindable property of that element,
 * a single-value bound custom attribute, or one of several bindables that were extracted from the attribute
 * value of a custom attribute with multiple bindings usage.
 *
 * This will always target a bindable property of a custom attribute or element;
 */
class BindingSymbol {
    constructor(command, bindable, expression, rawValue, target) {
        this.command = command;
        this.bindable = bindable;
        this.expression = expression;
        this.rawValue = rawValue;
        this.target = target;
        this.flags = 256 /* isBinding */;
    }
}
/**
 * A html element that is associated with a registered resource either via its (lowerCase) `nodeName`
 * or the value of its `as-element` attribute.
 */
class CustomElementSymbol {
    constructor(p, physicalNode, info, res = info.name, bindables = info.bindables) {
        this.physicalNode = physicalNode;
        this.info = info;
        this.res = res;
        this.bindables = bindables;
        this.flags = 16 /* isCustomElement */;
        this.isTarget = true;
        this.templateController = null;
        this._customAttributes = null;
        this._plainAttributes = null;
        this._bindings = null;
        this._childNodes = null;
        this._projections = null;
        if (info.containerless) {
            this.isContainerless = true;
            this.marker = createMarker(p);
            this.flags |= 1024 /* hasMarker */;
        }
        else {
            this.isContainerless = false;
            this.marker = null;
        }
    }
    get customAttributes() {
        if (this._customAttributes === null) {
            this._customAttributes = [];
            this.flags |= 4096 /* hasAttributes */;
        }
        return this._customAttributes;
    }
    get plainAttributes() {
        if (this._plainAttributes === null) {
            this._plainAttributes = [];
            this.flags |= 4096 /* hasAttributes */;
        }
        return this._plainAttributes;
    }
    get bindings() {
        if (this._bindings === null) {
            this._bindings = [];
            this.flags |= 8192 /* hasBindings */;
        }
        return this._bindings;
    }
    get childNodes() {
        if (this._childNodes === null) {
            this._childNodes = [];
            this.flags |= 16384 /* hasChildNodes */;
        }
        return this._childNodes;
    }
    get projections() {
        if (this._projections === null) {
            this._projections = [];
            this.flags |= 32768 /* hasProjections */;
        }
        return this._projections;
    }
}
class LetElementSymbol {
    constructor(p, physicalNode, marker = createMarker(p)) {
        this.physicalNode = physicalNode;
        this.marker = marker;
        this.flags = 32 /* isLetElement */ | 1024 /* hasMarker */;
        this.toBindingContext = false;
        this._bindings = null;
    }
    get bindings() {
        if (this._bindings === null) {
            this._bindings = [];
            this.flags |= 8192 /* hasBindings */;
        }
        return this._bindings;
    }
}
/**
 * A normal html element that may or may not have attribute behaviors and/or child node behaviors.
 *
 * It is possible for a PlainElementSymbol to not yield any instructions during compilation.
 */
class PlainElementSymbol {
    constructor(physicalNode) {
        this.physicalNode = physicalNode;
        this.flags = 64 /* isPlainElement */;
        this.isTarget = false;
        this.templateController = null;
        this.hasSlots = false;
        this._customAttributes = null;
        this._plainAttributes = null;
        this._childNodes = null;
    }
    get customAttributes() {
        if (this._customAttributes === null) {
            this._customAttributes = [];
            this.flags |= 4096 /* hasAttributes */;
        }
        return this._customAttributes;
    }
    get plainAttributes() {
        if (this._plainAttributes === null) {
            this._plainAttributes = [];
            this.flags |= 4096 /* hasAttributes */;
        }
        return this._plainAttributes;
    }
    get childNodes() {
        if (this._childNodes === null) {
            this._childNodes = [];
            this.flags |= 16384 /* hasChildNodes */;
        }
        return this._childNodes;
    }
}
/**
 * A standalone text node that has an interpolation.
 */
class TextSymbol {
    constructor(p, physicalNode, interpolation, marker = createMarker(p)) {
        this.physicalNode = physicalNode;
        this.interpolation = interpolation;
        this.marker = marker;
        this.flags = 128 /* isText */ | 1024 /* hasMarker */;
    }
}
/**
 * A pre-processed piece of information about a defined bindable property on a custom
 * element or attribute, optimized for consumption by the template compiler.
 */
class BindableInfo {
    constructor(
    /**
     * The pre-processed *property* (not attribute) name of the bindable, which is
     * (in order of priority):
     *
     * 1. The `property` from the description (if defined)
     * 2. The name of the property of the bindable itself
     */
    propName, 
    /**
     * The pre-processed (default) bindingMode of the bindable, which is (in order of priority):
     *
     * 1. The `mode` from the bindable (if defined and not bindingMode.default)
     * 2. The `defaultBindingMode` (if it's an attribute, defined, and not bindingMode.default)
     * 3. `bindingMode.toView`
     */
    mode) {
        this.propName = propName;
        this.mode = mode;
    }
}
const elementInfoLookup = new WeakMap();
/**
 * Pre-processed information about a custom element resource, optimized
 * for consumption by the template compiler.
 */
class ElementInfo {
    constructor(name, alias, containerless) {
        this.name = name;
        this.alias = alias;
        this.containerless = containerless;
        /**
         * A lookup of the bindables of this element, indexed by the (pre-processed)
         * attribute names as they would be found in parsed markup.
         */
        this.bindables = Object.create(null);
    }
    static from(def, alias) {
        if (def === null) {
            return null;
        }
        let rec = elementInfoLookup.get(def);
        if (rec === void 0) {
            elementInfoLookup.set(def, rec = Object.create(null));
        }
        let info = rec[alias];
        if (info === void 0) {
            info = rec[alias] = new ElementInfo(def.name, alias === def.name ? void 0 : alias, def.containerless);
            const bindables = def.bindables;
            const defaultBindingMode = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView;
            let bindable;
            let prop;
            let attr;
            let mode;
            for (prop in bindables) {
                bindable = bindables[prop];
                // explicitly provided property name has priority over the implicit property name
                if (bindable.property !== void 0) {
                    prop = bindable.property;
                }
                // explicitly provided attribute name has priority over the derived implicit attribute name
                if (bindable.attribute !== void 0) {
                    attr = bindable.attribute;
                }
                else {
                    // derive the attribute name from the resolved property name
                    attr = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.kebabCase)(prop);
                }
                if (bindable.mode !== void 0 && bindable.mode !== _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.default) {
                    mode = bindable.mode;
                }
                else {
                    mode = defaultBindingMode;
                }
                info.bindables[attr] = new BindableInfo(prop, mode);
            }
        }
        return info;
    }
}
const attrInfoLookup = new WeakMap();
/**
 * Pre-processed information about a custom attribute resource, optimized
 * for consumption by the template compiler.
 */
class AttrInfo {
    constructor(name, alias, isTemplateController, noMultiBindings) {
        this.name = name;
        this.alias = alias;
        this.isTemplateController = isTemplateController;
        this.noMultiBindings = noMultiBindings;
        /**
         * A lookup of the bindables of this attribute, indexed by the (pre-processed)
         * bindable names as they would be found in the attribute value.
         *
         * Only applicable to multi attribute bindings (semicolon-separated).
         */
        this.bindables = Object.create(null);
        /**
         * The single or first bindable of this attribute, or a default 'value'
         * bindable if no bindables were defined on the attribute.
         *
         * Only applicable to single attribute bindings (where the attribute value
         * contains no semicolons)
         */
        this.bindable = null;
    }
    static from(def, alias) {
        if (def === null) {
            return null;
        }
        let rec = attrInfoLookup.get(def);
        if (rec === void 0) {
            attrInfoLookup.set(def, rec = Object.create(null));
        }
        let info = rec[alias];
        if (info === void 0) {
            info = rec[alias] = new AttrInfo(def.name, alias === def.name ? void 0 : alias, def.isTemplateController, def.noMultiBindings);
            const bindables = def.bindables;
            const defaultBindingMode = def.defaultBindingMode !== void 0 && def.defaultBindingMode !== _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.default
                ? def.defaultBindingMode
                : _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView;
            let bindable;
            let prop;
            let mode;
            let hasPrimary = false;
            let isPrimary = false;
            let bindableInfo;
            for (prop in bindables) {
                bindable = bindables[prop];
                // explicitly provided property name has priority over the implicit property name
                if (bindable.property !== void 0) {
                    prop = bindable.property;
                }
                if (bindable.mode !== void 0 && bindable.mode !== _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.default) {
                    mode = bindable.mode;
                }
                else {
                    mode = defaultBindingMode;
                }
                isPrimary = bindable.primary === true;
                bindableInfo = info.bindables[prop] = new BindableInfo(prop, mode);
                if (isPrimary) {
                    if (hasPrimary) {
                        throw new Error('primary already exists');
                    }
                    hasPrimary = true;
                    info.bindable = bindableInfo;
                }
                // set to first bindable by convention
                if (info.bindable === null) {
                    info.bindable = bindableInfo;
                }
            }
            // if no bindables are present, default to "value"
            if (info.bindable === null) {
                info.bindable = new BindableInfo('value', defaultBindingMode);
            }
        }
        return info;
    }
}
//# sourceMappingURL=semantic-model.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/template-binder.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/template-binder.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TemplateBinder": () => /* binding */ TemplateBinder
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resources/binding-command.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/binding-command.js");
/* harmony import */ var _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resources/custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
/* harmony import */ var _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./semantic-model.js */ "./node_modules/@aurelia/runtime-html/dist/esm/semantic-model.js");






const invalidSurrogateAttribute = Object.assign(Object.create(null), {
    'id': true,
    'au-slot': true,
});
const attributesToIgnore = Object.assign(Object.create(null), {
    'as-element': true,
});
function hasInlineBindings(rawValue) {
    const len = rawValue.length;
    let ch = 0;
    for (let i = 0; i < len; ++i) {
        ch = rawValue.charCodeAt(i);
        if (ch === 92 /* Backslash */) {
            ++i;
            // Ignore whatever comes next because it's escaped
        }
        else if (ch === 58 /* Colon */) {
            return true;
        }
        else if (ch === 36 /* Dollar */ && rawValue.charCodeAt(i + 1) === 123 /* OpenBrace */) {
            return false;
        }
    }
    return false;
}
function processInterpolationText(symbol) {
    const node = symbol.physicalNode;
    const parentNode = node.parentNode;
    while (node.nextSibling !== null && node.nextSibling.nodeType === 3 /* Text */) {
        parentNode.removeChild(node.nextSibling);
    }
    node.textContent = '';
    parentNode.insertBefore(symbol.marker, node);
}
function isTemplateControllerOf(proxy, manifest) {
    return proxy !== manifest;
}
/**
 * A (temporary) standalone function that purely does the DOM processing (lifting) related to template controllers.
 * It's a first refactoring step towards separating DOM parsing/binding from mutations.
 */
function processTemplateControllers(p, manifestProxy, manifest) {
    const manifestNode = manifest.physicalNode;
    let current = manifestProxy;
    let currentTemplate;
    while (isTemplateControllerOf(current, manifest)) {
        if (current.template === manifest) {
            // the DOM linkage is still in its original state here so we can safely assume the parentNode is non-null
            manifestNode.parentNode.replaceChild(current.marker, manifestNode);
            // if the manifest is a template element (e.g. <template repeat.for="...">) then we can skip one lift operation
            // and simply use the template directly, saving a bit of work
            if (manifestNode.nodeName === 'TEMPLATE') {
                current.physicalNode = manifestNode;
                // the template could safely stay without affecting anything visible, but let's keep the DOM tidy
                manifestNode.remove();
            }
            else {
                // the manifest is not a template element so we need to wrap it in one
                currentTemplate = current.physicalNode = p.document.createElement('template');
                currentTemplate.content.appendChild(manifestNode);
            }
        }
        else {
            currentTemplate = current.physicalNode = p.document.createElement('template');
            currentTemplate.content.appendChild(current.marker);
        }
        manifestNode.removeAttribute(current.syntax.rawName);
        current = current.template;
    }
}
/**
 * TemplateBinder. Todo: describe goal of this class
 */
class TemplateBinder {
    constructor(platform, container, attrParser, exprParser, attrSyntaxTransformer) {
        this.platform = platform;
        this.container = container;
        this.attrParser = attrParser;
        this.exprParser = exprParser;
        this.attrSyntaxTransformer = attrSyntaxTransformer;
        this.commandLookup = Object.create(null);
    }
    bind(node) {
        const surrogate = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.PlainElementSymbol(node);
        const attrSyntaxTransformer = this.attrSyntaxTransformer;
        const attributes = node.attributes;
        let i = 0;
        while (i < attributes.length) {
            const attr = attributes[i];
            const attrSyntax = this.attrParser.parse(attr.name, attr.value);
            if (invalidSurrogateAttribute[attrSyntax.target] === true) {
                throw new Error(`Invalid surrogate attribute: ${attrSyntax.target}`);
                // TODO: use reporter
            }
            const bindingCommand = this.getBindingCommand(attrSyntax, true);
            if (bindingCommand === null || (bindingCommand.bindingType & 4096 /* IgnoreCustomAttr */) === 0) {
                const attrInfo = _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.AttrInfo.from(this.container.find(_resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.CustomAttribute, attrSyntax.target), attrSyntax.target);
                if (attrInfo === null) {
                    // map special html attributes to their corresponding properties
                    attrSyntaxTransformer.transform(node, attrSyntax);
                    // it's not a custom attribute but might be a regular bound attribute or interpolation (it might also be nothing)
                    this.bindPlainAttribute(
                    /* attrSyntax */ attrSyntax, 
                    /* attr       */ attr, 
                    /* surrogate  */ surrogate, 
                    /* manifest   */ surrogate);
                }
                else if (attrInfo.isTemplateController) {
                    throw new Error('Cannot have template controller on surrogate element.');
                    // TODO: use reporter
                }
                else {
                    this.bindCustomAttribute(
                    /* attrSyntax */ attrSyntax, 
                    /* attrInfo   */ attrInfo, 
                    /* command    */ bindingCommand, 
                    /* manifest   */ surrogate);
                }
            }
            else {
                // map special html attributes to their corresponding properties
                attrSyntaxTransformer.transform(node, attrSyntax);
                // it's not a custom attribute but might be a regular bound attribute or interpolation (it might also be nothing)
                this.bindPlainAttribute(
                /* attrSyntax */ attrSyntax, 
                /* attr       */ attr, 
                /* surrogate  */ surrogate, 
                /* manifest   */ surrogate);
            }
            ++i;
        }
        this.bindChildNodes(
        /* node               */ node, 
        /* surrogate          */ surrogate, 
        /* manifest           */ surrogate, 
        /* manifestRoot       */ null, 
        /* parentManifestRoot */ null);
        return surrogate;
    }
    bindManifest(parentManifest, node, surrogate, manifest, manifestRoot, parentManifestRoot) {
        let isAuSlot = false;
        switch (node.nodeName) {
            case 'LET':
                // let cannot have children and has some different processing rules, so return early
                this.bindLetElement(
                /* parentManifest */ parentManifest, 
                /* node           */ node);
                return;
            case 'SLOT':
                surrogate.hasSlots = true;
                break;
            case 'AU-SLOT':
                isAuSlot = true;
                break;
        }
        let name = node.getAttribute('as-element');
        if (name === null) {
            name = node.nodeName.toLowerCase();
        }
        const elementInfo = _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.ElementInfo.from(this.container.find(_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement, name), name);
        if (elementInfo === null) {
            // there is no registered custom element with this name
            manifest = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.PlainElementSymbol(node);
        }
        else {
            // it's a custom element so we set the manifestRoot as well (for storing replaces)
            parentManifestRoot = manifestRoot;
            const ceSymbol = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.CustomElementSymbol(this.platform, node, elementInfo);
            if (isAuSlot) {
                ceSymbol.flags = 512 /* isAuSlot */;
                ceSymbol.slotName = node.getAttribute("name") ?? "default";
            }
            manifestRoot = manifest = ceSymbol;
        }
        // lifting operations done by template controllers and replaces effectively unlink the nodes, so start at the bottom
        this.bindChildNodes(
        /* node               */ node, 
        /* surrogate          */ surrogate, 
        /* manifest           */ manifest, 
        /* manifestRoot       */ manifestRoot, 
        /* parentManifestRoot */ parentManifestRoot);
        // the parentManifest will receive either the direct child nodes, or the template controllers / replaces
        // wrapping them
        this.bindAttributes(
        /* node               */ node, 
        /* parentManifest     */ parentManifest, 
        /* surrogate          */ surrogate, 
        /* manifest           */ manifest, 
        /* manifestRoot       */ manifestRoot, 
        /* parentManifestRoot */ parentManifestRoot);
        if (manifestRoot === manifest && manifest.isContainerless) {
            node.parentNode.replaceChild(manifest.marker, node);
        }
        else if (manifest.isTarget) {
            node.classList.add('au');
        }
    }
    bindLetElement(parentManifest, node) {
        const symbol = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.LetElementSymbol(this.platform, node);
        parentManifest.childNodes.push(symbol);
        const attributes = node.attributes;
        let i = 0;
        while (i < attributes.length) {
            const attr = attributes[i];
            if (attr.name === 'to-binding-context') {
                node.removeAttribute('to-binding-context');
                symbol.toBindingContext = true;
                continue;
            }
            const attrSyntax = this.attrParser.parse(attr.name, attr.value);
            const command = this.getBindingCommand(attrSyntax, false);
            const bindingType = command === null ? 2048 /* Interpolation */ : command.bindingType;
            const expr = this.exprParser.parse(attrSyntax.rawValue, bindingType);
            const to = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.camelCase)(attrSyntax.target);
            const info = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.BindableInfo(to, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView);
            symbol.bindings.push(new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.BindingSymbol(command, info, expr, attrSyntax.rawValue, to));
            ++i;
        }
        node.parentNode.replaceChild(symbol.marker, node);
    }
    bindAttributes(node, parentManifest, surrogate, manifest, manifestRoot, parentManifestRoot) {
        // This is the top-level symbol for the current depth.
        // If there are no template controllers or replaces, it is always the manifest itself.
        // If there are template controllers, then this will be the outer-most TemplateControllerSymbol.
        let manifestProxy = manifest;
        let previousController = (void 0);
        let currentController = (void 0);
        const attributes = node.attributes;
        let i = 0;
        while (i < attributes.length) {
            const attr = attributes[i];
            ++i;
            if (attributesToIgnore[attr.name] === true) {
                continue;
            }
            const attrSyntax = this.attrParser.parse(attr.name, attr.value);
            const bindingCommand = this.getBindingCommand(attrSyntax, true);
            if (bindingCommand === null || (bindingCommand.bindingType & 4096 /* IgnoreCustomAttr */) === 0) {
                const attrInfo = _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.AttrInfo.from(this.container.find(_resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_3__.CustomAttribute, attrSyntax.target), attrSyntax.target);
                if (attrInfo === null) {
                    // map special html attributes to their corresponding properties
                    this.attrSyntaxTransformer.transform(node, attrSyntax);
                    // it's not a custom attribute but might be a regular bound attribute or interpolation (it might also be nothing)
                    this.bindPlainAttribute(
                    /* attrSyntax */ attrSyntax, 
                    /* attr       */ attr, 
                    /* surrogate  */ surrogate, 
                    /* manifest   */ manifest);
                }
                else if (attrInfo.isTemplateController) {
                    // the manifest is wrapped by the inner-most template controller (if there are multiple on the same element)
                    // so keep setting manifest.templateController to the latest template controller we find
                    currentController = manifest.templateController = this.declareTemplateController(
                    /* attrSyntax */ attrSyntax, 
                    /* attrInfo   */ attrInfo);
                    // the proxy and the manifest are only identical when we're at the first template controller (since the controller
                    // is assigned to the proxy), so this evaluates to true at most once per node
                    if (manifestProxy === manifest) {
                        currentController.template = manifest;
                        manifestProxy = currentController;
                    }
                    else {
                        currentController.templateController = previousController;
                        currentController.template = previousController.template;
                        previousController.template = currentController;
                    }
                    previousController = currentController;
                }
                else {
                    // a regular custom attribute
                    this.bindCustomAttribute(
                    /* attrSyntax */ attrSyntax, 
                    /* attrInfo   */ attrInfo, 
                    /* command    */ bindingCommand, 
                    /* manifest   */ manifest);
                }
            }
            else {
                // map special html attributes to their corresponding properties
                this.attrSyntaxTransformer.transform(node, attrSyntax);
                // it's not a custom attribute but might be a regular bound attribute or interpolation (it might also be nothing)
                this.bindPlainAttribute(
                /* attrSyntax */ attrSyntax, 
                /* attr       */ attr, 
                /* surrogate  */ surrogate, 
                /* manifest   */ manifest);
            }
        }
        if (node.tagName === 'INPUT') {
            const type = node.type;
            if (type === 'checkbox' || type === 'radio') {
                this.ensureAttributeOrder(manifest);
            }
        }
        let projection = node.getAttribute('au-slot');
        if (projection === '') {
            projection = 'default';
        }
        const hasProjection = projection !== null;
        if (hasProjection && isTemplateControllerOf(manifestProxy, manifest)) {
            // prevents <some-el au-slot TEMPLATE.CONTROLLER></some-el>.
            throw new Error(`Unsupported usage of [au-slot="${projection}"] along with a template controller (if, else, repeat.for etc.) found (example: <some-el au-slot if.bind="true"></some-el>).`);
            /**
             * TODO: prevent <template TEMPLATE.CONTROLLER><some-el au-slot></some-el></template>.
             * But there is not easy way for now, as the attribute binding is done after binding the child nodes.
             * This means by the time the template controller in the ancestor is processed, the projection is already registered.
             */
        }
        const parentName = node.parentNode?.nodeName.toLowerCase();
        if (hasProjection
            && (manifestRoot === null
                || parentName === void 0
                || this.container.find(_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement, parentName) === null)) {
            /**
             * Prevents the following cases:
             * - <template><div au-slot></div></template>
             * - <my-ce><div><div au-slot></div></div></my-ce>
             * - <my-ce><div au-slot="s1"><div au-slot="s2"></div></div></my-ce>
             */
            throw new Error(`Unsupported usage of [au-slot="${projection}"]. It seems that projection is attempted, but not for a custom element.`);
        }
        processTemplateControllers(this.platform, manifestProxy, manifest);
        const projectionOwner = manifest === manifestRoot ? parentManifestRoot : manifestRoot;
        if (!hasProjection || projectionOwner === null) {
            // the proxy is either the manifest itself or the outer-most controller; add it directly to the parent
            parentManifest.childNodes.push(manifestProxy);
        }
        else if (hasProjection) {
            projectionOwner.projections.push(new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.ProjectionSymbol(projection, manifestProxy));
            node.removeAttribute('au-slot');
            node.remove();
        }
    }
    // TODO: refactor to use render priority slots (this logic shouldn't be in the template binder)
    ensureAttributeOrder(manifest) {
        // swap the order of checked and model/value attribute, so that the required observers are prepared for checked-observer
        const attributes = manifest.plainAttributes;
        let modelOrValueIndex = void 0;
        let checkedIndex = void 0;
        let found = 0;
        for (let i = 0; i < attributes.length && found < 3; i++) {
            switch (attributes[i].syntax.target) {
                case 'model':
                case 'value':
                case 'matcher':
                    modelOrValueIndex = i;
                    found++;
                    break;
                case 'checked':
                    checkedIndex = i;
                    found++;
                    break;
            }
        }
        if (checkedIndex !== void 0 && modelOrValueIndex !== void 0 && checkedIndex < modelOrValueIndex) {
            [attributes[modelOrValueIndex], attributes[checkedIndex]] = [attributes[checkedIndex], attributes[modelOrValueIndex]];
        }
    }
    bindChildNodes(node, surrogate, manifest, manifestRoot, parentManifestRoot) {
        let childNode;
        if (node.nodeName === 'TEMPLATE') {
            childNode = node.content.firstChild;
        }
        else {
            childNode = node.firstChild;
        }
        let nextChild;
        while (childNode !== null) {
            switch (childNode.nodeType) {
                case 1 /* Element */:
                    nextChild = childNode.nextSibling;
                    this.bindManifest(
                    /* parentManifest     */ manifest, 
                    /* node               */ childNode, 
                    /* surrogate          */ surrogate, 
                    /* manifest           */ manifest, 
                    /* manifestRoot       */ manifestRoot, 
                    /* parentManifestRoot */ parentManifestRoot);
                    childNode = nextChild;
                    break;
                case 3 /* Text */:
                    childNode = this.bindText(
                    /* textNode */ childNode, 
                    /* manifest */ manifest).nextSibling;
                    break;
                case 4 /* CDATASection */:
                case 7 /* ProcessingInstruction */:
                case 8 /* Comment */:
                case 10 /* DocumentType */:
                    childNode = childNode.nextSibling;
                    break;
                case 9 /* Document */:
                case 11 /* DocumentFragment */:
                    childNode = childNode.firstChild;
            }
        }
    }
    bindText(textNode, manifest) {
        const interpolation = this.exprParser.parse(textNode.wholeText, 2048 /* Interpolation */);
        if (interpolation !== null) {
            const symbol = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.TextSymbol(this.platform, textNode, interpolation);
            manifest.childNodes.push(symbol);
            processInterpolationText(symbol);
        }
        let next = textNode;
        while (next.nextSibling !== null && next.nextSibling.nodeType === 3 /* Text */) {
            next = next.nextSibling;
        }
        return next;
    }
    declareTemplateController(attrSyntax, attrInfo) {
        let symbol;
        const attrRawValue = attrSyntax.rawValue;
        const command = this.getBindingCommand(attrSyntax, false);
        // multi-bindings logic here is similar to (and explained in) bindCustomAttribute
        const isMultiBindings = attrInfo.noMultiBindings === false && command === null && hasInlineBindings(attrRawValue);
        if (isMultiBindings) {
            symbol = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.TemplateControllerSymbol(this.platform, attrSyntax, attrInfo);
            this.bindMultiAttribute(symbol, attrInfo, attrRawValue);
        }
        else {
            symbol = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.TemplateControllerSymbol(this.platform, attrSyntax, attrInfo);
            const bindingType = command === null ? 2048 /* Interpolation */ : command.bindingType;
            const expr = this.exprParser.parse(attrRawValue, bindingType);
            symbol.bindings.push(new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.BindingSymbol(command, attrInfo.bindable, expr, attrRawValue, attrSyntax.target));
        }
        return symbol;
    }
    bindCustomAttribute(attrSyntax, attrInfo, command, manifest) {
        let symbol;
        const attrRawValue = attrSyntax.rawValue;
        // Custom attributes are always in multiple binding mode,
        // except when they can't be
        // When they cannot be:
        //        * has explicit configuration noMultiBindings: false
        //        * has binding command, ie: <div my-attr.bind="...">.
        //          In this scenario, the value of the custom attributes is required to be a valid expression
        //        * has no colon: ie: <div my-attr="abcd">
        //          In this scenario, it's simply invalid syntax. Consider style attribute rule-value pair: <div style="rule: ruleValue">
        const isMultiBindings = attrInfo.noMultiBindings === false && command === null && hasInlineBindings(attrRawValue);
        if (isMultiBindings) {
            // a multiple-bindings attribute usage (semicolon separated binding) is only valid without a binding command;
            // the binding commands must be declared in each of the property bindings
            symbol = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.CustomAttributeSymbol(attrSyntax, attrInfo);
            this.bindMultiAttribute(symbol, attrInfo, attrRawValue);
        }
        else {
            symbol = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.CustomAttributeSymbol(attrSyntax, attrInfo);
            const bindingType = command === null ? 2048 /* Interpolation */ : command.bindingType;
            const expr = this.exprParser.parse(attrRawValue, bindingType);
            symbol.bindings.push(new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.BindingSymbol(command, attrInfo.bindable, expr, attrRawValue, attrSyntax.target));
        }
        manifest.customAttributes.push(symbol);
        manifest.isTarget = true;
    }
    bindMultiAttribute(symbol, attrInfo, value) {
        const bindables = attrInfo.bindables;
        const valueLength = value.length;
        let attrName = void 0;
        let attrValue = void 0;
        let start = 0;
        let ch = 0;
        for (let i = 0; i < valueLength; ++i) {
            ch = value.charCodeAt(i);
            if (ch === 92 /* Backslash */) {
                ++i;
                // Ignore whatever comes next because it's escaped
            }
            else if (ch === 58 /* Colon */) {
                attrName = value.slice(start, i);
                // Skip whitespace after colon
                while (value.charCodeAt(++i) <= 32 /* Space */)
                    ;
                start = i;
                for (; i < valueLength; ++i) {
                    ch = value.charCodeAt(i);
                    if (ch === 92 /* Backslash */) {
                        ++i;
                        // Ignore whatever comes next because it's escaped
                    }
                    else if (ch === 59 /* Semicolon */) {
                        attrValue = value.slice(start, i);
                        break;
                    }
                }
                if (attrValue === void 0) {
                    // No semicolon found, so just grab the rest of the value
                    attrValue = value.slice(start);
                }
                const attrSyntax = this.attrParser.parse(attrName, attrValue);
                const attrTarget = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.camelCase)(attrSyntax.target);
                const command = this.getBindingCommand(attrSyntax, false);
                const bindingType = command === null ? 2048 /* Interpolation */ : command.bindingType;
                const expr = this.exprParser.parse(attrValue, bindingType);
                let bindable = bindables[attrTarget];
                if (bindable === undefined) {
                    // everything in a multi-bindings expression must be used,
                    // so if it's not a bindable then we create one on the spot
                    bindable = bindables[attrTarget] = new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.BindableInfo(attrTarget, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView);
                }
                symbol.bindings.push(new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.BindingSymbol(command, bindable, expr, attrValue, attrTarget));
                // Skip whitespace after semicolon
                while (i < valueLength && value.charCodeAt(++i) <= 32 /* Space */)
                    ;
                start = i;
                attrName = void 0;
                attrValue = void 0;
            }
        }
    }
    bindPlainAttribute(attrSyntax, attr, surrogate, manifest) {
        const command = this.getBindingCommand(attrSyntax, false);
        const bindingType = command === null ? 2048 /* Interpolation */ : command.bindingType;
        const attrTarget = attrSyntax.target;
        const attrRawValue = attrSyntax.rawValue;
        let expr;
        if (attrRawValue.length === 0
            && (bindingType & 53 /* BindCommand */ | 49 /* OneTimeCommand */ | 50 /* ToViewCommand */ | 52 /* TwoWayCommand */) > 0) {
            if ((bindingType & 53 /* BindCommand */ | 49 /* OneTimeCommand */ | 50 /* ToViewCommand */ | 52 /* TwoWayCommand */) > 0) {
                // Default to the name of the attr for empty binding commands
                expr = this.exprParser.parse((0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.camelCase)(attrTarget), bindingType);
            }
            else {
                return;
            }
        }
        else {
            expr = this.exprParser.parse(attrRawValue, bindingType);
        }
        if ((manifest.flags & 16 /* isCustomElement */) > 0) {
            const bindable = manifest.bindables[attrTarget];
            if (bindable != null) {
                // if the attribute name matches a bindable property name, add it regardless of whether it's a command, interpolation, or just a plain string;
                // the template compiler will translate it to the correct instruction
                manifest.bindings.push(new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.BindingSymbol(command, bindable, expr, attrRawValue, attrTarget));
                manifest.isTarget = true;
            }
            else if (expr != null) {
                // if it does not map to a bindable, only add it if we were able to parse an expression (either a command or interpolation)
                manifest.plainAttributes.push(new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.PlainAttributeSymbol(attrSyntax, command, expr));
                manifest.isTarget = true;
            }
        }
        else if (expr != null) {
            // either a binding command, an interpolation, or a ref
            manifest.plainAttributes.push(new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.PlainAttributeSymbol(attrSyntax, command, expr));
            manifest.isTarget = true;
        }
        else if (manifest === surrogate) {
            // any attributes, even if they are plain (no command/interpolation etc), should be added if they
            // are on the surrogate element
            manifest.plainAttributes.push(new _semantic_model_js__WEBPACK_IMPORTED_MODULE_5__.PlainAttributeSymbol(attrSyntax, command, expr));
        }
        if (command == null && expr != null) {
            // if it's an interpolation, clear the attribute value
            attr.value = '';
        }
    }
    /**
     * Retrieve a binding command resource.
     *
     * @param name - The parsed `AttrSyntax`
     *
     * @returns An instance of the command if it exists, or `null` if it does not exist.
     */
    getBindingCommand(syntax, optional) {
        const name = syntax.command;
        if (name === null) {
            return null;
        }
        let result = this.commandLookup[name];
        if (result === void 0) {
            result = this.container.create(_resources_binding_command_js__WEBPACK_IMPORTED_MODULE_2__.BindingCommand, name);
            if (result === null) {
                if (optional) {
                    return null;
                }
                throw new Error(`Unknown binding command: ${name}`);
            }
            this.commandLookup[name] = result;
        }
        return result;
    }
}
//# sourceMappingURL=template-binder.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/template-compiler.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/template-compiler.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TemplateCompiler": () => /* binding */ TemplateCompiler
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _attribute_syntax_transformer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./attribute-syntax-transformer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/attribute-syntax-transformer.js");
/* harmony import */ var _template_binder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./template-binder.js */ "./node_modules/@aurelia/runtime-html/dist/esm/template-binder.js");
/* harmony import */ var _template_element_factory_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./template-element-factory.js */ "./node_modules/@aurelia/runtime-html/dist/esm/template-element-factory.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./renderer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/renderer.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _bindable_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bindable.js */ "./node_modules/@aurelia/runtime-html/dist/esm/bindable.js");
/* harmony import */ var _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./resources/attribute-pattern.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/attribute-pattern.js");
/* harmony import */ var _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./resources/custom-elements/au-slot.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-elements/au-slot.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};











class CustomElementCompilationUnit {
    constructor(partialDefinition, surrogate, template) {
        this.partialDefinition = partialDefinition;
        this.surrogate = surrogate;
        this.template = template;
        this.instructions = [];
        this.surrogates = [];
        this.projectionsMap = new Map();
    }
    toDefinition() {
        const def = this.partialDefinition;
        return _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElementDefinition.create({
            ...def,
            instructions: (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(def.instructions, this.instructions),
            surrogates: (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(def.surrogates, this.surrogates),
            template: this.template,
            needsCompile: false,
            hasSlots: this.surrogate.hasSlots,
            projectionsMap: this.projectionsMap,
        });
    }
}
var LocalTemplateBindableAttributes;
(function (LocalTemplateBindableAttributes) {
    LocalTemplateBindableAttributes["property"] = "property";
    LocalTemplateBindableAttributes["attribute"] = "attribute";
    LocalTemplateBindableAttributes["mode"] = "mode";
})(LocalTemplateBindableAttributes || (LocalTemplateBindableAttributes = {}));
const allowedLocalTemplateBindableAttributes = Object.freeze([
    "property" /* property */,
    "attribute" /* attribute */,
    "mode" /* mode */
]);
const localTemplateIdentifier = 'as-custom-element';
/**
 * Default (runtime-agnostic) implementation for `ITemplateCompiler`.
 *
 * @internal
 */
let TemplateCompiler = class TemplateCompiler {
    constructor(factory, attrParser, exprParser, attrSyntaxModifier, logger, p) {
        this.factory = factory;
        this.attrParser = attrParser;
        this.exprParser = exprParser;
        this.attrSyntaxModifier = attrSyntaxModifier;
        this.p = p;
        this.logger = logger.scopeTo('TemplateCompiler');
    }
    get name() {
        return 'default';
    }
    static register(container) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.singleton(_renderer_js__WEBPACK_IMPORTED_MODULE_5__.ITemplateCompiler, this).register(container);
    }
    compile(partialDefinition, context, targetedProjections) {
        const definition = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElementDefinition.getOrCreate(partialDefinition);
        if (definition.template === null || definition.template === void 0) {
            return definition;
        }
        const { attrParser, exprParser, attrSyntaxModifier, factory } = this;
        const p = context.get(_platform_js__WEBPACK_IMPORTED_MODULE_6__.IPlatform);
        const binder = new _template_binder_js__WEBPACK_IMPORTED_MODULE_3__.TemplateBinder(p, context, attrParser, exprParser, attrSyntaxModifier);
        const template = definition.enhance === true
            ? definition.template
            : factory.createTemplate(definition.template);
        processLocalTemplates(template, definition, context, p, this.logger);
        const surrogate = binder.bind(template);
        const compilation = this.compilation = new CustomElementCompilationUnit(definition, surrogate, template);
        const customAttributes = surrogate.customAttributes;
        const plainAttributes = surrogate.plainAttributes;
        const customAttributeLength = customAttributes.length;
        const plainAttributeLength = plainAttributes.length;
        if (customAttributeLength + plainAttributeLength > 0) {
            let offset = 0;
            for (let i = 0; customAttributeLength > i; ++i) {
                compilation.surrogates[offset] = this.compileCustomAttribute(customAttributes[i]);
                offset++;
            }
            for (let i = 0; i < plainAttributeLength; ++i) {
                compilation.surrogates[offset] = this.compilePlainAttribute(plainAttributes[i], true);
                offset++;
            }
        }
        this.compileChildNodes(surrogate, compilation.instructions, compilation.projectionsMap, targetedProjections);
        const compiledDefinition = compilation.toDefinition();
        this.compilation = null;
        return compiledDefinition;
    }
    compileChildNodes(parent, instructionRows, projections, targetedProjections) {
        if ((parent.flags & 16384 /* hasChildNodes */) > 0) {
            const childNodes = parent.childNodes;
            const ii = childNodes.length;
            let childNode;
            for (let i = 0; i < ii; ++i) {
                childNode = childNodes[i];
                if ((childNode.flags & 128 /* isText */) > 0) {
                    instructionRows.push([new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.TextBindingInstruction(childNode.interpolation)]);
                }
                else if ((childNode.flags & 32 /* isLetElement */) > 0) {
                    const bindings = childNode.bindings;
                    const instructions = [];
                    let binding;
                    const jj = bindings.length;
                    for (let j = 0; j < jj; ++j) {
                        binding = bindings[j];
                        instructions[j] = new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.LetBindingInstruction(binding.expression, binding.target);
                    }
                    instructionRows.push([new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.HydrateLetElementInstruction(instructions, childNode.toBindingContext)]);
                }
                else {
                    this.compileParentNode(childNode, instructionRows, projections, targetedProjections);
                }
            }
        }
    }
    compileCustomElement(symbol, instructionRows, projections, targetedProjections) {
        const isAuSlot = (symbol.flags & 512 /* isAuSlot */) > 0;
        // offset 1 to leave a spot for the hydrate instruction so we don't need to create 2 arrays with a spread etc
        const instructionRow = this.compileAttributes(symbol, 1);
        const slotName = symbol.slotName;
        let slotInfo = null;
        if (isAuSlot) {
            const targetedProjection = targetedProjections?.projections?.[slotName];
            slotInfo = targetedProjection !== void 0
                ? new _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_9__.SlotInfo(slotName, _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_9__.AuSlotContentType.Projection, new _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_9__.ProjectionContext(targetedProjection, targetedProjections?.scope))
                : new _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_9__.SlotInfo(slotName, _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_9__.AuSlotContentType.Fallback, new _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_9__.ProjectionContext(this.compileProjectionFallback(symbol, projections, targetedProjections)));
        }
        const instruction = instructionRow[0] = new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.HydrateElementInstruction(symbol.res, symbol.info.alias, this.compileBindings(symbol), slotInfo);
        const compiledProjections = this.compileProjections(symbol, projections, targetedProjections);
        if (compiledProjections !== null) {
            projections.set(instruction, compiledProjections);
        }
        instructionRows.push(instructionRow);
        if (!isAuSlot) {
            this.compileChildNodes(symbol, instructionRows, projections, targetedProjections);
        }
    }
    compilePlainElement(symbol, instructionRows, projections, targetedProjections) {
        const attributes = this.compileAttributes(symbol, 0);
        if (attributes.length > 0) {
            instructionRows.push(attributes);
        }
        this.compileChildNodes(symbol, instructionRows, projections, targetedProjections);
    }
    compileParentNode(symbol, instructionRows, projections, targetedProjections) {
        switch (symbol.flags & 1023 /* type */) {
            case 16 /* isCustomElement */:
            case 512 /* isAuSlot */:
                this.compileCustomElement(symbol, instructionRows, projections, targetedProjections);
                break;
            case 64 /* isPlainElement */:
                this.compilePlainElement(symbol, instructionRows, projections, targetedProjections);
                break;
            case 1 /* isTemplateController */:
                this.compileTemplateController(symbol, instructionRows, projections, targetedProjections);
        }
    }
    compileTemplateController(symbol, instructionRows, projections, targetedProjections) {
        const bindings = this.compileBindings(symbol);
        const controllerInstructionRows = [];
        this.compileParentNode(symbol.template, controllerInstructionRows, projections, targetedProjections);
        const def = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElementDefinition.create({
            name: symbol.info.alias ?? symbol.info.name,
            template: symbol.physicalNode,
            instructions: controllerInstructionRows,
            needsCompile: false,
        });
        instructionRows.push([new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.HydrateTemplateController(def, symbol.res, symbol.info.alias, bindings)]);
    }
    compileBindings(symbol) {
        let bindingInstructions;
        if ((symbol.flags & 8192 /* hasBindings */) > 0) {
            // either a custom element with bindings, a custom attribute / template controller with dynamic options,
            // or a single value custom attribute binding
            const { bindings } = symbol;
            const len = bindings.length;
            bindingInstructions = Array(len);
            let i = 0;
            for (; i < len; ++i) {
                bindingInstructions[i] = this.compileBinding(bindings[i]);
            }
        }
        else {
            bindingInstructions = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
        }
        return bindingInstructions;
    }
    compileBinding(symbol) {
        if (symbol.command === null) {
            // either an interpolation or a normal string value assigned to an element or attribute binding
            if (symbol.expression === null) {
                // the template binder already filtered out non-bindables, so we know we need a setProperty here
                return new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.SetPropertyInstruction(symbol.rawValue, symbol.bindable.propName);
            }
            else {
                // either an element binding interpolation or a dynamic options attribute binding interpolation
                return new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.InterpolationInstruction(symbol.expression, symbol.bindable.propName);
            }
        }
        else {
            // either an element binding command, dynamic options attribute binding command,
            // or custom attribute / template controller (single value) binding command
            return symbol.command.compile(symbol);
        }
    }
    compileAttributes(symbol, offset) {
        let attributeInstructions;
        if ((symbol.flags & 4096 /* hasAttributes */) > 0) {
            // any attributes on a custom element (which are not bindables) or a plain element
            const customAttributes = symbol.customAttributes;
            const plainAttributes = symbol.plainAttributes;
            const customAttributeLength = customAttributes.length;
            const plainAttributesLength = plainAttributes.length;
            attributeInstructions = Array(offset + customAttributeLength + plainAttributesLength);
            for (let i = 0; customAttributeLength > i; ++i) {
                attributeInstructions[offset] = this.compileCustomAttribute(customAttributes[i]);
                offset++;
            }
            for (let i = 0; plainAttributesLength > i; ++i) {
                attributeInstructions[offset] = this.compilePlainAttribute(plainAttributes[i], false);
                offset++;
            }
        }
        else if (offset > 0) {
            attributeInstructions = Array(offset);
        }
        else {
            attributeInstructions = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
        }
        return attributeInstructions;
    }
    compileCustomAttribute(symbol) {
        // a normal custom attribute (not template controller)
        const bindings = this.compileBindings(symbol);
        return new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.HydrateAttributeInstruction(symbol.res, symbol.info.alias, bindings);
    }
    compilePlainAttribute(symbol, isOnSurrogate) {
        if (symbol.command === null) {
            const syntax = symbol.syntax;
            if (symbol.expression === null) {
                const attrRawValue = syntax.rawValue;
                if (isOnSurrogate) {
                    switch (syntax.target) {
                        case 'class':
                            return new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.SetClassAttributeInstruction(attrRawValue);
                        case 'style':
                            return new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.SetStyleAttributeInstruction(attrRawValue);
                        // todo:  define how to merge other attribute peacefully
                        //        this is an existing feature request
                    }
                }
                // a plain attribute on a surrogate
                return new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.SetAttributeInstruction(attrRawValue, syntax.target);
            }
            else {
                // a plain attribute with an interpolation
                return new _renderer_js__WEBPACK_IMPORTED_MODULE_5__.InterpolationInstruction(symbol.expression, syntax.target);
            }
        }
        else {
            // a plain attribute with a binding command
            return symbol.command.compile(symbol);
        }
    }
    // private compileAttribute(symbol: IAttributeSymbol): AttributeInstruction {
    //   // any attribute on a custom element (which is not a bindable) or a plain element
    //   if (symbol.flags & SymbolFlags.isCustomAttribute) {
    //     return this.compileCustomAttribute(symbol as CustomAttributeSymbol);
    //   } else {
    //     return this.compilePlainAttribute(symbol as PlainAttributeSymbol);
    //   }
    // }
    compileProjections(symbol, projectionMap, targetedProjections) {
        if ((symbol.flags & 32768 /* hasProjections */) === 0) {
            return null;
        }
        const p = this.p;
        const projections = Object.create(null);
        const $projections = symbol.projections;
        const len = $projections.length;
        for (let i = 0; i < len; ++i) {
            const projection = $projections[i];
            const name = projection.name;
            const instructions = [];
            this.compileParentNode(projection.template, instructions, projectionMap, targetedProjections);
            const definition = projections[name];
            if (definition === void 0) {
                let template = projection.template.physicalNode;
                if (template.tagName !== 'TEMPLATE') {
                    const _template = p.document.createElement('template');
                    _template.content.appendChild(template);
                    template = _template;
                }
                projections[name] = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElementDefinition.create({ name, template, instructions, needsCompile: false });
            }
            else {
                // consolidate the projections to same slot
                definition.template.content.appendChild(projection.template.physicalNode);
                definition.instructions.push(...instructions);
            }
        }
        return projections;
    }
    compileProjectionFallback(symbol, projections, targetedProjections) {
        const instructions = [];
        this.compileChildNodes(symbol, instructions, projections, targetedProjections);
        const template = this.p.document.createElement('template');
        template.content.append(...(0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.toArray)(symbol.physicalNode.childNodes));
        return _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElementDefinition.create({ name: _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElement.generateName(), template, instructions, needsCompile: false });
    }
};
TemplateCompiler = __decorate([
    __param(0, _template_element_factory_js__WEBPACK_IMPORTED_MODULE_4__.ITemplateElementFactory),
    __param(1, _resources_attribute_pattern_js__WEBPACK_IMPORTED_MODULE_8__.IAttributeParser),
    __param(2, _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser),
    __param(3, _attribute_syntax_transformer_js__WEBPACK_IMPORTED_MODULE_2__.IAttrSyntaxTransformer),
    __param(4, _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.ILogger),
    __param(5, _platform_js__WEBPACK_IMPORTED_MODULE_6__.IPlatform)
], TemplateCompiler);

function processTemplateName(localTemplate, localTemplateNames) {
    const name = localTemplate.getAttribute(localTemplateIdentifier);
    if (name === null || name === '') {
        throw new Error('The value of "as-custom-element" attribute cannot be empty for local template');
    }
    if (localTemplateNames.has(name)) {
        throw new Error(`Duplicate definition of the local template named ${name}`);
    }
    else {
        localTemplateNames.add(name);
        localTemplate.removeAttribute(localTemplateIdentifier);
    }
    return name;
}
function getBindingMode(bindable) {
    switch (bindable.getAttribute("mode" /* mode */)) {
        case 'oneTime':
            return _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.oneTime;
        case 'toView':
            return _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.toView;
        case 'fromView':
            return _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.fromView;
        case 'twoWay':
            return _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.twoWay;
        case 'default':
        default:
            return _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.BindingMode.default;
    }
}
function processLocalTemplates(template, definition, context, p, logger) {
    let root;
    if (template.nodeName === 'TEMPLATE') {
        if (template.hasAttribute(localTemplateIdentifier)) {
            throw new Error('The root cannot be a local template itself.');
        }
        root = template.content;
    }
    else {
        root = template;
    }
    const localTemplates = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.toArray)(root.querySelectorAll('template[as-custom-element]'));
    const numLocalTemplates = localTemplates.length;
    if (numLocalTemplates === 0) {
        return;
    }
    if (numLocalTemplates === root.childElementCount) {
        throw new Error('The custom element does not have any content other than local template(s).');
    }
    const localTemplateNames = new Set();
    for (const localTemplate of localTemplates) {
        if (localTemplate.parentNode !== root) {
            throw new Error('Local templates needs to be defined directly under root.');
        }
        const name = processTemplateName(localTemplate, localTemplateNames);
        const localTemplateType = class LocalTemplate {
        };
        const content = localTemplate.content;
        const bindableEls = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.toArray)(content.querySelectorAll('bindable'));
        const bindableInstructions = _bindable_js__WEBPACK_IMPORTED_MODULE_7__.Bindable.for(localTemplateType);
        const properties = new Set();
        const attributes = new Set();
        for (const bindableEl of bindableEls) {
            if (bindableEl.parentNode !== content) {
                throw new Error('Bindable properties of local templates needs to be defined directly under root.');
            }
            const property = bindableEl.getAttribute("property" /* property */);
            if (property === null) {
                throw new Error(`The attribute 'property' is missing in ${bindableEl.outerHTML}`);
            }
            const attribute = bindableEl.getAttribute("attribute" /* attribute */);
            if (attribute !== null
                && attributes.has(attribute)
                || properties.has(property)) {
                throw new Error(`Bindable property and attribute needs to be unique; found property: ${property}, attribute: ${attribute}`);
            }
            else {
                if (attribute !== null) {
                    attributes.add(attribute);
                }
                properties.add(property);
            }
            bindableInstructions.add({
                property,
                attribute: attribute ?? void 0,
                mode: getBindingMode(bindableEl),
            });
            const ignoredAttributes = bindableEl.getAttributeNames().filter((attrName) => !allowedLocalTemplateBindableAttributes.includes(attrName));
            if (ignoredAttributes.length > 0) {
                logger.warn(`The attribute(s) ${ignoredAttributes.join(', ')} will be ignored for ${bindableEl.outerHTML}. Only ${allowedLocalTemplateBindableAttributes.join(', ')} are processed.`);
            }
            content.removeChild(bindableEl);
        }
        const localTemplateDefinition = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_10__.CustomElement.define({ name, template: localTemplate }, localTemplateType);
        // the casting is needed here as the dependencies are typed as readonly array
        definition.dependencies.push(localTemplateDefinition);
        context.register(localTemplateDefinition);
        root.removeChild(localTemplate);
    }
}
//# sourceMappingURL=template-compiler.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/template-element-factory.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/template-element-factory.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ITemplateElementFactory": () => /* binding */ ITemplateElementFactory,
/* harmony export */   "TemplateElementFactory": () => /* binding */ TemplateElementFactory
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


const ITemplateElementFactory = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ITemplateElementFactory', x => x.singleton(TemplateElementFactory));
const markupCache = {};
let TemplateElementFactory = class TemplateElementFactory {
    constructor(p) {
        this.p = p;
        this.template = p.document.createElement('template');
    }
    createTemplate(input) {
        if (typeof input === 'string') {
            let result = markupCache[input];
            if (result === void 0) {
                const template = this.template;
                template.innerHTML = input;
                const node = template.content.firstElementChild;
                // if the input is either not wrapped in a template or there is more than one node,
                // return the whole template that wraps it/them (and create a new one for the next input)
                if (node == null || node.nodeName !== 'TEMPLATE' || node.nextElementSibling != null) {
                    this.template = this.p.document.createElement('template');
                    result = template;
                }
                else {
                    // the node to return is both a template and the only node, so return just the node
                    // and clean up the template for the next input
                    template.content.removeChild(node);
                    result = node;
                }
                markupCache[input] = result;
            }
            return result.cloneNode(true);
        }
        if (input.nodeName !== 'TEMPLATE') {
            // if we get one node that is not a template, wrap it in one
            const template = this.p.document.createElement('template');
            template.content.appendChild(input);
            return template;
        }
        // we got a template element, remove it from the DOM if it's present there and don't
        // do any other processing
        input.parentNode?.removeChild(input);
        return input.cloneNode(true);
    }
};
TemplateElementFactory = __decorate([
    __param(0, _platform_js__WEBPACK_IMPORTED_MODULE_1__.IPlatform)
], TemplateElementFactory);

//# sourceMappingURL=template-element-factory.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/templating/children.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/templating/children.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "children": () => /* binding */ children,
/* harmony export */   "Children": () => /* binding */ Children,
/* harmony export */   "ChildrenDefinition": () => /* binding */ ChildrenDefinition,
/* harmony export */   "ChildrenObserver": () => /* binding */ ChildrenObserver,
/* harmony export */   "filterChildren": () => /* binding */ filterChildren
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ChildrenObserver_1;



function children(configOrTarget, prop) {
    let config;
    function decorator($target, $prop) {
        if (arguments.length > 1) {
            // Non invocation:
            // - @children
            // Invocation with or w/o opts:
            // - @children()
            // - @children({...opts})
            config.property = $prop;
        }
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(Children.name, ChildrenDefinition.create($prop, config), $target.constructor, $prop);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.appendTo($target.constructor, Children.keyFrom($prop));
    }
    if (arguments.length > 1) {
        // Non invocation:
        // - @children
        config = {};
        decorator(configOrTarget, prop);
        return;
    }
    else if (typeof configOrTarget === 'string') {
        // ClassDecorator
        // - @children('bar')
        // Direct call:
        // - @children('bar')(Foo)
        config = {};
        return decorator;
    }
    // Invocation with or w/o opts:
    // - @children()
    // - @children({...opts})
    config = configOrTarget === void 0 ? {} : configOrTarget;
    return decorator;
}
function isChildrenObserverAnnotation(key) {
    return key.startsWith(Children.name);
}
const Children = {
    name: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor('children-observer'),
    keyFrom(name) {
        return `${Children.name}:${name}`;
    },
    from(...childrenObserverLists) {
        const childrenObservers = {};
        const isArray = Array.isArray;
        function addName(name) {
            childrenObservers[name] = ChildrenDefinition.create(name);
        }
        function addDescription(name, def) {
            childrenObservers[name] = ChildrenDefinition.create(name, def);
        }
        function addList(maybeList) {
            if (isArray(maybeList)) {
                maybeList.forEach(addName);
            }
            else if (maybeList instanceof ChildrenDefinition) {
                childrenObservers[maybeList.property] = maybeList;
            }
            else if (maybeList !== void 0) {
                Object.keys(maybeList).forEach(name => addDescription(name, maybeList));
            }
        }
        childrenObserverLists.forEach(addList);
        return childrenObservers;
    },
    getAll(Type) {
        const propStart = Children.name.length + 1;
        const defs = [];
        const prototypeChain = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.getPrototypeChain)(Type);
        let iProto = prototypeChain.length;
        let iDefs = 0;
        let keys;
        let keysLen;
        let Class;
        while (--iProto >= 0) {
            Class = prototypeChain[iProto];
            keys = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.getKeys(Class).filter(isChildrenObserverAnnotation);
            keysLen = keys.length;
            for (let i = 0; i < keysLen; ++i) {
                defs[iDefs++] = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(Children.name, Class, keys[i].slice(propStart));
            }
        }
        return defs;
    },
};
const childObserverOptions = { childList: true };
class ChildrenDefinition {
    constructor(callback, property, options, query, filter, map) {
        this.callback = callback;
        this.property = property;
        this.options = options;
        this.query = query;
        this.filter = filter;
        this.map = map;
    }
    static create(prop, def = {}) {
        return new ChildrenDefinition((0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(def.callback, `${prop}Changed`), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(def.property, prop), def.options ?? childObserverOptions, def.query, def.filter, def.map);
    }
}
/** @internal */
let ChildrenObserver = ChildrenObserver_1 = class ChildrenObserver {
    constructor(controller, obj, propertyKey, cbName, query = defaultChildQuery, filter = defaultChildFilter, map = defaultChildMap, options) {
        this.controller = controller;
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.query = query;
        this.filter = filter;
        this.map = map;
        this.options = options;
        this.observing = false;
        this.children = (void 0);
        this.callback = obj[cbName];
        Reflect.defineProperty(this.obj, this.propertyKey, {
            enumerable: true,
            configurable: true,
            get: () => this.getValue(),
            set: () => { return; },
        });
    }
    getValue() {
        this.tryStartObserving();
        return this.children;
    }
    setValue(newValue) { }
    subscribe(subscriber) {
        this.tryStartObserving();
        this.subs.add(subscriber);
    }
    tryStartObserving() {
        if (!this.observing) {
            this.observing = true;
            this.children = filterChildren(this.controller, this.query, this.filter, this.map);
            const obs = new this.controller.host.ownerDocument.defaultView.MutationObserver(() => { this.onChildrenChanged(); });
            obs.observe(this.controller.host, this.options);
        }
    }
    onChildrenChanged() {
        this.children = filterChildren(this.controller, this.query, this.filter, this.map);
        if (this.callback !== void 0) {
            this.callback.call(this.obj);
        }
        this.subs.notify(this.children, undefined, 8 /* updateTarget */);
    }
};
ChildrenObserver = ChildrenObserver_1 = __decorate([
    (0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.subscriberCollection)()
], ChildrenObserver);

function defaultChildQuery(controller) {
    return controller.host.childNodes;
}
function defaultChildFilter(node, controller, viewModel) {
    return !!viewModel;
}
function defaultChildMap(node, controller, viewModel) {
    return viewModel;
}
const forOpts = { optional: true };
/** @internal */
function filterChildren(controller, query, filter, map) {
    const nodes = query(controller);
    const children = [];
    for (let i = 0, ii = nodes.length; i < ii; ++i) {
        const node = nodes[i];
        const $controller = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_2__.CustomElement.for(node, forOpts);
        const viewModel = $controller?.viewModel ?? null;
        if (filter(node, $controller, viewModel)) {
            children.push(map(node, $controller, viewModel));
        }
    }
    return children;
}
//# sourceMappingURL=children.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/templating/controller.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/templating/controller.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MountTarget": () => /* binding */ MountTarget,
/* harmony export */   "Controller": () => /* binding */ Controller,
/* harmony export */   "isCustomElementController": () => /* binding */ isCustomElementController,
/* harmony export */   "isCustomElementViewModel": () => /* binding */ isCustomElementViewModel,
/* harmony export */   "HooksDefinition": () => /* binding */ HooksDefinition,
/* harmony export */   "ViewModelKind": () => /* binding */ ViewModelKind,
/* harmony export */   "State": () => /* binding */ State,
/* harmony export */   "stringifyState": () => /* binding */ stringifyState,
/* harmony export */   "IController": () => /* binding */ IController
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _observation_bindable_observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observation/bindable-observer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/bindable-observer.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
/* harmony import */ var _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../resources/custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
/* harmony import */ var _render_context_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./render-context.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/render-context.js");
/* harmony import */ var _children_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./children.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/children.js");
/* harmony import */ var _app_root_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../app-root.js */ "./node_modules/@aurelia/runtime-html/dist/esm/app-root.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _styles_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./styles.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/styles.js");
/* harmony import */ var _watchers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./watchers.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/watchers.js");
/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */












function callDispose(disposable) {
    disposable.dispose();
}
var MountTarget;
(function (MountTarget) {
    MountTarget[MountTarget["none"] = 0] = "none";
    MountTarget[MountTarget["host"] = 1] = "host";
    MountTarget[MountTarget["shadowRoot"] = 2] = "shadowRoot";
    MountTarget[MountTarget["location"] = 3] = "location";
})(MountTarget || (MountTarget = {}));
const optional = { optional: true };
const controllerLookup = new WeakMap();
class Controller {
    constructor(root, container, vmKind, flags, definition, 
    /**
     * The viewFactory. Only present for synthetic views.
     */
    viewFactory, 
    /**
     * The backing viewModel. Only present for custom attributes and elements.
     */
    viewModel, 
    /**
     * The physical host dom node.
     *
     * For containerless elements, this node will be removed from the DOM and replaced by a comment, which is assigned to the `location` property.
     *
     * For ShadowDOM elements, this will be the original declaring element, NOT the shadow root (the shadow root is stored on the `shadowRoot` property)
     */
    host) {
        this.root = root;
        this.container = container;
        this.vmKind = vmKind;
        this.flags = flags;
        this.definition = definition;
        this.viewFactory = viewFactory;
        this.viewModel = viewModel;
        this.host = host;
        this.id = (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.nextId)('au$component');
        this.head = null;
        this.tail = null;
        this.next = null;
        this.parent = null;
        this.bindings = null;
        this.children = null;
        this.hasLockedScope = false;
        this.isStrictBinding = false;
        this.scope = null;
        this.hostScope = null;
        // If a host from another custom element was passed in, then this will be the controller for that custom element (could be `au-viewport` for example).
        // In that case, this controller will create a new host node (with the definition's name) and use that as the target host for the nodes instead.
        // That host node is separately mounted to the host controller's original host node.
        this.hostController = null;
        this.mountTarget = 0 /* none */;
        this.shadowRoot = null;
        this.nodes = null;
        this.context = null;
        this.location = null;
        this.state = 0 /* none */;
        this.logger = null;
        this.debug = false;
        this.fullyNamed = false;
        this.$initiator = null;
        this.$flags = 0 /* none */;
        this.$resolve = void 0;
        this.$reject = void 0;
        this.$promise = void 0;
        this.activatingStack = 0;
        this.detachingStack = 0;
        this.unbindingStack = 0;
        if (root === null && container.has(_app_root_js__WEBPACK_IMPORTED_MODULE_8__.IAppRoot, true)) {
            this.root = container.get(_app_root_js__WEBPACK_IMPORTED_MODULE_8__.IAppRoot);
        }
        this.platform = container.get(_platform_js__WEBPACK_IMPORTED_MODULE_9__.IPlatform);
        switch (vmKind) {
            case 1 /* customAttribute */:
            case 0 /* customElement */:
                this.hooks = new HooksDefinition(viewModel);
                break;
            case 2 /* synthetic */:
                this.hooks = HooksDefinition.none;
                break;
        }
    }
    get isActive() {
        return (this.state & (1 /* activating */ | 2 /* activated */)) > 0 && (this.state & 4 /* deactivating */) === 0;
    }
    get name() {
        if (this.parent === null) {
            switch (this.vmKind) {
                case 1 /* customAttribute */:
                    return `[${this.definition.name}]`;
                case 0 /* customElement */:
                    return this.definition.name;
                case 2 /* synthetic */:
                    return this.viewFactory.name;
            }
        }
        switch (this.vmKind) {
            case 1 /* customAttribute */:
                return `${this.parent.name}>[${this.definition.name}]`;
            case 0 /* customElement */:
                return `${this.parent.name}>${this.definition.name}`;
            case 2 /* synthetic */:
                return this.viewFactory.name === this.parent.definition?.name
                    ? `${this.parent.name}[view]`
                    : `${this.parent.name}[view:${this.viewFactory.name}]`;
        }
    }
    static getCached(viewModel) {
        return controllerLookup.get(viewModel);
    }
    static getCachedOrThrow(viewModel) {
        const controller = Controller.getCached(viewModel);
        if (controller === void 0) {
            throw new Error(`There is no cached controller for the provided ViewModel: ${String(viewModel)}`);
        }
        return controller;
    }
    static forCustomElement(root, container, viewModel, host, 
    // projections *targeted* for this custom element. these are not the projections *provided* by this custom element.
    targetedProjections, flags = 0 /* none */, hydrate = true, 
    // Use this when `instance.constructor` is not a custom element type to pass on the CustomElement definition
    definition = void 0) {
        if (controllerLookup.has(viewModel)) {
            return controllerLookup.get(viewModel);
        }
        definition = definition ?? _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement.getDefinition(viewModel.constructor);
        const controller = new Controller(
        /* root           */ root, 
        /* container      */ container, 0 /* customElement */, 
        /* flags          */ flags, 
        /* definition     */ definition, 
        /* viewFactory    */ null, 
        /* viewModel      */ viewModel, 
        /* host           */ host);
        controllerLookup.set(viewModel, controller);
        if (hydrate) {
            controller.hydrateCustomElement(container, targetedProjections);
        }
        return controller;
    }
    static forCustomAttribute(root, container, viewModel, host, flags = 0 /* none */) {
        if (controllerLookup.has(viewModel)) {
            return controllerLookup.get(viewModel);
        }
        const definition = _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_5__.CustomAttribute.getDefinition(viewModel.constructor);
        const controller = new Controller(
        /* root           */ root, 
        /* container      */ container, 1 /* customAttribute */, 
        /* flags          */ flags, 
        /* definition     */ definition, 
        /* viewFactory    */ null, 
        /* viewModel      */ viewModel, 
        /* host           */ host);
        controllerLookup.set(viewModel, controller);
        controller.hydrateCustomAttribute();
        return controller;
    }
    static forSyntheticView(root, context, viewFactory, flags = 0 /* none */, parentController = void 0) {
        const controller = new Controller(
        /* root           */ root, 
        /* container      */ context, 2 /* synthetic */, 
        /* flags          */ flags, 
        /* definition     */ null, 
        /* viewFactory    */ viewFactory, 
        /* viewModel      */ null, 
        /* host           */ null);
        controller.parent = parentController ?? null;
        controller.hydrateSynthetic(context);
        return controller;
    }
    /** @internal */
    hydrateCustomElement(parentContainer, targetedProjections) {
        this.logger = parentContainer.get(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.ILogger).root;
        this.debug = this.logger.config.level <= 1 /* debug */;
        if (this.debug) {
            this.logger = this.logger.scopeTo(this.name);
        }
        let definition = this.definition;
        const flags = this.flags;
        const instance = this.viewModel;
        this.scope = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.Scope.create(instance, null, true);
        if (definition.watches.length > 0) {
            createWatchers(this, this.container, definition, instance);
        }
        createObservers(this, definition, flags, instance);
        createChildrenObservers(this, definition, flags, instance);
        if (this.hooks.hasDefine) {
            if (this.debug) {
                this.logger.trace(`invoking define() hook`);
            }
            const result = instance.define(
            /* controller      */ this, 
            /* parentContainer */ parentContainer, 
            /* definition      */ definition);
            if (result !== void 0 && result !== definition) {
                definition = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElementDefinition.getOrCreate(result);
            }
        }
        const context = this.context = (0,_render_context_js__WEBPACK_IMPORTED_MODULE_6__.getRenderContext)(definition, parentContainer, targetedProjections?.projections);
        // Support Recursive Components by adding self to own context
        definition.register(context);
        if (definition.injectable !== null) {
            // If the element is registered as injectable, support injecting the instance into children
            context.beginChildComponentOperation(instance);
        }
        // If this is the root controller, then the AppRoot will invoke things in the following order:
        // - Controller.hydrateCustomElement
        // - runAppTasks('hydrating') // may return a promise
        // - Controller.compile
        // - runAppTasks('hydrated') // may return a promise
        // - Controller.compileChildren
        // This keeps hydration synchronous while still allowing the composition root compile hooks to do async work.
        if (this.root?.controller !== this) {
            this.hydrate(targetedProjections);
            this.hydrateChildren();
        }
    }
    /** @internal */
    hydrate(targetedProjections) {
        if (this.hooks.hasHydrating) {
            if (this.debug) {
                this.logger.trace(`invoking hasHydrating() hook`);
            }
            this.viewModel.hydrating(this);
        }
        const compiledContext = this.context.compile(targetedProjections);
        const { projectionsMap, shadowOptions, isStrictBinding, hasSlots, containerless } = compiledContext.compiledDefinition;
        compiledContext.registerProjections(projectionsMap, this.scope);
        // once the projections are registered, we can cleanup the projection map to prevent memory leaks.
        projectionsMap.clear();
        this.isStrictBinding = isStrictBinding;
        if ((this.hostController = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement.for(this.host, optional)) !== null) {
            this.host = this.platform.document.createElement(this.context.definition.name);
        }
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement.name, this, this.host);
        if (shadowOptions !== null || hasSlots) {
            if (containerless) {
                throw new Error('You cannot combine the containerless custom element option with Shadow DOM.');
            }
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement.name, this, this.shadowRoot = this.host.attachShadow(shadowOptions ?? defaultShadowOptions));
            this.mountTarget = 2 /* shadowRoot */;
        }
        else if (containerless) {
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement.name, this, this.location = (0,_dom_js__WEBPACK_IMPORTED_MODULE_3__.convertToRenderLocation)(this.host));
            this.mountTarget = 3 /* location */;
        }
        else {
            this.mountTarget = 1 /* host */;
        }
        this.viewModel.$controller = this;
        this.nodes = compiledContext.createNodes();
        if (this.hooks.hasHydrated) {
            if (this.debug) {
                this.logger.trace(`invoking hasHydrated() hook`);
            }
            this.viewModel.hydrated(this);
        }
    }
    /** @internal */
    hydrateChildren() {
        const targets = this.nodes.findTargets();
        this.context.render(
        /* flags      */ this.flags, 
        /* controller */ this, 
        /* targets    */ targets, 
        /* definition */ this.context.compiledDefinition, 
        /* host       */ this.host);
        if (this.hooks.hasCreated) {
            if (this.debug) {
                this.logger.trace(`invoking created() hook`);
            }
            this.viewModel.created(this);
        }
    }
    hydrateCustomAttribute() {
        const definition = this.definition;
        const instance = this.viewModel;
        if (definition.watches.length > 0) {
            createWatchers(this, this.container, definition, instance);
        }
        createObservers(this, definition, this.flags, instance);
        instance.$controller = this;
    }
    hydrateSynthetic(context) {
        this.context = context;
        const compiledContext = context.compile(null);
        const compiledDefinition = compiledContext.compiledDefinition;
        this.isStrictBinding = compiledDefinition.isStrictBinding;
        const nodes = this.nodes = compiledContext.createNodes();
        const targets = nodes.findTargets();
        compiledContext.render(
        /* flags      */ this.flags, 
        /* controller */ this, 
        /* targets    */ targets, 
        /* definition */ compiledDefinition, 
        /* host       */ void 0);
    }
    activate(initiator, parent, flags, scope, hostScope) {
        switch (this.state) {
            case 0 /* none */:
            case 8 /* deactivated */:
                if (!(parent === null || parent.isActive)) {
                    // If this is not the root, and the parent is either:
                    // 1. Not activated, or activating children OR
                    // 2. Deactivating itself
                    // abort.
                    return;
                }
                // Otherwise, proceed normally.
                // 'deactivated' and 'none' are treated the same because, from an activation perspective, they mean the same thing.
                this.state = 1 /* activating */;
                break;
            case 2 /* activated */:
                // If we're already activated, no need to do anything.
                return;
            case 32 /* disposed */:
                throw new Error(`${this.name} trying to activate a controller that is disposed.`);
            default:
                throw new Error(`${this.name} unexpected state: ${stringifyState(this.state)}.`);
        }
        this.parent = parent;
        if (this.debug && !this.fullyNamed) {
            this.fullyNamed = true;
            this.logger = this.context.get(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.ILogger).root.scopeTo(this.name);
            this.logger.trace(`activate()`);
        }
        this.hostScope = hostScope ?? null;
        flags |= 32 /* fromBind */;
        switch (this.vmKind) {
            case 0 /* customElement */:
                // Custom element scope is created and assigned during hydration
                this.scope.parentScope = scope ?? null;
                break;
            case 1 /* customAttribute */:
                this.scope = scope ?? null;
                break;
            case 2 /* synthetic */:
                if (scope === void 0 || scope === null) {
                    throw new Error(`Scope is null or undefined`);
                }
                if (!this.hasLockedScope) {
                    this.scope = scope;
                }
                break;
        }
        if (this.isStrictBinding) {
            flags |= 4 /* isStrictBindingStrategy */;
        }
        this.$initiator = initiator;
        this.$flags = flags;
        // opposing leave is called in attach() (which will trigger attached())
        this.enterActivating();
        if (this.hooks.hasBinding) {
            if (this.debug) {
                this.logger.trace(`binding()`);
            }
            const ret = this.viewModel.binding(this.$initiator, this.parent, this.$flags);
            if (ret instanceof Promise) {
                this.ensurePromise();
                ret.then(() => {
                    this.bind();
                }).catch(err => {
                    this.reject(err);
                });
                return this.$promise;
            }
        }
        this.bind();
        return this.$promise;
    }
    bind() {
        if (this.debug) {
            this.logger.trace(`bind()`);
        }
        if (this.bindings !== null) {
            for (let i = 0; i < this.bindings.length; ++i) {
                this.bindings[i].$bind(this.$flags, this.scope, this.hostScope);
            }
        }
        if (this.hooks.hasBound) {
            if (this.debug) {
                this.logger.trace(`bound()`);
            }
            const ret = this.viewModel.bound(this.$initiator, this.parent, this.$flags);
            if (ret instanceof Promise) {
                this.ensurePromise();
                ret.then(() => {
                    this.attach();
                }).catch(err => {
                    this.reject(err);
                });
                return;
            }
        }
        this.attach();
    }
    append(...nodes) {
        switch (this.mountTarget) {
            case 1 /* host */:
                this.host.append(...nodes);
                break;
            case 2 /* shadowRoot */:
                this.shadowRoot.append(...nodes);
                break;
            case 3 /* location */:
                for (let i = 0; i < nodes.length; ++i) {
                    this.location.parentNode.insertBefore(nodes[i], this.location);
                }
                break;
        }
    }
    attach() {
        if (this.debug) {
            this.logger.trace(`attach()`);
        }
        if (this.hostController !== null) {
            switch (this.mountTarget) {
                case 1 /* host */:
                case 2 /* shadowRoot */:
                    this.hostController.append(this.host);
                    break;
                case 3 /* location */:
                    this.hostController.append(this.location.$start, this.location);
                    break;
            }
        }
        switch (this.mountTarget) {
            case 1 /* host */:
                this.nodes.appendTo(this.host, this.definition?.enhance);
                break;
            case 2 /* shadowRoot */: {
                const styles = this.context.has(_styles_js__WEBPACK_IMPORTED_MODULE_10__.IShadowDOMStyles, false)
                    ? this.context.get(_styles_js__WEBPACK_IMPORTED_MODULE_10__.IShadowDOMStyles)
                    : this.context.get(_styles_js__WEBPACK_IMPORTED_MODULE_10__.IShadowDOMGlobalStyles);
                styles.applyTo(this.shadowRoot);
                this.nodes.appendTo(this.shadowRoot);
                break;
            }
            case 3 /* location */:
                this.nodes.insertBefore(this.location);
                break;
        }
        if (this.hooks.hasAttaching) {
            if (this.debug) {
                this.logger.trace(`attaching()`);
            }
            const ret = this.viewModel.attaching(this.$initiator, this.parent, this.$flags);
            if (ret instanceof Promise) {
                this.ensurePromise();
                this.enterActivating();
                ret.then(() => {
                    this.leaveActivating();
                }).catch(err => {
                    this.reject(err);
                });
            }
        }
        // attaching() and child activation run in parallel, and attached() is called when both are finished
        if (this.children !== null) {
            for (let i = 0; i < this.children.length; ++i) {
                // Any promises returned from child activation are cumulatively awaited before this.$promise resolves
                void this.children[i].activate(this.$initiator, this, this.$flags, this.scope, this.hostScope);
            }
        }
        // attached() is invoked by Controller#leaveActivating when `activatingStack` reaches 0
        this.leaveActivating();
    }
    deactivate(initiator, parent, flags) {
        switch ((this.state & ~16 /* released */)) {
            case 2 /* activated */:
                // We're fully activated, so proceed with normal deactivation.
                this.state = 4 /* deactivating */;
                break;
            case 0 /* none */:
            case 8 /* deactivated */:
            case 32 /* disposed */:
            case 8 /* deactivated */ | 32 /* disposed */:
                // If we're already deactivated (or even disposed), or never activated in the first place, no need to do anything.
                return;
            default:
                throw new Error(`${this.name} unexpected state: ${stringifyState(this.state)}.`);
        }
        if (this.debug) {
            this.logger.trace(`deactivate()`);
        }
        this.$initiator = initiator;
        this.$flags = flags;
        if (initiator === this) {
            this.enterDetaching();
        }
        if (this.children !== null) {
            for (let i = 0; i < this.children.length; ++i) {
                // Child promise results are tracked by enter/leave combo's
                void this.children[i].deactivate(initiator, this, flags);
            }
        }
        if (this.hooks.hasDetaching) {
            if (this.debug) {
                this.logger.trace(`detaching()`);
            }
            const ret = this.viewModel.detaching(this.$initiator, this.parent, this.$flags);
            if (ret instanceof Promise) {
                this.ensurePromise();
                initiator.enterDetaching();
                ret.then(() => {
                    initiator.leaveDetaching();
                }).catch(err => {
                    initiator.reject(err);
                });
            }
        }
        // Note: if a 3rd party plugin happens to do any async stuff in a template controller before calling deactivate on its view,
        // then the linking will become out of order.
        // For framework components, this shouldn't cause issues.
        // We can only prevent that by linking up after awaiting the detaching promise, which would add an extra tick + a fair bit of
        // overhead on this hot path, so it's (for now) a deliberate choice to not account for such situation.
        // Just leaving the note here so that we know to look here if a weird detaching-related timing issue is ever reported.
        if (initiator.head === null) {
            initiator.head = this;
        }
        else {
            initiator.tail.next = this;
        }
        initiator.tail = this;
        if (initiator !== this) {
            // Only detaching is called + the linked list is built when any controller that is not the initiator, is deactivated.
            // The rest is handled by the initiator.
            // This means that descendant controllers have to make sure to await the initiator's promise before doing any subsequent
            // controller api calls, or race conditions might occur.
            return;
        }
        this.leaveDetaching();
        return this.$promise;
    }
    removeNodes() {
        switch (this.vmKind) {
            case 0 /* customElement */:
            case 2 /* synthetic */:
                this.nodes.remove();
                this.nodes.unlink();
        }
        if (this.hostController !== null) {
            switch (this.mountTarget) {
                case 1 /* host */:
                case 2 /* shadowRoot */:
                    this.host.remove();
                    break;
                case 3 /* location */:
                    this.location.$start.remove();
                    this.location.remove();
                    break;
            }
        }
    }
    unbind() {
        if (this.debug) {
            this.logger.trace(`unbind()`);
        }
        const flags = this.$flags | 64 /* fromUnbind */;
        if (this.bindings !== null) {
            for (let i = 0; i < this.bindings.length; ++i) {
                this.bindings[i].$unbind(flags);
            }
        }
        this.parent = null;
        switch (this.vmKind) {
            case 1 /* customAttribute */:
                this.scope = null;
                break;
            case 2 /* synthetic */:
                if (!this.hasLockedScope) {
                    this.scope = null;
                }
                if ((this.state & 16 /* released */) === 16 /* released */ &&
                    !this.viewFactory.tryReturnToCache(this)) {
                    this.dispose();
                }
                break;
            case 0 /* customElement */:
                this.scope.parentScope = null;
                break;
        }
        if ((flags & 512 /* dispose */) === 512 /* dispose */) {
            this.dispose();
        }
        this.state = (this.state & 32 /* disposed */) | 8 /* deactivated */;
        this.$initiator = null;
        this.resolve();
    }
    ensurePromise() {
        if (this.$promise === void 0) {
            this.$promise = new Promise((resolve, reject) => {
                this.$resolve = resolve;
                this.$reject = reject;
            });
            if (this.$initiator !== this) {
                this.parent.ensurePromise();
            }
        }
    }
    resolve() {
        if (this.$promise !== void 0) {
            const resolve = this.$resolve;
            this.$resolve = this.$reject = this.$promise = void 0;
            resolve();
        }
    }
    reject(err) {
        if (this.$promise !== void 0) {
            const reject = this.$reject;
            this.$resolve = this.$reject = this.$promise = void 0;
            reject(err);
        }
        if (this.$initiator !== this) {
            this.parent.reject(err);
        }
    }
    enterActivating() {
        ++this.activatingStack;
        if (this.$initiator !== this) {
            this.parent.enterActivating();
        }
    }
    leaveActivating() {
        if (--this.activatingStack === 0) {
            if (this.hooks.hasAttached) {
                if (this.debug) {
                    this.logger.trace(`attached()`);
                }
                const ret = this.viewModel.attached(this.$initiator, this.$flags);
                if (ret instanceof Promise) {
                    this.ensurePromise();
                    ret.then(() => {
                        this.state = 2 /* activated */;
                        // Resolve this.$promise, signaling that activation is done (path 1 of 2)
                        this.resolve();
                        if (this.$initiator !== this) {
                            this.parent.leaveActivating();
                        }
                    }).catch(err => {
                        this.reject(err);
                    });
                    return;
                }
            }
            this.state = 2 /* activated */;
            // Resolve this.$promise (if present), signaling that activation is done (path 2 of 2)
            this.resolve();
        }
        if (this.$initiator !== this) {
            this.parent.leaveActivating();
        }
    }
    enterDetaching() {
        ++this.detachingStack;
    }
    leaveDetaching() {
        if (--this.detachingStack === 0) {
            // Note: this controller is the initiator (detach is only ever called on the initiator)
            if (this.debug) {
                this.logger.trace(`detach()`);
            }
            this.enterUnbinding();
            this.removeNodes();
            let cur = this.$initiator.head;
            while (cur !== null) {
                if (cur !== this) {
                    if (cur.debug) {
                        cur.logger.trace(`detach()`);
                    }
                    cur.removeNodes();
                }
                if (cur.hooks.hasUnbinding) {
                    if (cur.debug) {
                        cur.logger.trace('unbinding()');
                    }
                    const ret = cur.viewModel.unbinding(cur.$initiator, cur.parent, cur.$flags);
                    if (ret instanceof Promise) {
                        this.ensurePromise();
                        this.enterUnbinding();
                        ret.then(() => {
                            this.leaveUnbinding();
                        }).catch(err => {
                            this.reject(err);
                        });
                    }
                }
                cur = cur.next;
            }
            this.leaveUnbinding();
        }
    }
    enterUnbinding() {
        ++this.unbindingStack;
    }
    leaveUnbinding() {
        if (--this.unbindingStack === 0) {
            if (this.debug) {
                this.logger.trace(`unbind()`);
            }
            let cur = this.$initiator.head;
            let next = null;
            while (cur !== null) {
                if (cur !== this) {
                    cur.unbind();
                }
                next = cur.next;
                cur.next = null;
                cur = next;
            }
            this.head = this.tail = null;
            this.unbind();
        }
    }
    addBinding(binding) {
        if (this.bindings === null) {
            this.bindings = [binding];
        }
        else {
            this.bindings[this.bindings.length] = binding;
        }
    }
    addController(controller) {
        if (this.children === null) {
            this.children = [controller];
        }
        else {
            this.children[this.children.length] = controller;
        }
    }
    is(name) {
        switch (this.vmKind) {
            case 1 /* customAttribute */: {
                const def = _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_5__.CustomAttribute.getDefinition(this.viewModel.constructor);
                return def.name === name;
            }
            case 0 /* customElement */: {
                const def = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement.getDefinition(this.viewModel.constructor);
                return def.name === name;
            }
            case 2 /* synthetic */:
                return this.viewFactory.name === name;
        }
    }
    lockScope(scope) {
        this.scope = scope;
        this.hasLockedScope = true;
    }
    setHost(host) {
        if (this.vmKind === 0 /* customElement */) {
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement.name, this, host);
        }
        this.host = host;
        this.mountTarget = 1 /* host */;
        return this;
    }
    setShadowRoot(shadowRoot) {
        if (this.vmKind === 0 /* customElement */) {
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement.name, this, shadowRoot);
        }
        this.shadowRoot = shadowRoot;
        this.mountTarget = 2 /* shadowRoot */;
        return this;
    }
    setLocation(location) {
        if (this.vmKind === 0 /* customElement */) {
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement.name, this, location);
        }
        this.location = location;
        this.mountTarget = 3 /* location */;
        return this;
    }
    release() {
        this.state |= 16 /* released */;
    }
    dispose() {
        if (this.debug) {
            this.logger.trace(`dispose()`);
        }
        if ((this.state & 32 /* disposed */) === 32 /* disposed */) {
            return;
        }
        this.state |= 32 /* disposed */;
        if (this.hooks.hasDispose) {
            this.viewModel.dispose();
        }
        if (this.children !== null) {
            this.children.forEach(callDispose);
            this.children = null;
        }
        this.hostController = null;
        this.scope = null;
        this.nodes = null;
        this.context = null;
        this.location = null;
        this.viewFactory = null;
        if (this.viewModel !== null) {
            controllerLookup.delete(this.viewModel);
            this.viewModel = null;
        }
        this.viewModel = null;
        this.host = null;
        this.shadowRoot = null;
        this.root = null;
    }
    accept(visitor) {
        if (visitor(this) === true) {
            return true;
        }
        if (this.hooks.hasAccept && this.viewModel.accept(visitor) === true) {
            return true;
        }
        if (this.children !== null) {
            const { children } = this;
            for (let i = 0, ii = children.length; i < ii; ++i) {
                if (children[i].accept(visitor) === true) {
                    return true;
                }
            }
        }
    }
    getTargetAccessor(propertyName) {
        const { bindings } = this;
        if (bindings !== null) {
            const binding = bindings.find(b => b.targetProperty === propertyName);
            if (binding !== void 0) {
                return binding.targetObserver;
            }
        }
        return void 0;
    }
}
function getLookup(instance) {
    let lookup = instance.$observers;
    if (lookup === void 0) {
        Reflect.defineProperty(instance, '$observers', {
            enumerable: false,
            value: lookup = {},
        });
    }
    return lookup;
}
function createObservers(controller, definition, 
// deepscan-disable-next-line
_flags, instance) {
    const bindables = definition.bindables;
    const observableNames = Object.getOwnPropertyNames(bindables);
    const length = observableNames.length;
    if (length > 0) {
        let name;
        let bindable;
        const observers = getLookup(instance);
        for (let i = 0; i < length; ++i) {
            name = observableNames[i];
            if (observers[name] === void 0) {
                bindable = bindables[name];
                observers[name] = new _observation_bindable_observer_js__WEBPACK_IMPORTED_MODULE_2__.BindableObserver(instance, name, bindable.callback, bindable.set, controller);
            }
        }
    }
}
function createChildrenObservers(controller, definition, 
// deepscan-disable-next-line
_flags, instance) {
    const childrenObservers = definition.childrenObservers;
    const childObserverNames = Object.getOwnPropertyNames(childrenObservers);
    const length = childObserverNames.length;
    if (length > 0) {
        const observers = getLookup(instance);
        let name;
        for (let i = 0; i < length; ++i) {
            name = childObserverNames[i];
            if (observers[name] == void 0) {
                const childrenDescription = childrenObservers[name];
                observers[name] = new _children_js__WEBPACK_IMPORTED_MODULE_7__.ChildrenObserver(controller, instance, name, childrenDescription.callback, childrenDescription.query, childrenDescription.filter, childrenDescription.map, childrenDescription.options);
            }
        }
    }
}
const AccessScopeAst = {
    map: new Map(),
    for(key) {
        let ast = AccessScopeAst.map.get(key);
        if (ast == null) {
            ast = new _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.AccessScopeExpression(key, 0);
            AccessScopeAst.map.set(key, ast);
        }
        return ast;
    },
};
function createWatchers(controller, context, definition, instance) {
    const observerLocator = context.get(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator);
    const expressionParser = context.get(_aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.IExpressionParser);
    const watches = definition.watches;
    let expression;
    let callback;
    for (let i = 0, ii = watches.length; ii > i; ++i) {
        ({ expression, callback } = watches[i]);
        callback = typeof callback === 'function'
            ? callback
            : Reflect.get(instance, callback);
        if (typeof callback !== 'function') {
            throw new Error(`Invalid callback for @watch decorator: ${String(callback)}`);
        }
        if (typeof expression === 'function') {
            controller.addBinding(new _watchers_js__WEBPACK_IMPORTED_MODULE_11__.ComputedWatcher(instance, observerLocator, expression, callback, 
            // there should be a flag to purposely disable proxy
            // AOT: not true for IE11
            true));
        }
        else {
            const ast = typeof expression === 'string'
                ? expressionParser.parse(expression, 53 /* BindCommand */)
                : AccessScopeAst.for(expression);
            controller.addBinding(new _watchers_js__WEBPACK_IMPORTED_MODULE_11__.ExpressionWatcher(controller.scope, context, observerLocator, ast, callback));
        }
    }
}
function isCustomElementController(value) {
    return value instanceof Controller && value.vmKind === 0 /* customElement */;
}
function isCustomElementViewModel(value) {
    return (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_4__.CustomElement.isType(value.constructor);
}
class HooksDefinition {
    constructor(target) {
        this.hasDefine = 'define' in target;
        this.hasHydrating = 'hydrating' in target;
        this.hasHydrated = 'hydrated' in target;
        this.hasCreated = 'created' in target;
        this.hasBinding = 'binding' in target;
        this.hasBound = 'bound' in target;
        this.hasAttaching = 'attaching' in target;
        this.hasAttached = 'attached' in target;
        this.hasDetaching = 'detaching' in target;
        this.hasUnbinding = 'unbinding' in target;
        this.hasDispose = 'dispose' in target;
        this.hasAccept = 'accept' in target;
    }
}
HooksDefinition.none = new HooksDefinition({});
const defaultShadowOptions = {
    mode: 'open'
};
var ViewModelKind;
(function (ViewModelKind) {
    ViewModelKind[ViewModelKind["customElement"] = 0] = "customElement";
    ViewModelKind[ViewModelKind["customAttribute"] = 1] = "customAttribute";
    ViewModelKind[ViewModelKind["synthetic"] = 2] = "synthetic";
})(ViewModelKind || (ViewModelKind = {}));
var State;
(function (State) {
    State[State["none"] = 0] = "none";
    State[State["activating"] = 1] = "activating";
    State[State["activated"] = 2] = "activated";
    State[State["deactivating"] = 4] = "deactivating";
    State[State["deactivated"] = 8] = "deactivated";
    State[State["released"] = 16] = "released";
    State[State["disposed"] = 32] = "disposed";
})(State || (State = {}));
function stringifyState(state) {
    const names = [];
    if ((state & 1 /* activating */) === 1 /* activating */) {
        names.push('activating');
    }
    if ((state & 2 /* activated */) === 2 /* activated */) {
        names.push('activated');
    }
    if ((state & 4 /* deactivating */) === 4 /* deactivating */) {
        names.push('deactivating');
    }
    if ((state & 8 /* deactivated */) === 8 /* deactivated */) {
        names.push('deactivated');
    }
    if ((state & 16 /* released */) === 16 /* released */) {
        names.push('released');
    }
    if ((state & 32 /* disposed */) === 32 /* disposed */) {
        names.push('disposed');
    }
    return names.length === 0 ? 'none' : names.join('|');
}
const IController = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IController');
//# sourceMappingURL=controller.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/templating/render-context.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/templating/render-context.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isRenderContext": () => /* binding */ isRenderContext,
/* harmony export */   "getRenderContext": () => /* binding */ getRenderContext,
/* harmony export */   "RenderContext": () => /* binding */ RenderContext,
/* harmony export */   "ViewFactoryProvider": () => /* binding */ ViewFactoryProvider
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../renderer.js */ "./node_modules/@aurelia/runtime-html/dist/esm/renderer.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
/* harmony import */ var _view_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js");
/* harmony import */ var _resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../resources/custom-elements/au-slot.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-elements/au-slot.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./controller.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/controller.js");








const definitionContainerLookup = new WeakMap();
const definitionContainerProjectionsLookup = new WeakMap();
const fragmentCache = new WeakMap();
function isRenderContext(value) {
    return value instanceof RenderContext;
}
function getRenderContext(partialDefinition, parentContainer, projections) {
    const definition = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_3__.CustomElementDefinition.getOrCreate(partialDefinition);
    // injectable completely prevents caching, ensuring that each instance gets a new context context
    if (definition.injectable !== null) {
        return new RenderContext(definition, parentContainer);
    }
    if (projections == null) {
        let containerLookup = definitionContainerLookup.get(definition);
        if (containerLookup === void 0) {
            definitionContainerLookup.set(definition, containerLookup = new WeakMap());
        }
        let context = containerLookup.get(parentContainer);
        if (context === void 0) {
            containerLookup.set(parentContainer, context = new RenderContext(definition, parentContainer));
        }
        return context;
    }
    let containerProjectionsLookup = definitionContainerProjectionsLookup.get(definition);
    if (containerProjectionsLookup === void 0) {
        definitionContainerProjectionsLookup.set(definition, containerProjectionsLookup = new WeakMap());
    }
    let projectionsLookup = containerProjectionsLookup.get(parentContainer);
    if (projectionsLookup === void 0) {
        containerProjectionsLookup.set(parentContainer, projectionsLookup = new WeakMap());
    }
    let context = projectionsLookup.get(projections);
    if (context === void 0) {
        projectionsLookup.set(projections, context = new RenderContext(definition, parentContainer));
    }
    return context;
}
const emptyNodeCache = new WeakMap();
class RenderContext {
    constructor(definition, parentContainer) {
        this.definition = definition;
        this.parentContainer = parentContainer;
        this.viewModelProvider = void 0;
        this.fragment = null;
        this.factory = void 0;
        this.isCompiled = false;
        this.renderers = Object.create(null);
        this.compiledDefinition = (void 0);
        const container = this.container = parentContainer.createChild();
        // TODO(fkleuver): get contextual + root renderers
        const renderers = container.getAll(_renderer_js__WEBPACK_IMPORTED_MODULE_2__.IRenderer);
        for (let i = 0; i < renderers.length; ++i) {
            const renderer = renderers[i];
            this.renderers[renderer.instructionType] = renderer;
        }
        this.projectionProvider = container.get(_resources_custom_elements_au_slot_js__WEBPACK_IMPORTED_MODULE_5__.IProjectionProvider);
        const p = this.platform = container.get(_platform_js__WEBPACK_IMPORTED_MODULE_6__.IPlatform);
        container.registerResolver(_view_js__WEBPACK_IMPORTED_MODULE_4__.IViewFactory, this.factoryProvider = new ViewFactoryProvider(), true);
        container.registerResolver(_controller_js__WEBPACK_IMPORTED_MODULE_7__.IController, this.parentControllerProvider = new _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.InstanceProvider('IController'), true);
        container.registerResolver(_renderer_js__WEBPACK_IMPORTED_MODULE_2__.IInstruction, this.instructionProvider = new _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.InstanceProvider('IInstruction'), true);
        container.registerResolver(_dom_js__WEBPACK_IMPORTED_MODULE_1__.IRenderLocation, this.renderLocationProvider = new _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.InstanceProvider('IRenderLocation'), true);
        const ep = this.elementProvider = new _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.InstanceProvider('ElementResolver');
        container.registerResolver(_dom_js__WEBPACK_IMPORTED_MODULE_1__.INode, ep);
        container.registerResolver(p.Node, ep);
        container.registerResolver(p.Element, ep);
        container.registerResolver(p.HTMLElement, ep);
        container.register(...definition.dependencies);
    }
    // #region IServiceLocator api
    has(key, searchAncestors) {
        return this.container.has(key, searchAncestors);
    }
    get(key) {
        return this.container.get(key);
    }
    getAll(key) {
        return this.container.getAll(key);
    }
    // #endregion
    // #region IContainer api
    register(...params) {
        return this.container.register(...params);
    }
    registerResolver(key, resolver) {
        return this.container.registerResolver(key, resolver);
    }
    // public deregisterResolverFor<K extends Key, T = K>(key: K): void {
    //   this.container.deregisterResolverFor(key);
    // }
    registerTransformer(key, transformer) {
        return this.container.registerTransformer(key, transformer);
    }
    getResolver(key, autoRegister) {
        return this.container.getResolver(key, autoRegister);
    }
    getFactory(key) {
        return this.container.getFactory(key);
    }
    registerFactory(key, factory) {
        this.container.registerFactory(key, factory);
    }
    createChild() {
        return this.container.createChild();
    }
    find(kind, name) {
        return this.container.find(kind, name);
    }
    create(kind, name) {
        return this.container.create(kind, name);
    }
    disposeResolvers() {
        this.container.disposeResolvers();
    }
    // #endregion
    // #region IRenderContext api
    compile(targetedProjections) {
        let compiledDefinition;
        if (this.isCompiled) {
            return this;
        }
        this.isCompiled = true;
        const definition = this.definition;
        if (definition.needsCompile) {
            const container = this.container;
            const compiler = container.get(_renderer_js__WEBPACK_IMPORTED_MODULE_2__.ITemplateCompiler);
            compiledDefinition = this.compiledDefinition = compiler.compile(definition, container, targetedProjections);
        }
        else {
            compiledDefinition = this.compiledDefinition = definition;
        }
        // Support Recursive Components by adding self to own context
        compiledDefinition.register(this);
        if (fragmentCache.has(compiledDefinition)) {
            this.fragment = fragmentCache.get(compiledDefinition);
        }
        else {
            const doc = this.platform.document;
            const template = compiledDefinition.template;
            if (template === null || this.definition.enhance === true) {
                this.fragment = null;
            }
            else if (template instanceof this.platform.Node) {
                if (template.nodeName === 'TEMPLATE') {
                    this.fragment = doc.adoptNode(template.content);
                }
                else {
                    (this.fragment = doc.adoptNode(doc.createDocumentFragment())).appendChild(template);
                }
            }
            else {
                const tpl = doc.createElement('template');
                doc.adoptNode(tpl.content);
                if (typeof template === 'string') {
                    tpl.innerHTML = template;
                }
                this.fragment = tpl.content;
            }
            fragmentCache.set(compiledDefinition, this.fragment);
        }
        return this;
    }
    getViewFactory(name, contentType, projectionScope) {
        let factory = this.factory;
        if (factory === void 0) {
            if (name === void 0) {
                name = this.definition.name;
            }
            factory = this.factory = new _view_js__WEBPACK_IMPORTED_MODULE_4__.ViewFactory(name, this, contentType, projectionScope);
        }
        return factory;
    }
    beginChildComponentOperation(instance) {
        const definition = this.definition;
        if (definition.injectable !== null) {
            if (this.viewModelProvider === void 0) {
                this.container.registerResolver(definition.injectable, this.viewModelProvider = new _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.InstanceProvider('definition.injectable'));
            }
            this.viewModelProvider.prepare(instance);
        }
        return this;
    }
    // #endregion
    // #region ICompiledRenderContext api
    createNodes() {
        if (this.compiledDefinition.enhance === true) {
            return new _dom_js__WEBPACK_IMPORTED_MODULE_1__.FragmentNodeSequence(this.platform, this.compiledDefinition.template);
        }
        if (this.fragment === null) {
            let emptyNodes = emptyNodeCache.get(this.platform);
            if (emptyNodes === void 0) {
                emptyNodeCache.set(this.platform, emptyNodes = new _dom_js__WEBPACK_IMPORTED_MODULE_1__.FragmentNodeSequence(this.platform, this.platform.document.createDocumentFragment()));
            }
            return emptyNodes;
        }
        return new _dom_js__WEBPACK_IMPORTED_MODULE_1__.FragmentNodeSequence(this.platform, this.fragment.cloneNode(true));
    }
    // TODO: split up into 2 methods? getComponentFactory + getSyntheticFactory or something
    getComponentFactory(parentController, host, instruction, viewFactory, location) {
        if (parentController !== void 0) {
            this.parentControllerProvider.prepare(parentController);
        }
        if (host !== void 0) {
            // TODO: fix provider input type, Key is probably not a good constraint
            this.elementProvider.prepare(host);
        }
        if (instruction !== void 0) {
            this.instructionProvider.prepare(instruction);
        }
        if (location !== void 0) {
            this.renderLocationProvider.prepare(location);
        }
        if (viewFactory !== void 0) {
            this.factoryProvider.prepare(viewFactory);
        }
        return this;
    }
    // #endregion
    // #region IComponentFactory api
    createComponent(resourceKey) {
        return this.container.get(resourceKey);
    }
    render(flags, controller, targets, definition, host) {
        if (targets.length !== definition.instructions.length) {
            throw new Error(`The compiled template is not aligned with the render instructions. There are ${targets.length} targets and ${definition.instructions.length} instructions.`);
        }
        for (let i = 0; i < targets.length; ++i) {
            this.renderChildren(
            /* flags        */ flags, 
            /* instructions */ definition.instructions[i], 
            /* controller   */ controller, 
            /* target       */ targets[i]);
        }
        if (host !== void 0 && host !== null) {
            this.renderChildren(
            /* flags        */ flags, 
            /* instructions */ definition.surrogates, 
            /* controller   */ controller, 
            /* target       */ host);
        }
    }
    renderChildren(flags, instructions, controller, target) {
        for (let i = 0; i < instructions.length; ++i) {
            const current = instructions[i];
            this.renderers[current.type].render(flags, this, controller, target, current);
        }
    }
    dispose() {
        this.elementProvider.dispose();
    }
    // #endregion
    // #region IProjectionProvider api
    registerProjections(projections, scope) {
        this.projectionProvider.registerProjections(projections, scope);
    }
    getProjectionFor(instruction) {
        return this.projectionProvider.getProjectionFor(instruction);
    }
}
/** @internal */
class ViewFactoryProvider {
    constructor() {
        this.factory = null;
    }
    prepare(factory) {
        this.factory = factory;
    }
    get $isResolver() { return true; }
    resolve(_handler, _requestor) {
        const factory = this.factory;
        if (factory === null) {
            throw new Error('Cannot resolve ViewFactory before the provider was prepared.');
        }
        if (typeof factory.name !== 'string' || factory.name.length === 0) {
            throw new Error('Cannot resolve ViewFactory without a (valid) name.');
        }
        return factory;
    }
    dispose() {
        this.factory = null;
    }
}
//# sourceMappingURL=render-context.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/templating/styles.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/templating/styles.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cssModules": () => /* binding */ cssModules,
/* harmony export */   "CSSModulesProcessorRegistry": () => /* binding */ CSSModulesProcessorRegistry,
/* harmony export */   "shadowCSS": () => /* binding */ shadowCSS,
/* harmony export */   "IShadowDOMStyleFactory": () => /* binding */ IShadowDOMStyleFactory,
/* harmony export */   "ShadowDOMRegistry": () => /* binding */ ShadowDOMRegistry,
/* harmony export */   "IShadowDOMStyles": () => /* binding */ IShadowDOMStyles,
/* harmony export */   "IShadowDOMGlobalStyles": () => /* binding */ IShadowDOMGlobalStyles,
/* harmony export */   "AdoptedStyleSheetsStyles": () => /* binding */ AdoptedStyleSheetsStyles,
/* harmony export */   "StyleElementStyles": () => /* binding */ StyleElementStyles,
/* harmony export */   "StyleConfiguration": () => /* binding */ StyleConfiguration
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _app_task_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../app-task.js */ "./node_modules/@aurelia/runtime-html/dist/esm/app-task.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom.js */ "./node_modules/@aurelia/runtime-html/dist/esm/dom.js");
/* harmony import */ var _observation_class_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../observation/class-attribute-accessor.js */ "./node_modules/@aurelia/runtime-html/dist/esm/observation/class-attribute-accessor.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../platform.js */ "./node_modules/@aurelia/runtime-html/dist/esm/platform.js");
/* harmony import */ var _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../resources/custom-attribute.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-attribute.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};






function cssModules(...modules) {
    return new CSSModulesProcessorRegistry(modules);
}
class CSSModulesProcessorRegistry {
    constructor(modules) {
        this.modules = modules;
    }
    register(container) {
        var _a;
        const classLookup = Object.assign({}, ...this.modules);
        const ClassCustomAttribute = _resources_custom_attribute_js__WEBPACK_IMPORTED_MODULE_5__.CustomAttribute.define({
            name: 'class',
            bindables: ['value'],
        }, (_a = class CustomAttributeClass {
                constructor(element) {
                    this.element = element;
                }
                binding() {
                    this.valueChanged();
                }
                valueChanged() {
                    if (!this.value) {
                        this.element.className = '';
                        return;
                    }
                    this.element.className = (0,_observation_class_attribute_accessor_js__WEBPACK_IMPORTED_MODULE_3__.getClassesToAdd)(this.value).map(x => classLookup[x] || x).join(' ');
                }
            },
            _a.inject = [_dom_js__WEBPACK_IMPORTED_MODULE_2__.INode],
            _a));
        container.register(ClassCustomAttribute);
    }
}
function shadowCSS(...css) {
    return new ShadowDOMRegistry(css);
}
const IShadowDOMStyleFactory = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IShadowDOMStyleFactory', x => x.cachedCallback(handler => {
    if (AdoptedStyleSheetsStyles.supported(handler.get(_platform_js__WEBPACK_IMPORTED_MODULE_4__.IPlatform))) {
        return handler.get(AdoptedStyleSheetsStylesFactory);
    }
    return handler.get(StyleElementStylesFactory);
}));
class ShadowDOMRegistry {
    constructor(css) {
        this.css = css;
    }
    register(container) {
        const sharedStyles = container.get(IShadowDOMGlobalStyles);
        const factory = container.get(IShadowDOMStyleFactory);
        container.register(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(IShadowDOMStyles, factory.createStyles(this.css, sharedStyles)));
    }
}
let AdoptedStyleSheetsStylesFactory = class AdoptedStyleSheetsStylesFactory {
    constructor(p) {
        this.p = p;
        this.cache = new Map();
    }
    createStyles(localStyles, sharedStyles) {
        return new AdoptedStyleSheetsStyles(this.p, localStyles, this.cache, sharedStyles);
    }
};
AdoptedStyleSheetsStylesFactory = __decorate([
    __param(0, _platform_js__WEBPACK_IMPORTED_MODULE_4__.IPlatform)
], AdoptedStyleSheetsStylesFactory);
let StyleElementStylesFactory = class StyleElementStylesFactory {
    constructor(p) {
        this.p = p;
    }
    createStyles(localStyles, sharedStyles) {
        return new StyleElementStyles(this.p, localStyles, sharedStyles);
    }
};
StyleElementStylesFactory = __decorate([
    __param(0, _platform_js__WEBPACK_IMPORTED_MODULE_4__.IPlatform)
], StyleElementStylesFactory);
const IShadowDOMStyles = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IShadowDOMStyles');
const IShadowDOMGlobalStyles = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IShadowDOMGlobalStyles', x => x.instance({ applyTo: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.noop }));
class AdoptedStyleSheetsStyles {
    constructor(p, localStyles, styleSheetCache, sharedStyles = null) {
        this.sharedStyles = sharedStyles;
        this.styleSheets = localStyles.map(x => {
            let sheet;
            if (x instanceof p.CSSStyleSheet) {
                sheet = x;
            }
            else {
                sheet = styleSheetCache.get(x);
                if (sheet === void 0) {
                    sheet = new p.CSSStyleSheet();
                    sheet.replaceSync(x);
                    styleSheetCache.set(x, sheet);
                }
            }
            return sheet;
        });
    }
    static supported(p) {
        return 'adoptedStyleSheets' in p.ShadowRoot.prototype;
    }
    applyTo(shadowRoot) {
        if (this.sharedStyles !== null) {
            this.sharedStyles.applyTo(shadowRoot);
        }
        // https://wicg.github.io/construct-stylesheets/
        // https://developers.google.com/web/updates/2019/02/constructable-stylesheets
        shadowRoot.adoptedStyleSheets = [
            ...shadowRoot.adoptedStyleSheets,
            ...this.styleSheets
        ];
    }
}
class StyleElementStyles {
    constructor(p, localStyles, sharedStyles = null) {
        this.p = p;
        this.localStyles = localStyles;
        this.sharedStyles = sharedStyles;
    }
    applyTo(shadowRoot) {
        const styles = this.localStyles;
        const p = this.p;
        for (let i = styles.length - 1; i > -1; --i) {
            const element = p.document.createElement('style');
            element.innerHTML = styles[i];
            shadowRoot.prepend(element);
        }
        if (this.sharedStyles !== null) {
            this.sharedStyles.applyTo(shadowRoot);
        }
    }
}
const StyleConfiguration = {
    shadowDOM(config) {
        return _app_task_js__WEBPACK_IMPORTED_MODULE_1__.AppTask.with(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IContainer).beforeCreate().call(container => {
            if (config.sharedStyles != null) {
                const factory = container.get(IShadowDOMStyleFactory);
                container.register(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(IShadowDOMGlobalStyles, factory.createStyles(config.sharedStyles, null)));
            }
        });
    }
};
//# sourceMappingURL=styles.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/templating/view.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IViewFactory": () => /* binding */ IViewFactory,
/* harmony export */   "ViewFactory": () => /* binding */ ViewFactory,
/* harmony export */   "Views": () => /* binding */ Views,
/* harmony export */   "view": () => /* binding */ view,
/* harmony export */   "IViewLocator": () => /* binding */ IViewLocator,
/* harmony export */   "ViewLocator": () => /* binding */ ViewLocator
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");
/* harmony import */ var _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../resources/custom-element.js */ "./node_modules/@aurelia/runtime-html/dist/esm/resources/custom-element.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./controller.js */ "./node_modules/@aurelia/runtime-html/dist/esm/templating/controller.js");




const IViewFactory = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IViewFactory');
class ViewFactory {
    constructor(name, context, contentType, projectionScope = null) {
        this.name = name;
        this.context = context;
        this.contentType = contentType;
        this.projectionScope = projectionScope;
        this.isCaching = false;
        this.cache = null;
        this.cacheSize = -1;
    }
    setCacheSize(size, doNotOverrideIfAlreadySet) {
        if (size) {
            if (size === '*') {
                size = ViewFactory.maxCacheSize;
            }
            else if (typeof size === 'string') {
                size = parseInt(size, 10);
            }
            if (this.cacheSize === -1 || !doNotOverrideIfAlreadySet) {
                this.cacheSize = size;
            }
        }
        if (this.cacheSize > 0) {
            this.cache = [];
        }
        else {
            this.cache = null;
        }
        this.isCaching = this.cacheSize > 0;
    }
    canReturnToCache(controller) {
        return this.cache != null && this.cache.length < this.cacheSize;
    }
    tryReturnToCache(controller) {
        if (this.canReturnToCache(controller)) {
            this.cache.push(controller);
            return true;
        }
        return false;
    }
    create(flags, parentController) {
        const cache = this.cache;
        let controller;
        if (cache != null && cache.length > 0) {
            controller = cache.pop();
            return controller;
        }
        controller = _controller_js__WEBPACK_IMPORTED_MODULE_3__.Controller.forSyntheticView(null, this.context, this, flags, parentController);
        return controller;
    }
}
ViewFactory.maxCacheSize = 0xFFFF;
const seenViews = new WeakSet();
function notYetSeen($view) {
    return !seenViews.has($view);
}
function toCustomElementDefinition($view) {
    seenViews.add($view);
    return _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_2__.CustomElementDefinition.create($view);
}
const Views = {
    name: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.keyFor('views'),
    has(value) {
        return typeof value === 'function' && (_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.hasOwn(Views.name, value) || '$views' in value);
    },
    get(value) {
        if (typeof value === 'function' && '$views' in value) {
            // TODO: a `get` operation with side effects is not a good thing. Should refactor this to a proper resource kind.
            const $views = value.$views;
            const definitions = $views.filter(notYetSeen).map(toCustomElementDefinition);
            for (const def of definitions) {
                Views.add(value, def);
            }
        }
        let views = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(Views.name, value);
        if (views === void 0) {
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(Views.name, views = [], value);
        }
        return views;
    },
    add(Type, partialDefinition) {
        const definition = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_2__.CustomElementDefinition.create(partialDefinition);
        let views = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(Views.name, Type);
        if (views === void 0) {
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(Views.name, views = [definition], Type);
        }
        else {
            views.push(definition);
        }
        return views;
    },
};
function view(v) {
    return function (target) {
        Views.add(target, v);
    };
}
const IViewLocator = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IViewLocator', x => x.singleton(ViewLocator));
class ViewLocator {
    constructor() {
        this.modelInstanceToBoundComponent = new WeakMap();
        this.modelTypeToUnboundComponent = new Map();
    }
    getViewComponentForObject(object, viewNameOrSelector) {
        if (object) {
            const availableViews = Views.has(object.constructor) ? Views.get(object.constructor) : [];
            const resolvedViewName = typeof viewNameOrSelector === 'function'
                ? viewNameOrSelector(object, availableViews)
                : this.getViewName(availableViews, viewNameOrSelector);
            return this.getOrCreateBoundComponent(object, availableViews, resolvedViewName);
        }
        return null;
    }
    getOrCreateBoundComponent(object, availableViews, resolvedViewName) {
        let lookup = this.modelInstanceToBoundComponent.get(object);
        let BoundComponent;
        if (lookup === void 0) {
            lookup = {};
            this.modelInstanceToBoundComponent.set(object, lookup);
        }
        else {
            BoundComponent = lookup[resolvedViewName];
        }
        if (BoundComponent === void 0) {
            const UnboundComponent = this.getOrCreateUnboundComponent(object, availableViews, resolvedViewName);
            BoundComponent = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_2__.CustomElement.define(_resources_custom_element_js__WEBPACK_IMPORTED_MODULE_2__.CustomElement.getDefinition(UnboundComponent), class extends UnboundComponent {
                constructor() {
                    super(object);
                }
            });
            lookup[resolvedViewName] = BoundComponent;
        }
        return BoundComponent;
    }
    getOrCreateUnboundComponent(object, availableViews, resolvedViewName) {
        let lookup = this.modelTypeToUnboundComponent.get(object.constructor);
        let UnboundComponent;
        if (lookup === void 0) {
            lookup = {};
            this.modelTypeToUnboundComponent.set(object.constructor, lookup);
        }
        else {
            UnboundComponent = lookup[resolvedViewName];
        }
        if (UnboundComponent === void 0) {
            UnboundComponent = _resources_custom_element_js__WEBPACK_IMPORTED_MODULE_2__.CustomElement.define(this.getView(availableViews, resolvedViewName), class {
                constructor(viewModel) {
                    this.viewModel = viewModel;
                }
                define(controller, parentContainer, definition) {
                    const vm = this.viewModel;
                    controller.scope = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_1__.Scope.fromParent(controller.scope, vm);
                    if (vm.define !== void 0) {
                        return vm.define(controller, parentContainer, definition);
                    }
                }
            });
            const proto = UnboundComponent.prototype;
            if ('hydrating' in object) {
                proto.hydrating = function hydrating(controller) {
                    this.viewModel.hydrating(controller);
                };
            }
            if ('hydrated' in object) {
                proto.hydrated = function hydrated(controller) {
                    this.viewModel.hydrated(controller);
                };
            }
            if ('created' in object) {
                proto.created = function created(controller) {
                    this.viewModel.created(controller);
                };
            }
            if ('binding' in object) {
                proto.binding = function binding(initiator, parent, flags) {
                    return this.viewModel.binding(initiator, parent, flags);
                };
            }
            if ('bound' in object) {
                proto.bound = function bound(initiator, parent, flags) {
                    return this.viewModel.bound(initiator, parent, flags);
                };
            }
            if ('attaching' in object) {
                proto.attaching = function attaching(initiator, parent, flags) {
                    return this.viewModel.attaching(initiator, parent, flags);
                };
            }
            if ('attached' in object) {
                proto.attached = function attached(initiator, flags) {
                    return this.viewModel.attached(initiator, flags);
                };
            }
            if ('detaching' in object) {
                proto.detaching = function detaching(initiator, parent, flags) {
                    return this.viewModel.detaching(initiator, parent, flags);
                };
            }
            if ('unbinding' in object) {
                proto.unbinding = function unbinding(initiator, parent, flags) {
                    return this.viewModel.unbinding(initiator, parent, flags);
                };
            }
            if ('dispose' in object) {
                proto.dispose = function dispose() {
                    this.viewModel.dispose();
                };
            }
            lookup[resolvedViewName] = UnboundComponent;
        }
        return UnboundComponent;
    }
    getViewName(views, requestedName) {
        if (requestedName) {
            return requestedName;
        }
        if (views.length === 1) {
            return views[0].name;
        }
        return 'default-view';
    }
    getView(views, name) {
        const v = views.find(x => x.name === name);
        if (v === void 0) {
            throw new Error(`Could not find view: ${name}`);
        }
        return v;
    }
}
//# sourceMappingURL=view.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/templating/watchers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/templating/watchers.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComputedWatcher": () => /* binding */ ComputedWatcher,
/* harmony export */   "ExpressionWatcher": () => /* binding */ ExpressionWatcher
/* harmony export */ });
/* harmony import */ var _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime */ "./node_modules/@aurelia/runtime/dist/esm/index.js");

const { enter, exit } = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.ConnectableSwitcher;
const { wrap, unwrap } = _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.ProxyObservable;
class ComputedWatcher {
    constructor(obj, observerLocator, get, cb, useProxy) {
        this.obj = obj;
        this.observerLocator = observerLocator;
        this.get = get;
        this.cb = cb;
        this.useProxy = useProxy;
        this.interceptor = this;
        this.value = void 0;
        this.isBound = false;
        // todo: maybe use a counter allow recursive call to a certain level
        this.running = false;
        _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable.assignIdTo(this);
    }
    handleChange() {
        this.run();
    }
    handleCollectionChange() {
        this.run();
    }
    $bind() {
        if (this.isBound) {
            return;
        }
        this.isBound = true;
        this.compute();
    }
    $unbind() {
        if (!this.isBound) {
            return;
        }
        this.isBound = false;
        this.obs.clear(true);
    }
    run() {
        if (!this.isBound || this.running) {
            return;
        }
        const obj = this.obj;
        const oldValue = this.value;
        const newValue = this.compute();
        if (!Object.is(newValue, oldValue)) {
            // should optionally queue
            this.cb.call(obj, newValue, oldValue, obj);
        }
    }
    compute() {
        this.running = true;
        this.obs.version++;
        try {
            enter(this);
            return this.value = unwrap(this.get.call(void 0, this.useProxy ? wrap(this.obj) : this.obj, this));
        }
        finally {
            this.obs.clear(false);
            this.running = false;
            exit(this);
        }
    }
}
class ExpressionWatcher {
    constructor(scope, locator, observerLocator, expression, callback) {
        this.scope = scope;
        this.locator = locator;
        this.observerLocator = observerLocator;
        this.expression = expression;
        this.callback = callback;
        this.interceptor = this;
        this.isBound = false;
        this.obj = scope.bindingContext;
        _aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable.assignIdTo(this);
    }
    handleChange(value) {
        const expr = this.expression;
        const obj = this.obj;
        const oldValue = this.value;
        const canOptimize = expr.$kind === 10082 /* AccessScope */ && this.obs.count === 1;
        if (!canOptimize) {
            this.obs.version++;
            value = expr.evaluate(0, this.scope, null, this.locator, this);
            this.obs.clear(false);
        }
        if (!Object.is(value, oldValue)) {
            this.value = value;
            // should optionally queue for batch synchronous
            this.callback.call(obj, value, oldValue, obj);
        }
    }
    $bind() {
        if (this.isBound) {
            return;
        }
        this.isBound = true;
        this.obs.version++;
        this.value = this.expression.evaluate(0 /* none */, this.scope, null, this.locator, this);
        this.obs.clear(false);
    }
    $unbind() {
        if (!this.isBound) {
            return;
        }
        this.isBound = false;
        this.obs.clear(true);
        this.value = void 0;
    }
}
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable)(ComputedWatcher);
(0,_aurelia_runtime__WEBPACK_IMPORTED_MODULE_0__.connectable)(ExpressionWatcher);
//# sourceMappingURL=watchers.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime-html/dist/esm/watch.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aurelia/runtime-html/dist/esm/watch.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "watch": () => /* binding */ watch,
/* harmony export */   "Watch": () => /* binding */ Watch
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");

function watch(expressionOrPropertyAccessFn, changeHandlerOrCallback) {
    if (!expressionOrPropertyAccessFn) {
        throw new Error('Invalid watch config. Expected an expression or a fn');
    }
    return function decorator(target, key, descriptor) {
        const isClassDecorator = key == null;
        const Type = isClassDecorator ? target : target.constructor;
        // basic validation
        if (isClassDecorator) {
            if (typeof changeHandlerOrCallback !== 'function'
                && (changeHandlerOrCallback == null || !(changeHandlerOrCallback in Type.prototype))) {
                throw new Error(`Invalid change handler config. Method "${String(changeHandlerOrCallback)}" not found in class ${Type.name}`);
            }
        }
        else if (typeof descriptor?.value !== 'function') {
            throw new Error(`decorated target ${String(key)} is not a class method.`);
        }
        Watch.add(Type, new WatchDefinition(expressionOrPropertyAccessFn, isClassDecorator ? changeHandlerOrCallback : descriptor.value));
    };
}
class WatchDefinition {
    constructor(expression, callback) {
        this.expression = expression;
        this.callback = callback;
    }
}
const noDefinitions = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray;
const Watch = {
    name: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor('watch'),
    add(Type, definition) {
        let watchDefinitions = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(Watch.name, Type);
        if (watchDefinitions == null) {
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(Watch.name, watchDefinitions = [], Type);
        }
        watchDefinitions.push(definition);
    },
    getAnnotation(Type) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(Watch.name, Type) ?? noDefinitions;
    },
};
//# sourceMappingURL=watch.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/alias.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/alias.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "alias": () => /* binding */ alias,
/* harmony export */   "registerAliases": () => /* binding */ registerAliases
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");

function alias(...aliases) {
    return function (target) {
        const key = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor('aliases');
        const existing = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(key, target);
        if (existing === void 0) {
            _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(key, aliases, target);
        }
        else {
            existing.push(...aliases);
        }
    };
}
function registerAliases(aliases, resource, key, container) {
    for (let i = 0, ii = aliases.length; i < ii; ++i) {
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.aliasTo(key, resource.keyFrom(aliases[i])).register(container);
    }
}
//# sourceMappingURL=alias.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/binding-behavior.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/binding-behavior.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindingBehaviorStrategy": () => /* binding */ BindingBehaviorStrategy,
/* harmony export */   "bindingBehavior": () => /* binding */ bindingBehavior,
/* harmony export */   "BindingBehaviorDefinition": () => /* binding */ BindingBehaviorDefinition,
/* harmony export */   "BindingBehaviorFactory": () => /* binding */ BindingBehaviorFactory,
/* harmony export */   "BindingInterceptor": () => /* binding */ BindingInterceptor,
/* harmony export */   "BindingBehavior": () => /* binding */ BindingBehavior
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _alias_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alias.js */ "./node_modules/@aurelia/runtime/dist/esm/alias.js");


var BindingBehaviorStrategy;
(function (BindingBehaviorStrategy) {
    BindingBehaviorStrategy[BindingBehaviorStrategy["singleton"] = 1] = "singleton";
    BindingBehaviorStrategy[BindingBehaviorStrategy["interceptor"] = 2] = "interceptor";
})(BindingBehaviorStrategy || (BindingBehaviorStrategy = {}));
function bindingBehavior(nameOrDef) {
    return function (target) {
        return BindingBehavior.define(nameOrDef, target);
    };
}
class BindingBehaviorDefinition {
    constructor(Type, name, aliases, key, strategy) {
        this.Type = Type;
        this.name = name;
        this.aliases = aliases;
        this.key = key;
        this.strategy = strategy;
    }
    static create(nameOrDef, Type) {
        let name;
        let def;
        if (typeof nameOrDef === 'string') {
            name = nameOrDef;
            def = { name };
        }
        else {
            name = nameOrDef.name;
            def = nameOrDef;
        }
        const inheritsFromInterceptor = Object.getPrototypeOf(Type) === BindingInterceptor;
        return new BindingBehaviorDefinition(Type, (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(BindingBehavior.getAnnotation(Type, 'name'), name), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(BindingBehavior.getAnnotation(Type, 'aliases'), def.aliases, Type.aliases), BindingBehavior.keyFrom(name), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.fromAnnotationOrDefinitionOrTypeOrDefault)('strategy', def, Type, () => inheritsFromInterceptor ? 2 /* interceptor */ : 1 /* singleton */));
    }
    register(container) {
        const { Type, key, aliases, strategy } = this;
        switch (strategy) {
            case 1 /* singleton */:
                _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.singleton(key, Type).register(container);
                break;
            case 2 /* interceptor */:
                _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(key, new BindingBehaviorFactory(container, Type)).register(container);
                break;
        }
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.aliasTo(key, Type).register(container);
        (0,_alias_js__WEBPACK_IMPORTED_MODULE_1__.registerAliases)(aliases, BindingBehavior, key, container);
    }
}
class BindingBehaviorFactory {
    constructor(container, Type) {
        this.container = container;
        this.Type = Type;
        this.deps = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.getDependencies(Type);
    }
    construct(binding, expr) {
        const container = this.container;
        const deps = this.deps;
        switch (deps.length) {
            case 0:
            case 1:
            case 2:
                // TODO(fkleuver): fix this cast
                return new this.Type(binding, expr);
            case 3:
                return new this.Type(container.get(deps[0]), binding, expr);
            case 4:
                return new this.Type(container.get(deps[0]), container.get(deps[1]), binding, expr);
            default:
                return new this.Type(...deps.map(d => container.get(d)), binding, expr);
        }
    }
}
class BindingInterceptor {
    constructor(binding, expr) {
        this.binding = binding;
        this.expr = expr;
        this.interceptor = this;
        let interceptor;
        while (binding.interceptor !== this) {
            interceptor = binding.interceptor;
            binding.interceptor = this;
            binding = interceptor;
        }
    }
    get id() {
        return this.binding.id;
    }
    get observerLocator() {
        return this.binding.observerLocator;
    }
    get locator() {
        return this.binding.locator;
    }
    get $scope() {
        return this.binding.$scope;
    }
    get $hostScope() {
        return this.binding.$hostScope;
    }
    get isBound() {
        return this.binding.isBound;
    }
    get obs() {
        return this.binding.obs;
    }
    updateTarget(value, flags) {
        this.binding.updateTarget(value, flags);
    }
    updateSource(value, flags) {
        this.binding.updateSource(value, flags);
    }
    callSource(args) {
        return this.binding.callSource(args);
    }
    handleChange(newValue, previousValue, flags) {
        this.binding.handleChange(newValue, previousValue, flags);
    }
    handleCollectionChange(indexMap, flags) {
        this.binding.handleCollectionChange(indexMap, flags);
    }
    observeProperty(obj, key) {
        this.binding.observeProperty(obj, key);
    }
    observeCollection(observer) {
        this.binding.observeCollection(observer);
    }
    $bind(flags, scope, hostScope) {
        this.binding.$bind(flags, scope, hostScope);
    }
    $unbind(flags) {
        this.binding.$unbind(flags);
    }
}
const BindingBehavior = {
    name: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.keyFor('binding-behavior'),
    keyFrom(name) {
        return `${BindingBehavior.name}:${name}`;
    },
    isType(value) {
        return typeof value === 'function' && _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.hasOwn(BindingBehavior.name, value);
    },
    define(nameOrDef, Type) {
        const definition = BindingBehaviorDefinition.create(nameOrDef, Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(BindingBehavior.name, definition, definition.Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(BindingBehavior.name, definition, definition);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.appendTo(Type, BindingBehavior.name);
        return definition.Type;
    },
    getDefinition(Type) {
        const def = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(BindingBehavior.name, Type);
        if (def === void 0) {
            throw new Error(`No definition found for type ${Type.name}`);
        }
        return def;
    },
    annotate(Type, prop, value) {
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor(prop), value, Type);
    },
    getAnnotation(Type, prop) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor(prop), Type);
    },
};
//# sourceMappingURL=binding-behavior.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/binding/ast.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/binding/ast.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExpressionKind": () => /* binding */ ExpressionKind,
/* harmony export */   "Unparser": () => /* binding */ Unparser,
/* harmony export */   "CustomExpression": () => /* binding */ CustomExpression,
/* harmony export */   "BindingBehaviorExpression": () => /* binding */ BindingBehaviorExpression,
/* harmony export */   "ValueConverterExpression": () => /* binding */ ValueConverterExpression,
/* harmony export */   "AssignExpression": () => /* binding */ AssignExpression,
/* harmony export */   "ConditionalExpression": () => /* binding */ ConditionalExpression,
/* harmony export */   "AccessThisExpression": () => /* binding */ AccessThisExpression,
/* harmony export */   "AccessScopeExpression": () => /* binding */ AccessScopeExpression,
/* harmony export */   "AccessMemberExpression": () => /* binding */ AccessMemberExpression,
/* harmony export */   "AccessKeyedExpression": () => /* binding */ AccessKeyedExpression,
/* harmony export */   "CallScopeExpression": () => /* binding */ CallScopeExpression,
/* harmony export */   "CallMemberExpression": () => /* binding */ CallMemberExpression,
/* harmony export */   "CallFunctionExpression": () => /* binding */ CallFunctionExpression,
/* harmony export */   "BinaryExpression": () => /* binding */ BinaryExpression,
/* harmony export */   "UnaryExpression": () => /* binding */ UnaryExpression,
/* harmony export */   "PrimitiveLiteralExpression": () => /* binding */ PrimitiveLiteralExpression,
/* harmony export */   "HtmlLiteralExpression": () => /* binding */ HtmlLiteralExpression,
/* harmony export */   "ArrayLiteralExpression": () => /* binding */ ArrayLiteralExpression,
/* harmony export */   "ObjectLiteralExpression": () => /* binding */ ObjectLiteralExpression,
/* harmony export */   "TemplateExpression": () => /* binding */ TemplateExpression,
/* harmony export */   "TaggedTemplateExpression": () => /* binding */ TaggedTemplateExpression,
/* harmony export */   "ArrayBindingPattern": () => /* binding */ ArrayBindingPattern,
/* harmony export */   "ObjectBindingPattern": () => /* binding */ ObjectBindingPattern,
/* harmony export */   "BindingIdentifier": () => /* binding */ BindingIdentifier,
/* harmony export */   "ForOfStatement": () => /* binding */ ForOfStatement,
/* harmony export */   "Interpolation": () => /* binding */ Interpolation
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _observation_binding_context_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observation/binding-context.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/binding-context.js");
/* harmony import */ var _observation_signaler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observation/signaler.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/signaler.js");
/* harmony import */ var _binding_behavior_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../binding-behavior.js */ "./node_modules/@aurelia/runtime/dist/esm/binding-behavior.js");
/* harmony import */ var _value_converter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../value-converter.js */ "./node_modules/@aurelia/runtime/dist/esm/value-converter.js");
/* eslint-disable eqeqeq */
/* eslint-disable @typescript-eslint/restrict-template-expressions */





var ExpressionKind;
(function (ExpressionKind) {
    ExpressionKind[ExpressionKind["Connects"] = 32] = "Connects";
    ExpressionKind[ExpressionKind["Observes"] = 64] = "Observes";
    ExpressionKind[ExpressionKind["CallsFunction"] = 128] = "CallsFunction";
    ExpressionKind[ExpressionKind["HasAncestor"] = 256] = "HasAncestor";
    ExpressionKind[ExpressionKind["IsPrimary"] = 512] = "IsPrimary";
    ExpressionKind[ExpressionKind["IsLeftHandSide"] = 1024] = "IsLeftHandSide";
    ExpressionKind[ExpressionKind["HasBind"] = 2048] = "HasBind";
    ExpressionKind[ExpressionKind["HasUnbind"] = 4096] = "HasUnbind";
    ExpressionKind[ExpressionKind["IsAssignable"] = 8192] = "IsAssignable";
    ExpressionKind[ExpressionKind["IsLiteral"] = 16384] = "IsLiteral";
    ExpressionKind[ExpressionKind["IsResource"] = 32768] = "IsResource";
    ExpressionKind[ExpressionKind["IsForDeclaration"] = 65536] = "IsForDeclaration";
    ExpressionKind[ExpressionKind["Type"] = 31] = "Type";
    // ---------------------------------------------------------------------------------------------------------------------------
    ExpressionKind[ExpressionKind["AccessThis"] = 1793] = "AccessThis";
    ExpressionKind[ExpressionKind["AccessScope"] = 10082] = "AccessScope";
    ExpressionKind[ExpressionKind["ArrayLiteral"] = 17955] = "ArrayLiteral";
    ExpressionKind[ExpressionKind["ObjectLiteral"] = 17956] = "ObjectLiteral";
    ExpressionKind[ExpressionKind["PrimitiveLiteral"] = 17925] = "PrimitiveLiteral";
    ExpressionKind[ExpressionKind["Template"] = 17958] = "Template";
    ExpressionKind[ExpressionKind["Unary"] = 39] = "Unary";
    ExpressionKind[ExpressionKind["CallScope"] = 1448] = "CallScope";
    ExpressionKind[ExpressionKind["CallMember"] = 1161] = "CallMember";
    ExpressionKind[ExpressionKind["CallFunction"] = 1162] = "CallFunction";
    ExpressionKind[ExpressionKind["AccessMember"] = 9323] = "AccessMember";
    ExpressionKind[ExpressionKind["AccessKeyed"] = 9324] = "AccessKeyed";
    ExpressionKind[ExpressionKind["TaggedTemplate"] = 1197] = "TaggedTemplate";
    ExpressionKind[ExpressionKind["Binary"] = 46] = "Binary";
    ExpressionKind[ExpressionKind["Conditional"] = 63] = "Conditional";
    ExpressionKind[ExpressionKind["Assign"] = 8208] = "Assign";
    ExpressionKind[ExpressionKind["ValueConverter"] = 36913] = "ValueConverter";
    ExpressionKind[ExpressionKind["BindingBehavior"] = 38962] = "BindingBehavior";
    ExpressionKind[ExpressionKind["HtmlLiteral"] = 51] = "HtmlLiteral";
    ExpressionKind[ExpressionKind["ArrayBindingPattern"] = 65556] = "ArrayBindingPattern";
    ExpressionKind[ExpressionKind["ObjectBindingPattern"] = 65557] = "ObjectBindingPattern";
    ExpressionKind[ExpressionKind["BindingIdentifier"] = 65558] = "BindingIdentifier";
    ExpressionKind[ExpressionKind["ForOfStatement"] = 6199] = "ForOfStatement";
    ExpressionKind[ExpressionKind["Interpolation"] = 24] = "Interpolation"; //
})(ExpressionKind || (ExpressionKind = {}));
class Unparser {
    constructor() {
        this.text = '';
    }
    static unparse(expr) {
        const visitor = new Unparser();
        expr.accept(visitor);
        return visitor.text;
    }
    visitAccessMember(expr) {
        expr.object.accept(this);
        this.text += `.${expr.name}`;
    }
    visitAccessKeyed(expr) {
        expr.object.accept(this);
        this.text += '[';
        expr.key.accept(this);
        this.text += ']';
    }
    visitAccessThis(expr) {
        if (expr.ancestor === 0) {
            this.text += '$this';
            return;
        }
        this.text += '$parent';
        let i = expr.ancestor - 1;
        while (i--) {
            this.text += '.$parent';
        }
    }
    visitAccessScope(expr) {
        let i = expr.ancestor;
        while (i--) {
            this.text += '$parent.';
        }
        this.text += expr.name;
    }
    visitArrayLiteral(expr) {
        const elements = expr.elements;
        this.text += '[';
        for (let i = 0, length = elements.length; i < length; ++i) {
            if (i !== 0) {
                this.text += ',';
            }
            elements[i].accept(this);
        }
        this.text += ']';
    }
    visitObjectLiteral(expr) {
        const keys = expr.keys;
        const values = expr.values;
        this.text += '{';
        for (let i = 0, length = keys.length; i < length; ++i) {
            if (i !== 0) {
                this.text += ',';
            }
            this.text += `'${keys[i]}':`;
            values[i].accept(this);
        }
        this.text += '}';
    }
    visitPrimitiveLiteral(expr) {
        this.text += '(';
        if (typeof expr.value === 'string') {
            const escaped = expr.value.replace(/'/g, '\\\'');
            this.text += `'${escaped}'`;
        }
        else {
            this.text += `${expr.value}`;
        }
        this.text += ')';
    }
    visitCallFunction(expr) {
        this.text += '(';
        expr.func.accept(this);
        this.writeArgs(expr.args);
        this.text += ')';
    }
    visitCallMember(expr) {
        this.text += '(';
        expr.object.accept(this);
        this.text += `.${expr.name}`;
        this.writeArgs(expr.args);
        this.text += ')';
    }
    visitCallScope(expr) {
        this.text += '(';
        let i = expr.ancestor;
        while (i--) {
            this.text += '$parent.';
        }
        this.text += expr.name;
        this.writeArgs(expr.args);
        this.text += ')';
    }
    visitTemplate(expr) {
        const { cooked, expressions } = expr;
        const length = expressions.length;
        this.text += '`';
        this.text += cooked[0];
        for (let i = 0; i < length; i++) {
            expressions[i].accept(this);
            this.text += cooked[i + 1];
        }
        this.text += '`';
    }
    visitTaggedTemplate(expr) {
        const { cooked, expressions } = expr;
        const length = expressions.length;
        expr.func.accept(this);
        this.text += '`';
        this.text += cooked[0];
        for (let i = 0; i < length; i++) {
            expressions[i].accept(this);
            this.text += cooked[i + 1];
        }
        this.text += '`';
    }
    visitUnary(expr) {
        this.text += `(${expr.operation}`;
        if (expr.operation.charCodeAt(0) >= /* a */ 97) {
            this.text += ' ';
        }
        expr.expression.accept(this);
        this.text += ')';
    }
    visitBinary(expr) {
        this.text += '(';
        expr.left.accept(this);
        if (expr.operation.charCodeAt(0) === /* i */ 105) {
            this.text += ` ${expr.operation} `;
        }
        else {
            this.text += expr.operation;
        }
        expr.right.accept(this);
        this.text += ')';
    }
    visitConditional(expr) {
        this.text += '(';
        expr.condition.accept(this);
        this.text += '?';
        expr.yes.accept(this);
        this.text += ':';
        expr.no.accept(this);
        this.text += ')';
    }
    visitAssign(expr) {
        this.text += '(';
        expr.target.accept(this);
        this.text += '=';
        expr.value.accept(this);
        this.text += ')';
    }
    visitValueConverter(expr) {
        const args = expr.args;
        expr.expression.accept(this);
        this.text += `|${expr.name}`;
        for (let i = 0, length = args.length; i < length; ++i) {
            this.text += ':';
            args[i].accept(this);
        }
    }
    visitBindingBehavior(expr) {
        const args = expr.args;
        expr.expression.accept(this);
        this.text += `&${expr.name}`;
        for (let i = 0, length = args.length; i < length; ++i) {
            this.text += ':';
            args[i].accept(this);
        }
    }
    visitArrayBindingPattern(expr) {
        const elements = expr.elements;
        this.text += '[';
        for (let i = 0, length = elements.length; i < length; ++i) {
            if (i !== 0) {
                this.text += ',';
            }
            elements[i].accept(this);
        }
        this.text += ']';
    }
    visitObjectBindingPattern(expr) {
        const keys = expr.keys;
        const values = expr.values;
        this.text += '{';
        for (let i = 0, length = keys.length; i < length; ++i) {
            if (i !== 0) {
                this.text += ',';
            }
            this.text += `'${keys[i]}':`;
            values[i].accept(this);
        }
        this.text += '}';
    }
    visitBindingIdentifier(expr) {
        this.text += expr.name;
    }
    visitHtmlLiteral(expr) { throw new Error('visitHtmlLiteral'); }
    visitForOfStatement(expr) {
        expr.declaration.accept(this);
        this.text += ' of ';
        expr.iterable.accept(this);
    }
    visitInterpolation(expr) {
        const { parts, expressions } = expr;
        const length = expressions.length;
        this.text += '${';
        this.text += parts[0];
        for (let i = 0; i < length; i++) {
            expressions[i].accept(this);
            this.text += parts[i + 1];
        }
        this.text += '}';
    }
    writeArgs(args) {
        this.text += '(';
        for (let i = 0, length = args.length; i < length; ++i) {
            if (i !== 0) {
                this.text += ',';
            }
            args[i].accept(this);
        }
        this.text += ')';
    }
}
function chooseScope(accessHostScope, s, hs) {
    if (accessHostScope) {
        if (hs === null || hs === void 0) {
            throw new Error('Host scope is missing. Are you using `$host` outside the `au-slot`? Or missing the `au-slot` attribute?');
        }
        return hs;
    }
    return s;
}
class CustomExpression {
    constructor(value) {
        this.value = value;
    }
    evaluate(_f, _s, _hs, _l, _c) {
        return this.value;
    }
}
class BindingBehaviorExpression {
    constructor(expression, name, args) {
        this.expression = expression;
        this.name = name;
        this.args = args;
        this.behaviorKey = _binding_behavior_js__WEBPACK_IMPORTED_MODULE_3__.BindingBehavior.keyFrom(name);
    }
    get $kind() { return 38962 /* BindingBehavior */; }
    get hasBind() { return true; }
    get hasUnbind() { return true; }
    evaluate(f, s, hs, l, c) {
        return this.expression.evaluate(f, s, hs, l, c);
    }
    assign(f, s, hs, l, val) {
        return this.expression.assign(f, s, hs, l, val);
    }
    bind(f, s, hs, b) {
        if (this.expression.hasBind) {
            this.expression.bind(f, s, hs, b);
        }
        const behavior = b.locator.get(this.behaviorKey);
        if (behavior == null) {
            throw new Error(`BindingBehavior named '${this.name}' could not be found. Did you forget to register it as a dependency?`);
        }
        if (!(behavior instanceof _binding_behavior_js__WEBPACK_IMPORTED_MODULE_3__.BindingBehaviorFactory)) {
            if (b[this.behaviorKey] === void 0) {
                b[this.behaviorKey] = behavior;
                behavior.bind.call(behavior, f, s, hs, b, ...this.args.map(a => a.evaluate(f, s, hs, b.locator, null)));
            }
            else {
                throw new Error(`BindingBehavior named '${this.name}' already applied.`);
            }
        }
    }
    unbind(f, s, hs, b) {
        const key = this.behaviorKey;
        const $b = b;
        if ($b[key] !== void 0) {
            if (typeof $b[key].unbind === 'function') {
                $b[key].unbind(f, s, hs, b);
            }
            $b[key] = void 0;
        }
        if (this.expression.hasUnbind) {
            this.expression.unbind(f, s, hs, b);
        }
    }
    accept(visitor) {
        return visitor.visitBindingBehavior(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class ValueConverterExpression {
    constructor(expression, name, args) {
        this.expression = expression;
        this.name = name;
        this.args = args;
        this.converterKey = _value_converter_js__WEBPACK_IMPORTED_MODULE_4__.ValueConverter.keyFrom(name);
    }
    get $kind() { return 36913 /* ValueConverter */; }
    get hasBind() { return false; }
    get hasUnbind() { return true; }
    evaluate(f, s, hs, l, c) {
        const vc = l.get(this.converterKey);
        if (vc == null) {
            throw new Error(`ValueConverter named '${this.name}' could not be found. Did you forget to register it as a dependency?`);
        }
        // note: the cast is expected. To connect, it just needs to be a IConnectable
        // though to work with signal, it needs to have `handleChange`
        // so having `handleChange` as a guard in the connectable as a safe measure is needed
        // to make sure signaler works
        if (c !== null && ('handleChange' in c)) {
            const signals = vc.signals;
            if (signals != null) {
                const signaler = l.get(_observation_signaler_js__WEBPACK_IMPORTED_MODULE_2__.ISignaler);
                for (let i = 0, ii = signals.length; i < ii; ++i) {
                    signaler.addSignalListener(signals[i], c);
                }
            }
        }
        if ('toView' in vc) {
            return vc.toView(this.expression.evaluate(f, s, hs, l, c), ...this.args.map(a => a.evaluate(f, s, hs, l, c)));
        }
        return this.expression.evaluate(f, s, hs, l, c);
    }
    assign(f, s, hs, l, val) {
        const vc = l.get(this.converterKey);
        if (vc == null) {
            throw new Error(`ValueConverter named '${this.name}' could not be found. Did you forget to register it as a dependency?`);
        }
        if ('fromView' in vc) {
            val = vc.fromView(val, ...this.args.map(a => a.evaluate(f, s, hs, l, null)));
        }
        return this.expression.assign(f, s, hs, l, val);
    }
    unbind(_f, _s, _hs, b) {
        const vc = b.locator.get(this.converterKey);
        if (vc.signals === void 0) {
            return;
        }
        const signaler = b.locator.get(_observation_signaler_js__WEBPACK_IMPORTED_MODULE_2__.ISignaler);
        for (let i = 0; i < vc.signals.length; ++i) {
            // the cast is correct, as the value converter expression would only add
            // a IConnectable that also implements `ISubscriber` interface to the signaler
            signaler.removeSignalListener(vc.signals[i], b);
        }
    }
    accept(visitor) {
        return visitor.visitValueConverter(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class AssignExpression {
    constructor(target, value) {
        this.target = target;
        this.value = value;
    }
    get $kind() { return 8208 /* Assign */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        return this.target.assign(f, s, hs, l, this.value.evaluate(f, s, hs, l, c));
    }
    assign(f, s, hs, l, val) {
        this.value.assign(f, s, hs, l, val);
        return this.target.assign(f, s, hs, l, val);
    }
    accept(visitor) {
        return visitor.visitAssign(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class ConditionalExpression {
    constructor(condition, yes, no) {
        this.condition = condition;
        this.yes = yes;
        this.no = no;
    }
    get $kind() { return 63 /* Conditional */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        return this.condition.evaluate(f, s, hs, l, c) ? this.yes.evaluate(f, s, hs, l, c) : this.no.evaluate(f, s, hs, l, c);
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitConditional(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class AccessThisExpression {
    constructor(ancestor = 0) {
        this.ancestor = ancestor;
    }
    get $kind() { return 1793 /* AccessThis */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(_f, s, hs, _l, _c) {
        if (this === AccessThisExpression.$host) {
            s = chooseScope(true, s, hs);
        }
        let oc = s.overrideContext;
        let currentScope = s;
        let i = this.ancestor;
        while (i-- && oc) {
            currentScope = currentScope.parentScope;
            oc = currentScope?.overrideContext ?? null;
        }
        return i < 1 && oc ? oc.bindingContext : void 0;
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitAccessThis(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
AccessThisExpression.$this = new AccessThisExpression(0);
// $host and $this are loosely the same thing. $host is used in the context of `au-slot` with the primary objective of determining the s.
AccessThisExpression.$host = new AccessThisExpression(0);
AccessThisExpression.$parent = new AccessThisExpression(1);
class AccessScopeExpression {
    constructor(name, ancestor = 0, accessHostScope = false) {
        this.name = name;
        this.ancestor = ancestor;
        this.accessHostScope = accessHostScope;
    }
    get $kind() { return 10082 /* AccessScope */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, _l, c) {
        const obj = _observation_binding_context_js__WEBPACK_IMPORTED_MODULE_1__.BindingContext.get(chooseScope(this.accessHostScope, s, hs), this.name, this.ancestor, f, hs);
        if (c !== null) {
            c.observeProperty(obj, this.name);
        }
        const evaluatedValue = obj[this.name];
        if (f & 4 /* isStrictBindingStrategy */) {
            return evaluatedValue;
        }
        return evaluatedValue == null ? '' : evaluatedValue;
    }
    assign(f, s, hs, _l, val) {
        const obj = _observation_binding_context_js__WEBPACK_IMPORTED_MODULE_1__.BindingContext.get(chooseScope(this.accessHostScope, s, hs), this.name, this.ancestor, f, hs);
        if (obj instanceof Object) {
            if (obj.$observers?.[this.name] !== void 0) {
                obj.$observers[this.name].setValue(val, f);
                return val;
            }
            else {
                return obj[this.name] = val;
            }
        }
        return void 0;
    }
    accept(visitor) {
        return visitor.visitAccessScope(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class AccessMemberExpression {
    constructor(object, name) {
        this.object = object;
        this.name = name;
    }
    get $kind() { return 9323 /* AccessMember */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        const instance = this.object.evaluate(f, s, hs, l, (f & 2048 /* observeLeafPropertiesOnly */) > 0 ? null : c);
        if (f & 4 /* isStrictBindingStrategy */) {
            if (instance == null) {
                return instance;
            }
            if (c !== null) {
                c.observeProperty(instance, this.name);
            }
            return instance[this.name];
        }
        if (c !== null && instance instanceof Object) {
            c.observeProperty(instance, this.name);
        }
        return instance ? instance[this.name] : '';
    }
    assign(f, s, hs, l, val) {
        const obj = this.object.evaluate(f, s, hs, l, null);
        if (obj instanceof Object) {
            if (obj.$observers !== void 0 && obj.$observers[this.name] !== void 0) {
                obj.$observers[this.name].setValue(val, f);
            }
            else {
                obj[this.name] = val;
            }
        }
        else {
            this.object.assign(f, s, hs, l, { [this.name]: val });
        }
        return val;
    }
    accept(visitor) {
        return visitor.visitAccessMember(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class AccessKeyedExpression {
    constructor(object, key) {
        this.object = object;
        this.key = key;
    }
    get $kind() { return 9324 /* AccessKeyed */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        const instance = this.object.evaluate(f, s, hs, l, (f & 2048 /* observeLeafPropertiesOnly */) > 0 ? null : c);
        if (instance instanceof Object) {
            const key = this.key.evaluate(f, s, hs, l, (f & 2048 /* observeLeafPropertiesOnly */) > 0 ? null : c);
            if (c !== null) {
                c.observeProperty(instance, key);
            }
            return instance[key];
        }
        return void 0;
    }
    assign(f, s, hs, l, val) {
        const instance = this.object.evaluate(f, s, hs, l, null);
        const key = this.key.evaluate(f, s, hs, l, null);
        return instance[key] = val;
    }
    accept(visitor) {
        return visitor.visitAccessKeyed(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class CallScopeExpression {
    constructor(name, args, ancestor = 0, accessHostScope = false) {
        this.name = name;
        this.args = args;
        this.ancestor = ancestor;
        this.accessHostScope = accessHostScope;
    }
    get $kind() { return 1448 /* CallScope */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        s = chooseScope(this.accessHostScope, s, hs);
        const args = this.args.map(a => a.evaluate(f, s, hs, l, c));
        const context = _observation_binding_context_js__WEBPACK_IMPORTED_MODULE_1__.BindingContext.get(s, this.name, this.ancestor, f, hs);
        // ideally, should observe property represents by this.name as well
        // because it could be changed
        // todo: did it ever surprise anyone?
        const func = getFunction(f, context, this.name);
        if (func) {
            return func.apply(context, args);
        }
        return void 0;
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitCallScope(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class CallMemberExpression {
    constructor(object, name, args) {
        this.object = object;
        this.name = name;
        this.args = args;
    }
    get $kind() { return 1161 /* CallMember */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        const instance = this.object.evaluate(f, s, hs, l, (f & 2048 /* observeLeafPropertiesOnly */) > 0 ? null : c);
        const args = this.args.map(a => a.evaluate(f, s, hs, l, c));
        const func = getFunction(f, instance, this.name);
        if (func) {
            return func.apply(instance, args);
        }
        return void 0;
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitCallMember(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class CallFunctionExpression {
    constructor(func, args) {
        this.func = func;
        this.args = args;
    }
    get $kind() { return 1162 /* CallFunction */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        const func = this.func.evaluate(f, s, hs, l, c);
        if (typeof func === 'function') {
            return func(...this.args.map(a => a.evaluate(f, s, hs, l, c)));
        }
        if (!(f & 128 /* mustEvaluate */) && (func == null)) {
            return void 0;
        }
        throw new Error(`Expression is not a function.`);
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitCallFunction(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class BinaryExpression {
    constructor(operation, left, right) {
        this.operation = operation;
        this.left = left;
        this.right = right;
    }
    get $kind() { return 46 /* Binary */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        switch (this.operation) {
            case '&&':
                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
                return this.left.evaluate(f, s, hs, l, c) && this.right.evaluate(f, s, hs, l, c);
            case '||':
                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
                return this.left.evaluate(f, s, hs, l, c) || this.right.evaluate(f, s, hs, l, c);
            case '==':
                return this.left.evaluate(f, s, hs, l, c) == this.right.evaluate(f, s, hs, l, c);
            case '===':
                return this.left.evaluate(f, s, hs, l, c) === this.right.evaluate(f, s, hs, l, c);
            case '!=':
                return this.left.evaluate(f, s, hs, l, c) != this.right.evaluate(f, s, hs, l, c);
            case '!==':
                return this.left.evaluate(f, s, hs, l, c) !== this.right.evaluate(f, s, hs, l, c);
            case 'instanceof': {
                const right = this.right.evaluate(f, s, hs, l, c);
                if (typeof right === 'function') {
                    return this.left.evaluate(f, s, hs, l, c) instanceof right;
                }
                return false;
            }
            case 'in': {
                const right = this.right.evaluate(f, s, hs, l, c);
                if (right instanceof Object) {
                    return this.left.evaluate(f, s, hs, l, c) in right;
                }
                return false;
            }
            // note: autoConvertAdd (and the null check) is removed because the default spec behavior is already largely similar
            // and where it isn't, you kind of want it to behave like the spec anyway (e.g. return NaN when adding a number to undefined)
            // this makes bugs in user code easier to track down for end users
            // also, skipping these checks and leaving it to the runtime is a nice little perf boost and simplifies our code
            case '+': {
                const left = this.left.evaluate(f, s, hs, l, c);
                const right = this.right.evaluate(f, s, hs, l, c);
                if ((f & 4 /* isStrictBindingStrategy */) > 0) {
                    return left + right;
                }
                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
                if (!left || !right) {
                    if ((0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.isNumberOrBigInt)(left) || (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.isNumberOrBigInt)(right)) {
                        return (left || 0) + (right || 0);
                    }
                    if ((0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.isStringOrDate)(left) || (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.isStringOrDate)(right)) {
                        return (left || '') + (right || '');
                    }
                }
                return left + right;
            }
            case '-':
                return this.left.evaluate(f, s, hs, l, c) - this.right.evaluate(f, s, hs, l, c);
            case '*':
                return this.left.evaluate(f, s, hs, l, c) * this.right.evaluate(f, s, hs, l, c);
            case '/':
                return this.left.evaluate(f, s, hs, l, c) / this.right.evaluate(f, s, hs, l, c);
            case '%':
                return this.left.evaluate(f, s, hs, l, c) % this.right.evaluate(f, s, hs, l, c);
            case '<':
                return this.left.evaluate(f, s, hs, l, c) < this.right.evaluate(f, s, hs, l, c);
            case '>':
                return this.left.evaluate(f, s, hs, l, c) > this.right.evaluate(f, s, hs, l, c);
            case '<=':
                return this.left.evaluate(f, s, hs, l, c) <= this.right.evaluate(f, s, hs, l, c);
            case '>=':
                return this.left.evaluate(f, s, hs, l, c) >= this.right.evaluate(f, s, hs, l, c);
            default:
                throw new Error(`Unknown binary operator: '${this.operation}'`);
        }
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitBinary(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class UnaryExpression {
    constructor(operation, expression) {
        this.operation = operation;
        this.expression = expression;
    }
    get $kind() { return 39 /* Unary */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        switch (this.operation) {
            case 'void':
                return void this.expression.evaluate(f, s, hs, l, c);
            case 'typeof':
                return typeof this.expression.evaluate(f | 4 /* isStrictBindingStrategy */, s, hs, l, c);
            case '!':
                return !this.expression.evaluate(f, s, hs, l, c);
            case '-':
                return -this.expression.evaluate(f, s, hs, l, c);
            case '+':
                return +this.expression.evaluate(f, s, hs, l, c);
            default:
                throw new Error(`Unknown unary operator: '${this.operation}'`);
        }
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitUnary(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class PrimitiveLiteralExpression {
    constructor(value) {
        this.value = value;
    }
    get $kind() { return 17925 /* PrimitiveLiteral */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(_f, _s, _hs, _l, _c) {
        return this.value;
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitPrimitiveLiteral(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
PrimitiveLiteralExpression.$undefined = new PrimitiveLiteralExpression(void 0);
PrimitiveLiteralExpression.$null = new PrimitiveLiteralExpression(null);
PrimitiveLiteralExpression.$true = new PrimitiveLiteralExpression(true);
PrimitiveLiteralExpression.$false = new PrimitiveLiteralExpression(false);
PrimitiveLiteralExpression.$empty = new PrimitiveLiteralExpression('');
class HtmlLiteralExpression {
    constructor(parts) {
        this.parts = parts;
    }
    get $kind() { return 51 /* HtmlLiteral */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        let result = '';
        for (let i = 0; i < this.parts.length; ++i) {
            const v = this.parts[i].evaluate(f, s, hs, l, c);
            if (v == null) {
                continue;
            }
            result += v;
        }
        return result;
    }
    assign(_f, _s, _hs, _l, _obj, _projection) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitHtmlLiteral(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class ArrayLiteralExpression {
    constructor(elements) {
        this.elements = elements;
    }
    get $kind() { return 17955 /* ArrayLiteral */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        return this.elements.map(e => e.evaluate(f, s, hs, l, c));
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitArrayLiteral(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
ArrayLiteralExpression.$empty = new ArrayLiteralExpression(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray);
class ObjectLiteralExpression {
    constructor(keys, values) {
        this.keys = keys;
        this.values = values;
    }
    get $kind() { return 17956 /* ObjectLiteral */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        const instance = {};
        for (let i = 0; i < this.keys.length; ++i) {
            instance[this.keys[i]] = this.values[i].evaluate(f, s, hs, l, c);
        }
        return instance;
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitObjectLiteral(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
ObjectLiteralExpression.$empty = new ObjectLiteralExpression(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray, _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray);
class TemplateExpression {
    constructor(cooked, expressions = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray) {
        this.cooked = cooked;
        this.expressions = expressions;
    }
    get $kind() { return 17958 /* Template */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        let result = this.cooked[0];
        for (let i = 0; i < this.expressions.length; ++i) {
            result += String(this.expressions[i].evaluate(f, s, hs, l, c));
            result += this.cooked[i + 1];
        }
        return result;
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitTemplate(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
TemplateExpression.$empty = new TemplateExpression(['']);
class TaggedTemplateExpression {
    constructor(cooked, raw, func, expressions = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray) {
        this.cooked = cooked;
        this.func = func;
        this.expressions = expressions;
        cooked.raw = raw;
    }
    get $kind() { return 1197 /* TaggedTemplate */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        const results = this.expressions.map(e => e.evaluate(f, s, hs, l, c));
        const func = this.func.evaluate(f, s, hs, l, c);
        if (typeof func !== 'function') {
            throw new Error(`Left-hand side of tagged template expression is not a function.`);
        }
        return func(this.cooked, ...results);
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitTaggedTemplate(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class ArrayBindingPattern {
    // We'll either have elements, or keys+values, but never all 3
    constructor(elements) {
        this.elements = elements;
    }
    get $kind() { return 65556 /* ArrayBindingPattern */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(_f, _s, _hs, _l, _c) {
        // TODO: this should come after batch
        // as a destructuring expression like [x, y] = value
        //
        // should only trigger change only once:
        // batch(() => {
        //   object.x = value[0]
        //   object.y = value[1]
        // })
        //
        // instead of twice:
        // object.x = value[0]
        // object.y = value[1]
        return void 0;
    }
    assign(_f, _s, _hs, _l, _obj) {
        // TODO
        return void 0;
    }
    accept(visitor) {
        return visitor.visitArrayBindingPattern(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class ObjectBindingPattern {
    // We'll either have elements, or keys+values, but never all 3
    constructor(keys, values) {
        this.keys = keys;
        this.values = values;
    }
    get $kind() { return 65557 /* ObjectBindingPattern */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(_f, _s, _hs, _l, _c) {
        // TODO
        // similar to array binding ast, this should only come after batch
        // for a single notification per destructing,
        // regardless number of property assignments on the scope binding context
        return void 0;
    }
    assign(_f, _s, _hs, _l, _obj) {
        // TODO
        return void 0;
    }
    accept(visitor) {
        return visitor.visitObjectBindingPattern(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
class BindingIdentifier {
    constructor(name) {
        this.name = name;
    }
    get $kind() { return 65558 /* BindingIdentifier */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(_f, _s, _hs, _l, _c) {
        return this.name;
    }
    accept(visitor) {
        return visitor.visitBindingIdentifier(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
const toStringTag = Object.prototype.toString;
// https://tc39.github.io/ecma262/#sec-iteration-statements
// https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
class ForOfStatement {
    constructor(declaration, iterable) {
        this.declaration = declaration;
        this.iterable = iterable;
    }
    get $kind() { return 6199 /* ForOfStatement */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        return this.iterable.evaluate(f, s, hs, l, c);
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    count(_f, result) {
        switch (toStringTag.call(result)) {
            case '[object Array]': return result.length;
            case '[object Map]': return result.size;
            case '[object Set]': return result.size;
            case '[object Number]': return result;
            case '[object Null]': return 0;
            case '[object Undefined]': return 0;
            default: throw new Error(`Cannot count ${toStringTag.call(result)}`);
        }
    }
    // deepscan-disable-next-line
    iterate(f, result, func) {
        switch (toStringTag.call(result)) {
            case '[object Array]': return $array(result, func);
            case '[object Map]': return $map(result, func);
            case '[object Set]': return $set(result, func);
            case '[object Number]': return $number(result, func);
            case '[object Null]': return;
            case '[object Undefined]': return;
            default: throw new Error(`Cannot iterate over ${toStringTag.call(result)}`);
        }
    }
    bind(f, s, hs, b) {
        if (this.iterable.hasBind) {
            this.iterable.bind(f, s, hs, b);
        }
    }
    unbind(f, s, hs, b) {
        if (this.iterable.hasUnbind) {
            this.iterable.unbind(f, s, hs, b);
        }
    }
    accept(visitor) {
        return visitor.visitForOfStatement(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
/*
* Note: this implementation is far simpler than the one in vCurrent and might be missing important stuff (not sure yet)
* so while this implementation is identical to Template and we could reuse that one, we don't want to lock outselves in to potentially the wrong abstraction
* but this class might be a candidate for removal if it turns out it does provide all we need
*/
class Interpolation {
    constructor(parts, expressions = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray) {
        this.parts = parts;
        this.expressions = expressions;
        this.isMulti = expressions.length > 1;
        this.firstExpression = expressions[0];
    }
    get $kind() { return 24 /* Interpolation */; }
    get hasBind() { return false; }
    get hasUnbind() { return false; }
    evaluate(f, s, hs, l, c) {
        if (this.isMulti) {
            let result = this.parts[0];
            for (let i = 0; i < this.expressions.length; ++i) {
                result += String(this.expressions[i].evaluate(f, s, hs, l, c));
                result += this.parts[i + 1];
            }
            return result;
        }
        else {
            return `${this.parts[0]}${this.firstExpression.evaluate(f, s, hs, l, c)}${this.parts[1]}`;
        }
    }
    assign(_f, _s, _hs, _l, _obj) {
        return void 0;
    }
    accept(visitor) {
        return visitor.visitInterpolation(this);
    }
    toString() {
        return Unparser.unparse(this);
    }
}
function getFunction(f, obj, name) {
    const func = obj == null ? null : obj[name];
    if (typeof func === 'function') {
        return func;
    }
    if (!(f & 128 /* mustEvaluate */) && func == null) {
        return null;
    }
    throw new Error(`Expected '${name}' to be a function`);
}
function $array(result, func) {
    for (let i = 0, ii = result.length; i < ii; ++i) {
        func(result, i, result[i]);
    }
}
function $map(result, func) {
    const arr = Array(result.size);
    let i = -1;
    for (const entry of result.entries()) {
        arr[++i] = entry;
    }
    $array(arr, func);
}
function $set(result, func) {
    const arr = Array(result.size);
    let i = -1;
    for (const key of result.keys()) {
        arr[++i] = key;
    }
    $array(arr, func);
}
function $number(result, func) {
    const arr = Array(result);
    for (let i = 0; i < result; ++i) {
        arr[i] = i;
    }
    $array(arr, func);
}
//# sourceMappingURL=ast.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/binding/connectable.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/binding/connectable.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindingObserverRecord": () => /* binding */ BindingObserverRecord,
/* harmony export */   "connectable": () => /* binding */ connectable,
/* harmony export */   "BindingMediator": () => /* binding */ BindingMediator
/* harmony export */ });
/* harmony import */ var _utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities-objects.js */ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js");
/* harmony import */ var _observation_array_observer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observation/array-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/array-observer.js");
/* harmony import */ var _observation_set_observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observation/set-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/set-observer.js");
/* harmony import */ var _observation_map_observer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../observation/map-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/map-observer.js");




// TODO: add connect-queue (or something similar) back in when everything else is working, to improve startup time
const slotNames = [];
const versionSlotNames = [];
let lastSlot = -1;
function ensureEnoughSlotNames(currentSlot) {
    if (currentSlot === lastSlot) {
        lastSlot += 5;
        const ii = slotNames.length = versionSlotNames.length = lastSlot + 1;
        for (let i = currentSlot + 1; i < ii; ++i) {
            slotNames[i] = `_o${i}`;
            versionSlotNames[i] = `_v${i}`;
        }
    }
}
ensureEnoughSlotNames(-1);
function observeProperty(obj, key) {
    const observer = this.observerLocator.getObserver(obj, key);
    /* Note: we need to cast here because we can indeed get an accessor instead of an observer,
     *  in which case the call to observer.subscribe will throw. It's not very clean and we can solve this in 2 ways:
     *  1. Fail earlier: only let the locator resolve observers from .getObserver, and throw if no branches are left (e.g. it would otherwise return an accessor)
     *  2. Fail silently (without throwing): give all accessors a no-op subscribe method
     *
     * We'll probably want to implement some global configuration (like a "strict" toggle) so users can pick between enforced correctness vs. ease-of-use
     */
    this.obs.add(observer);
}
function getObserverRecord() {
    const record = new BindingObserverRecord(this);
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__.defineHiddenProp)(this, 'obs', record);
    return record;
}
function observeCollection(collection) {
    let obs;
    if (collection instanceof Array) {
        obs = (0,_observation_array_observer_js__WEBPACK_IMPORTED_MODULE_1__.getArrayObserver)(collection);
    }
    else if (collection instanceof Set) {
        obs = (0,_observation_set_observer_js__WEBPACK_IMPORTED_MODULE_2__.getSetObserver)(collection);
    }
    else if (collection instanceof Map) {
        obs = (0,_observation_map_observer_js__WEBPACK_IMPORTED_MODULE_3__.getMapObserver)(collection);
    }
    else {
        throw new Error('Unrecognised collection type.');
    }
    this.obs.add(obs);
}
function noopHandleChange() {
    throw new Error('method "handleChange" not implemented');
}
function noopHandleCollectionChange() {
    throw new Error('method "handleCollectionChange" not implemented');
}
class BindingObserverRecord {
    constructor(binding) {
        this.binding = binding;
        this.version = 0;
        this.count = 0;
        connectable.assignIdTo(this);
    }
    handleChange(value, oldValue, flags) {
        return this.binding.interceptor.handleChange(value, oldValue, flags);
    }
    handleCollectionChange(indexMap, flags) {
        this.binding.interceptor.handleCollectionChange(indexMap, flags);
    }
    /**
     * Add, and subscribe to a given observer
     */
    add(observer) {
        // find the observer.
        const observerSlots = this.count == null ? 0 : this.count;
        let i = observerSlots;
        while (i-- && this[slotNames[i]] !== observer)
            ;
        // if we are not already observing, put the observer in an open slot and subscribe.
        if (i === -1) {
            i = 0;
            while (this[slotNames[i]]) {
                i++;
            }
            this[slotNames[i]] = observer;
            observer.subscribe(this);
            observer[this.id] |= 8 /* updateTarget */;
            // increment the slot count.
            if (i === observerSlots) {
                this.count = i + 1;
            }
        }
        this[versionSlotNames[i]] = this.version;
        ensureEnoughSlotNames(i);
    }
    /**
     * Unsubscribe the observers that are not up to date with the record version
     */
    clear(all) {
        const slotCount = this.count;
        let slotName;
        let observer;
        let i = 0;
        if (all === true) {
            for (; i < slotCount; ++i) {
                slotName = slotNames[i];
                observer = this[slotName];
                if (observer != null) {
                    this[slotName] = void 0;
                    observer.unsubscribe(this);
                    observer[this.id] &= ~8 /* updateTarget */;
                }
            }
            this.count = 0;
        }
        else {
            for (; i < slotCount; ++i) {
                if (this[versionSlotNames[i]] !== this.version) {
                    slotName = slotNames[i];
                    observer = this[slotName];
                    if (observer != null) {
                        this[slotName] = void 0;
                        observer.unsubscribe(this);
                        observer[this.id] &= ~8 /* updateTarget */;
                        this.count--;
                    }
                }
            }
        }
    }
}
function connectableDecorator(target) {
    const proto = target.prototype;
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__.ensureProto)(proto, 'observeProperty', observeProperty, true);
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__.ensureProto)(proto, 'observeCollection', observeCollection, true);
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__.def)(proto, 'obs', { get: getObserverRecord });
    // optionally add these two methods to normalize a connectable impl
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__.ensureProto)(proto, 'handleChange', noopHandleChange);
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__.ensureProto)(proto, 'handleCollectionChange', noopHandleCollectionChange);
    return target;
}
function connectable(target) {
    return target == null ? connectableDecorator : connectableDecorator(target);
}
let idValue = 0;
connectable.assignIdTo = (instance) => {
    instance.id = ++idValue;
};
// @connectable
class BindingMediator {
    constructor(key, binding, observerLocator, locator) {
        this.key = key;
        this.binding = binding;
        this.observerLocator = observerLocator;
        this.locator = locator;
        this.interceptor = this;
        connectable.assignIdTo(this);
    }
    $bind(flags, scope, hostScope, projection) {
        throw new Error('Method not implemented.');
    }
    $unbind(flags) {
        throw new Error('Method not implemented.');
    }
    handleChange(newValue, previousValue, flags) {
        this.binding[this.key](newValue, previousValue, flags);
    }
}
connectableDecorator(BindingMediator);
//# sourceMappingURL=connectable.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/binding/expression-parser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/binding/expression-parser.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IExpressionParser": () => /* binding */ IExpressionParser,
/* harmony export */   "ExpressionParser": () => /* binding */ ExpressionParser,
/* harmony export */   "Char": () => /* binding */ Char,
/* harmony export */   "Access": () => /* binding */ Access,
/* harmony export */   "Precedence": () => /* binding */ Precedence,
/* harmony export */   "BindingType": () => /* binding */ BindingType,
/* harmony export */   "ParserState": () => /* binding */ ParserState,
/* harmony export */   "parseExpression": () => /* binding */ parseExpression,
/* harmony export */   "parse": () => /* binding */ parse
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _ast_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ast.js */ "./node_modules/@aurelia/runtime/dist/esm/binding/ast.js");


const IExpressionParser = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IExpressionParser', x => x.singleton(ExpressionParser));
class ExpressionParser {
    constructor() {
        this.expressionLookup = Object.create(null);
        this.forOfLookup = Object.create(null);
        this.interpolationLookup = Object.create(null);
    }
    parse(expression, bindingType) {
        switch (bindingType) {
            case 2048 /* Interpolation */: {
                let found = this.interpolationLookup[expression];
                if (found === void 0) {
                    found = this.interpolationLookup[expression] = this.$parse(expression, bindingType);
                }
                return found;
            }
            case 539 /* ForCommand */: {
                let found = this.forOfLookup[expression];
                if (found === void 0) {
                    found = this.forOfLookup[expression] = this.$parse(expression, bindingType);
                }
                return found;
            }
            default: {
                // Allow empty strings for normal bindings and those that are empty by default (such as a custom attribute without an equals sign)
                // But don't cache it, because empty strings are always invalid for any other type of binding
                if (expression.length === 0 && (bindingType & (53 /* BindCommand */ | 49 /* OneTimeCommand */ | 50 /* ToViewCommand */))) {
                    return _ast_js__WEBPACK_IMPORTED_MODULE_1__.PrimitiveLiteralExpression.$empty;
                }
                let found = this.expressionLookup[expression];
                if (found === void 0) {
                    found = this.expressionLookup[expression] = this.$parse(expression, bindingType);
                }
                return found;
            }
        }
    }
    $parse(expression, bindingType) {
        $state.input = expression;
        $state.length = expression.length;
        $state.index = 0;
        $state.currentChar = expression.charCodeAt(0);
        return parse($state, 0 /* Reset */, 61 /* Variadic */, bindingType === void 0 ? 53 /* BindCommand */ : bindingType);
    }
}
var Char;
(function (Char) {
    Char[Char["Null"] = 0] = "Null";
    Char[Char["Backspace"] = 8] = "Backspace";
    Char[Char["Tab"] = 9] = "Tab";
    Char[Char["LineFeed"] = 10] = "LineFeed";
    Char[Char["VerticalTab"] = 11] = "VerticalTab";
    Char[Char["FormFeed"] = 12] = "FormFeed";
    Char[Char["CarriageReturn"] = 13] = "CarriageReturn";
    Char[Char["Space"] = 32] = "Space";
    Char[Char["Exclamation"] = 33] = "Exclamation";
    Char[Char["DoubleQuote"] = 34] = "DoubleQuote";
    Char[Char["Dollar"] = 36] = "Dollar";
    Char[Char["Percent"] = 37] = "Percent";
    Char[Char["Ampersand"] = 38] = "Ampersand";
    Char[Char["SingleQuote"] = 39] = "SingleQuote";
    Char[Char["OpenParen"] = 40] = "OpenParen";
    Char[Char["CloseParen"] = 41] = "CloseParen";
    Char[Char["Asterisk"] = 42] = "Asterisk";
    Char[Char["Plus"] = 43] = "Plus";
    Char[Char["Comma"] = 44] = "Comma";
    Char[Char["Minus"] = 45] = "Minus";
    Char[Char["Dot"] = 46] = "Dot";
    Char[Char["Slash"] = 47] = "Slash";
    Char[Char["Semicolon"] = 59] = "Semicolon";
    Char[Char["Backtick"] = 96] = "Backtick";
    Char[Char["OpenBracket"] = 91] = "OpenBracket";
    Char[Char["Backslash"] = 92] = "Backslash";
    Char[Char["CloseBracket"] = 93] = "CloseBracket";
    Char[Char["Caret"] = 94] = "Caret";
    Char[Char["Underscore"] = 95] = "Underscore";
    Char[Char["OpenBrace"] = 123] = "OpenBrace";
    Char[Char["Bar"] = 124] = "Bar";
    Char[Char["CloseBrace"] = 125] = "CloseBrace";
    Char[Char["Colon"] = 58] = "Colon";
    Char[Char["LessThan"] = 60] = "LessThan";
    Char[Char["Equals"] = 61] = "Equals";
    Char[Char["GreaterThan"] = 62] = "GreaterThan";
    Char[Char["Question"] = 63] = "Question";
    Char[Char["Zero"] = 48] = "Zero";
    Char[Char["One"] = 49] = "One";
    Char[Char["Two"] = 50] = "Two";
    Char[Char["Three"] = 51] = "Three";
    Char[Char["Four"] = 52] = "Four";
    Char[Char["Five"] = 53] = "Five";
    Char[Char["Six"] = 54] = "Six";
    Char[Char["Seven"] = 55] = "Seven";
    Char[Char["Eight"] = 56] = "Eight";
    Char[Char["Nine"] = 57] = "Nine";
    Char[Char["UpperA"] = 65] = "UpperA";
    Char[Char["UpperB"] = 66] = "UpperB";
    Char[Char["UpperC"] = 67] = "UpperC";
    Char[Char["UpperD"] = 68] = "UpperD";
    Char[Char["UpperE"] = 69] = "UpperE";
    Char[Char["UpperF"] = 70] = "UpperF";
    Char[Char["UpperG"] = 71] = "UpperG";
    Char[Char["UpperH"] = 72] = "UpperH";
    Char[Char["UpperI"] = 73] = "UpperI";
    Char[Char["UpperJ"] = 74] = "UpperJ";
    Char[Char["UpperK"] = 75] = "UpperK";
    Char[Char["UpperL"] = 76] = "UpperL";
    Char[Char["UpperM"] = 77] = "UpperM";
    Char[Char["UpperN"] = 78] = "UpperN";
    Char[Char["UpperO"] = 79] = "UpperO";
    Char[Char["UpperP"] = 80] = "UpperP";
    Char[Char["UpperQ"] = 81] = "UpperQ";
    Char[Char["UpperR"] = 82] = "UpperR";
    Char[Char["UpperS"] = 83] = "UpperS";
    Char[Char["UpperT"] = 84] = "UpperT";
    Char[Char["UpperU"] = 85] = "UpperU";
    Char[Char["UpperV"] = 86] = "UpperV";
    Char[Char["UpperW"] = 87] = "UpperW";
    Char[Char["UpperX"] = 88] = "UpperX";
    Char[Char["UpperY"] = 89] = "UpperY";
    Char[Char["UpperZ"] = 90] = "UpperZ";
    Char[Char["LowerA"] = 97] = "LowerA";
    Char[Char["LowerB"] = 98] = "LowerB";
    Char[Char["LowerC"] = 99] = "LowerC";
    Char[Char["LowerD"] = 100] = "LowerD";
    Char[Char["LowerE"] = 101] = "LowerE";
    Char[Char["LowerF"] = 102] = "LowerF";
    Char[Char["LowerG"] = 103] = "LowerG";
    Char[Char["LowerH"] = 104] = "LowerH";
    Char[Char["LowerI"] = 105] = "LowerI";
    Char[Char["LowerJ"] = 106] = "LowerJ";
    Char[Char["LowerK"] = 107] = "LowerK";
    Char[Char["LowerL"] = 108] = "LowerL";
    Char[Char["LowerM"] = 109] = "LowerM";
    Char[Char["LowerN"] = 110] = "LowerN";
    Char[Char["LowerO"] = 111] = "LowerO";
    Char[Char["LowerP"] = 112] = "LowerP";
    Char[Char["LowerQ"] = 113] = "LowerQ";
    Char[Char["LowerR"] = 114] = "LowerR";
    Char[Char["LowerS"] = 115] = "LowerS";
    Char[Char["LowerT"] = 116] = "LowerT";
    Char[Char["LowerU"] = 117] = "LowerU";
    Char[Char["LowerV"] = 118] = "LowerV";
    Char[Char["LowerW"] = 119] = "LowerW";
    Char[Char["LowerX"] = 120] = "LowerX";
    Char[Char["LowerY"] = 121] = "LowerY";
    Char[Char["LowerZ"] = 122] = "LowerZ";
})(Char || (Char = {}));
function unescapeCode(code) {
    switch (code) {
        case 98 /* LowerB */: return 8 /* Backspace */;
        case 116 /* LowerT */: return 9 /* Tab */;
        case 110 /* LowerN */: return 10 /* LineFeed */;
        case 118 /* LowerV */: return 11 /* VerticalTab */;
        case 102 /* LowerF */: return 12 /* FormFeed */;
        case 114 /* LowerR */: return 13 /* CarriageReturn */;
        case 34 /* DoubleQuote */: return 34 /* DoubleQuote */;
        case 39 /* SingleQuote */: return 39 /* SingleQuote */;
        case 92 /* Backslash */: return 92 /* Backslash */;
        default: return code;
    }
}
var Access;
(function (Access) {
    Access[Access["Reset"] = 0] = "Reset";
    Access[Access["Ancestor"] = 511] = "Ancestor";
    Access[Access["This"] = 512] = "This";
    Access[Access["Scope"] = 1024] = "Scope";
    Access[Access["Member"] = 2048] = "Member";
    Access[Access["Keyed"] = 4096] = "Keyed";
})(Access || (Access = {}));
var Precedence;
(function (Precedence) {
    Precedence[Precedence["Variadic"] = 61] = "Variadic";
    Precedence[Precedence["Assign"] = 62] = "Assign";
    Precedence[Precedence["Conditional"] = 63] = "Conditional";
    Precedence[Precedence["LogicalOR"] = 64] = "LogicalOR";
    Precedence[Precedence["LogicalAND"] = 128] = "LogicalAND";
    Precedence[Precedence["Equality"] = 192] = "Equality";
    Precedence[Precedence["Relational"] = 256] = "Relational";
    Precedence[Precedence["Additive"] = 320] = "Additive";
    Precedence[Precedence["Multiplicative"] = 384] = "Multiplicative";
    Precedence[Precedence["Binary"] = 448] = "Binary";
    Precedence[Precedence["LeftHandSide"] = 449] = "LeftHandSide";
    Precedence[Precedence["Primary"] = 450] = "Primary";
    Precedence[Precedence["Unary"] = 451] = "Unary";
})(Precedence || (Precedence = {}));
var Token;
(function (Token) {
    Token[Token["EOF"] = 1572864] = "EOF";
    Token[Token["ExpressionTerminal"] = 1048576] = "ExpressionTerminal";
    Token[Token["AccessScopeTerminal"] = 524288] = "AccessScopeTerminal";
    Token[Token["ClosingToken"] = 262144] = "ClosingToken";
    Token[Token["OpeningToken"] = 131072] = "OpeningToken";
    Token[Token["BinaryOp"] = 65536] = "BinaryOp";
    Token[Token["UnaryOp"] = 32768] = "UnaryOp";
    Token[Token["LeftHandSide"] = 16384] = "LeftHandSide";
    Token[Token["StringOrNumericLiteral"] = 12288] = "StringOrNumericLiteral";
    Token[Token["NumericLiteral"] = 8192] = "NumericLiteral";
    Token[Token["StringLiteral"] = 4096] = "StringLiteral";
    Token[Token["IdentifierName"] = 3072] = "IdentifierName";
    Token[Token["Keyword"] = 2048] = "Keyword";
    Token[Token["Identifier"] = 1024] = "Identifier";
    Token[Token["Contextual"] = 512] = "Contextual";
    Token[Token["Precedence"] = 448] = "Precedence";
    Token[Token["Type"] = 63] = "Type";
    Token[Token["FalseKeyword"] = 2048] = "FalseKeyword";
    Token[Token["TrueKeyword"] = 2049] = "TrueKeyword";
    Token[Token["NullKeyword"] = 2050] = "NullKeyword";
    Token[Token["UndefinedKeyword"] = 2051] = "UndefinedKeyword";
    Token[Token["ThisScope"] = 3076] = "ThisScope";
    Token[Token["HostScope"] = 3077] = "HostScope";
    Token[Token["ParentScope"] = 3078] = "ParentScope";
    Token[Token["OpenParen"] = 671751] = "OpenParen";
    Token[Token["OpenBrace"] = 131080] = "OpenBrace";
    Token[Token["Dot"] = 16393] = "Dot";
    Token[Token["CloseBrace"] = 1835018] = "CloseBrace";
    Token[Token["CloseParen"] = 1835019] = "CloseParen";
    Token[Token["Comma"] = 1572876] = "Comma";
    Token[Token["OpenBracket"] = 671757] = "OpenBracket";
    Token[Token["CloseBracket"] = 1835022] = "CloseBracket";
    Token[Token["Colon"] = 1572879] = "Colon";
    Token[Token["Question"] = 1572880] = "Question";
    Token[Token["Ampersand"] = 1572883] = "Ampersand";
    Token[Token["Bar"] = 1572884] = "Bar";
    Token[Token["BarBar"] = 1638549] = "BarBar";
    Token[Token["AmpersandAmpersand"] = 1638614] = "AmpersandAmpersand";
    Token[Token["EqualsEquals"] = 1638679] = "EqualsEquals";
    Token[Token["ExclamationEquals"] = 1638680] = "ExclamationEquals";
    Token[Token["EqualsEqualsEquals"] = 1638681] = "EqualsEqualsEquals";
    Token[Token["ExclamationEqualsEquals"] = 1638682] = "ExclamationEqualsEquals";
    Token[Token["LessThan"] = 1638747] = "LessThan";
    Token[Token["GreaterThan"] = 1638748] = "GreaterThan";
    Token[Token["LessThanEquals"] = 1638749] = "LessThanEquals";
    Token[Token["GreaterThanEquals"] = 1638750] = "GreaterThanEquals";
    Token[Token["InKeyword"] = 1640799] = "InKeyword";
    Token[Token["InstanceOfKeyword"] = 1640800] = "InstanceOfKeyword";
    Token[Token["Plus"] = 623009] = "Plus";
    Token[Token["Minus"] = 623010] = "Minus";
    Token[Token["TypeofKeyword"] = 34851] = "TypeofKeyword";
    Token[Token["VoidKeyword"] = 34852] = "VoidKeyword";
    Token[Token["Asterisk"] = 1638885] = "Asterisk";
    Token[Token["Percent"] = 1638886] = "Percent";
    Token[Token["Slash"] = 1638887] = "Slash";
    Token[Token["Equals"] = 1048616] = "Equals";
    Token[Token["Exclamation"] = 32809] = "Exclamation";
    Token[Token["TemplateTail"] = 540714] = "TemplateTail";
    Token[Token["TemplateContinuation"] = 540715] = "TemplateContinuation";
    Token[Token["OfKeyword"] = 1051180] = "OfKeyword";
})(Token || (Token = {}));
const $false = _ast_js__WEBPACK_IMPORTED_MODULE_1__.PrimitiveLiteralExpression.$false;
const $true = _ast_js__WEBPACK_IMPORTED_MODULE_1__.PrimitiveLiteralExpression.$true;
const $null = _ast_js__WEBPACK_IMPORTED_MODULE_1__.PrimitiveLiteralExpression.$null;
const $undefined = _ast_js__WEBPACK_IMPORTED_MODULE_1__.PrimitiveLiteralExpression.$undefined;
const $this = _ast_js__WEBPACK_IMPORTED_MODULE_1__.AccessThisExpression.$this;
const $host = _ast_js__WEBPACK_IMPORTED_MODULE_1__.AccessThisExpression.$host;
const $parent = _ast_js__WEBPACK_IMPORTED_MODULE_1__.AccessThisExpression.$parent;
var BindingType;
(function (BindingType) {
    BindingType[BindingType["None"] = 0] = "None";
    BindingType[BindingType["IgnoreCustomAttr"] = 4096] = "IgnoreCustomAttr";
    BindingType[BindingType["Interpolation"] = 2048] = "Interpolation";
    BindingType[BindingType["IsRef"] = 5376] = "IsRef";
    BindingType[BindingType["IsIterator"] = 512] = "IsIterator";
    BindingType[BindingType["IsCustom"] = 256] = "IsCustom";
    BindingType[BindingType["IsFunction"] = 128] = "IsFunction";
    BindingType[BindingType["IsEvent"] = 64] = "IsEvent";
    BindingType[BindingType["IsProperty"] = 32] = "IsProperty";
    BindingType[BindingType["IsCommand"] = 16] = "IsCommand";
    BindingType[BindingType["IsPropertyCommand"] = 48] = "IsPropertyCommand";
    BindingType[BindingType["IsEventCommand"] = 80] = "IsEventCommand";
    BindingType[BindingType["DelegationStrategyDelta"] = 6] = "DelegationStrategyDelta";
    BindingType[BindingType["Command"] = 15] = "Command";
    BindingType[BindingType["OneTimeCommand"] = 49] = "OneTimeCommand";
    BindingType[BindingType["ToViewCommand"] = 50] = "ToViewCommand";
    BindingType[BindingType["FromViewCommand"] = 51] = "FromViewCommand";
    BindingType[BindingType["TwoWayCommand"] = 52] = "TwoWayCommand";
    BindingType[BindingType["BindCommand"] = 53] = "BindCommand";
    BindingType[BindingType["TriggerCommand"] = 4182] = "TriggerCommand";
    BindingType[BindingType["CaptureCommand"] = 4183] = "CaptureCommand";
    BindingType[BindingType["DelegateCommand"] = 4184] = "DelegateCommand";
    BindingType[BindingType["CallCommand"] = 153] = "CallCommand";
    BindingType[BindingType["OptionsCommand"] = 26] = "OptionsCommand";
    BindingType[BindingType["ForCommand"] = 539] = "ForCommand";
    BindingType[BindingType["CustomCommand"] = 284] = "CustomCommand";
})(BindingType || (BindingType = {}));
/* eslint-enable @typescript-eslint/indent */
/** @internal */
class ParserState {
    constructor(input) {
        this.input = input;
        this.index = 0;
        this.startIndex = 0;
        this.lastIndex = 0;
        this.currentToken = 1572864 /* EOF */;
        this.tokenValue = '';
        this.assignable = true;
        this.length = input.length;
        this.currentChar = input.charCodeAt(0);
    }
    get tokenRaw() {
        return this.input.slice(this.startIndex, this.index);
    }
}
const $state = new ParserState('');
/** @internal */
function parseExpression(input, bindingType) {
    $state.input = input;
    $state.length = input.length;
    $state.index = 0;
    $state.currentChar = input.charCodeAt(0);
    return parse($state, 0 /* Reset */, 61 /* Variadic */, bindingType === void 0 ? 53 /* BindCommand */ : bindingType);
}
/** @internal */
// This is performance-critical code which follows a subset of the well-known ES spec.
// Knowing the spec, or parsers in general, will help with understanding this code and it is therefore not the
// single source of information for being able to figure it out.
// It generally does not need to change unless the spec changes or spec violations are found, or optimization
// opportunities are found (which would likely not fix these warnings in any case).
// It's therefore not considered to have any tangible impact on the maintainability of the code base.
// For reference, most of the parsing logic is based on: https://tc39.github.io/ecma262/#sec-ecmascript-language-expressions
// eslint-disable-next-line max-lines-per-function
function parse(state, access, minPrecedence, bindingType) {
    if (bindingType === 284 /* CustomCommand */) {
        return new _ast_js__WEBPACK_IMPORTED_MODULE_1__.CustomExpression(state.input);
    }
    if (state.index === 0) {
        if (bindingType & 2048 /* Interpolation */) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return parseInterpolation(state);
        }
        nextToken(state);
        if (state.currentToken & 1048576 /* ExpressionTerminal */) {
            throw new Error(`Invalid start of expression: '${state.input}'`);
        }
    }
    state.assignable = 448 /* Binary */ > minPrecedence;
    let result = void 0;
    if (state.currentToken & 32768 /* UnaryOp */) {
        /** parseUnaryExpression
         * https://tc39.github.io/ecma262/#sec-unary-operators
         *
         * UnaryExpression :
         * 1. LeftHandSideExpression
         * 2. void UnaryExpression
         * 3. typeof UnaryExpression
         * 4. + UnaryExpression
         * 5. - UnaryExpression
         * 6. ! UnaryExpression
         *
         * IsValidAssignmentTarget
         * 2,3,4,5,6 = false
         * 1 = see parseLeftHandSideExpression
         *
         * Note: technically we should throw on ++ / -- / +++ / ---, but there's nothing to gain from that
         */
        const op = TokenValues[state.currentToken & 63 /* Type */];
        nextToken(state);
        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.UnaryExpression(op, parse(state, access, 449 /* LeftHandSide */, bindingType));
        state.assignable = false;
    }
    else {
        /** parsePrimaryExpression
         * https://tc39.github.io/ecma262/#sec-primary-expression
         *
         * PrimaryExpression :
         * 1. this
         * 2. IdentifierName
         * 3. Literal
         * 4. ArrayLiteralExpression
         * 5. ObjectLiteralExpression
         * 6. TemplateLiteral
         * 7. ParenthesizedExpression
         *
         * Literal :
         * NullLiteral
         * BooleanLiteral
         * NumericLiteral
         * StringLiteral
         *
         * ParenthesizedExpression :
         * ( AssignmentExpression )
         *
         * IsValidAssignmentTarget
         * 1,3,4,5,6,7 = false
         * 2 = true
         */
        primary: switch (state.currentToken) {
            case 3078 /* ParentScope */: // $parent
                state.assignable = false;
                do {
                    nextToken(state);
                    access++; // ancestor
                    if (consumeOpt(state, 16393 /* Dot */)) {
                        if (state.currentToken === 16393 /* Dot */) {
                            throw new Error(`Double dot and spread operators are not supported: '${state.input}'`);
                        }
                        else if (state.currentToken === 1572864 /* EOF */) {
                            throw new Error(`Expected identifier: '${state.input}'`);
                        }
                    }
                    else if (state.currentToken & 524288 /* AccessScopeTerminal */) {
                        const ancestor = access & 511 /* Ancestor */;
                        result = ancestor === 0 ? $this : ancestor === 1 ? $parent : new _ast_js__WEBPACK_IMPORTED_MODULE_1__.AccessThisExpression(ancestor);
                        access = 512 /* This */;
                        break primary;
                    }
                    else {
                        throw new Error(`Invalid member expression: '${state.input}'`);
                    }
                } while (state.currentToken === 3078 /* ParentScope */);
            // falls through
            case 1024 /* Identifier */: // identifier
                if (bindingType & 512 /* IsIterator */) {
                    result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.BindingIdentifier(state.tokenValue);
                }
                else {
                    result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.AccessScopeExpression(state.tokenValue, access & 511 /* Ancestor */);
                    access = 1024 /* Scope */;
                }
                state.assignable = true;
                nextToken(state);
                break;
            case 3076 /* ThisScope */: // $this
                state.assignable = false;
                nextToken(state);
                result = $this;
                access = 512 /* This */;
                break;
            case 3077 /* HostScope */: // $host
                state.assignable = false;
                nextToken(state);
                result = $host;
                access = 512 /* This */;
                break;
            case 671751 /* OpenParen */: // parenthesized expression
                nextToken(state);
                result = parse(state, 0 /* Reset */, 62 /* Assign */, bindingType);
                consume(state, 1835019 /* CloseParen */);
                access = 0 /* Reset */;
                break;
            case 671757 /* OpenBracket */:
                result = parseArrayLiteralExpression(state, access, bindingType);
                access = 0 /* Reset */;
                break;
            case 131080 /* OpenBrace */:
                result = parseObjectLiteralExpression(state, bindingType);
                access = 0 /* Reset */;
                break;
            case 540714 /* TemplateTail */:
                result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.TemplateExpression([state.tokenValue]);
                state.assignable = false;
                nextToken(state);
                access = 0 /* Reset */;
                break;
            case 540715 /* TemplateContinuation */:
                result = parseTemplate(state, access, bindingType, result, false);
                access = 0 /* Reset */;
                break;
            case 4096 /* StringLiteral */:
            case 8192 /* NumericLiteral */:
                result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.PrimitiveLiteralExpression(state.tokenValue);
                state.assignable = false;
                nextToken(state);
                access = 0 /* Reset */;
                break;
            case 2050 /* NullKeyword */:
            case 2051 /* UndefinedKeyword */:
            case 2049 /* TrueKeyword */:
            case 2048 /* FalseKeyword */:
                result = TokenValues[state.currentToken & 63 /* Type */];
                state.assignable = false;
                nextToken(state);
                access = 0 /* Reset */;
                break;
            default:
                if (state.index >= state.length) {
                    throw new Error(`Unexpected end of expression: '${state.input}'`);
                }
                else {
                    throw new Error(`Unconsumed token: '${state.input}'`);
                }
        }
        if (bindingType & 512 /* IsIterator */) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return parseForOfStatement(state, result);
        }
        if (449 /* LeftHandSide */ < minPrecedence) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return result;
        }
        /** parseMemberExpression (Token.Dot, Token.OpenBracket, Token.TemplateContinuation)
         * MemberExpression :
         * 1. PrimaryExpression
         * 2. MemberExpression [ AssignmentExpression ]
         * 3. MemberExpression . IdentifierName
         * 4. MemberExpression TemplateLiteral
         *
         * IsValidAssignmentTarget
         * 1,4 = false
         * 2,3 = true
         *
         *
         * parseCallExpression (Token.OpenParen)
         * CallExpression :
         * 1. MemberExpression Arguments
         * 2. CallExpression Arguments
         * 3. CallExpression [ AssignmentExpression ]
         * 4. CallExpression . IdentifierName
         * 5. CallExpression TemplateLiteral
         *
         * IsValidAssignmentTarget
         * 1,2,5 = false
         * 3,4 = true
         */
        let name = state.tokenValue;
        while ((state.currentToken & 16384 /* LeftHandSide */) > 0) {
            const args = [];
            let strings;
            switch (state.currentToken) {
                case 16393 /* Dot */:
                    state.assignable = true;
                    nextToken(state);
                    if ((state.currentToken & 3072 /* IdentifierName */) === 0) {
                        throw new Error(`Expected identifier: '${state.input}'`);
                    }
                    name = state.tokenValue;
                    nextToken(state);
                    // Change $This to $Scope, change $Scope to $Member, keep $Member as-is, change $Keyed to $Member, disregard other flags
                    access = ((access & (512 /* This */ | 1024 /* Scope */)) << 1) | (access & 2048 /* Member */) | ((access & 4096 /* Keyed */) >> 1);
                    if (state.currentToken === 671751 /* OpenParen */) {
                        if (access === 0 /* Reset */) { // if the left hand side is a literal, make sure we parse a CallMemberExpression
                            access = 2048 /* Member */;
                        }
                        continue;
                    }
                    if (access & 1024 /* Scope */) {
                        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.AccessScopeExpression(name, result.ancestor, result === $host);
                    }
                    else { // if it's not $Scope, it's $Member
                        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.AccessMemberExpression(result, name);
                    }
                    continue;
                case 671757 /* OpenBracket */:
                    state.assignable = true;
                    nextToken(state);
                    access = 4096 /* Keyed */;
                    result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.AccessKeyedExpression(result, parse(state, 0 /* Reset */, 62 /* Assign */, bindingType));
                    consume(state, 1835022 /* CloseBracket */);
                    break;
                case 671751 /* OpenParen */:
                    state.assignable = false;
                    nextToken(state);
                    while (state.currentToken !== 1835019 /* CloseParen */) {
                        args.push(parse(state, 0 /* Reset */, 62 /* Assign */, bindingType));
                        if (!consumeOpt(state, 1572876 /* Comma */)) {
                            break;
                        }
                    }
                    consume(state, 1835019 /* CloseParen */);
                    if (access & 1024 /* Scope */) {
                        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.CallScopeExpression(name, args, result.ancestor, result === $host);
                    }
                    else if (access & 2048 /* Member */) {
                        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.CallMemberExpression(result, name, args);
                    }
                    else {
                        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.CallFunctionExpression(result, args);
                    }
                    access = 0;
                    break;
                case 540714 /* TemplateTail */:
                    state.assignable = false;
                    strings = [state.tokenValue];
                    result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.TaggedTemplateExpression(strings, strings, result);
                    nextToken(state);
                    break;
                case 540715 /* TemplateContinuation */:
                    result = parseTemplate(state, access, bindingType, result, true);
                default:
            }
        }
    }
    if (448 /* Binary */ < minPrecedence) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return result;
    }
    /** parseBinaryExpression
     * https://tc39.github.io/ecma262/#sec-multiplicative-operators
     *
     * MultiplicativeExpression : (local precedence 6)
     * UnaryExpression
     * MultiplicativeExpression * / % UnaryExpression
     *
     * AdditiveExpression : (local precedence 5)
     * MultiplicativeExpression
     * AdditiveExpression + - MultiplicativeExpression
     *
     * RelationalExpression : (local precedence 4)
     * AdditiveExpression
     * RelationalExpression < > <= >= instanceof in AdditiveExpression
     *
     * EqualityExpression : (local precedence 3)
     * RelationalExpression
     * EqualityExpression == != === !== RelationalExpression
     *
     * LogicalANDExpression : (local precedence 2)
     * EqualityExpression
     * LogicalANDExpression && EqualityExpression
     *
     * LogicalORExpression : (local precedence 1)
     * LogicalANDExpression
     * LogicalORExpression || LogicalANDExpression
     */
    while ((state.currentToken & 65536 /* BinaryOp */) > 0) {
        const opToken = state.currentToken;
        if ((opToken & 448 /* Precedence */) <= minPrecedence) {
            break;
        }
        nextToken(state);
        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.BinaryExpression(TokenValues[opToken & 63 /* Type */], result, parse(state, access, opToken & 448 /* Precedence */, bindingType));
        state.assignable = false;
    }
    if (63 /* Conditional */ < minPrecedence) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return result;
    }
    /**
     * parseConditionalExpression
     * https://tc39.github.io/ecma262/#prod-ConditionalExpression
     *
     * ConditionalExpression :
     * 1. BinaryExpression
     * 2. BinaryExpression ? AssignmentExpression : AssignmentExpression
     *
     * IsValidAssignmentTarget
     * 1,2 = false
     */
    if (consumeOpt(state, 1572880 /* Question */)) {
        const yes = parse(state, access, 62 /* Assign */, bindingType);
        consume(state, 1572879 /* Colon */);
        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.ConditionalExpression(result, yes, parse(state, access, 62 /* Assign */, bindingType));
        state.assignable = false;
    }
    if (62 /* Assign */ < minPrecedence) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return result;
    }
    /** parseAssignmentExpression
     * https://tc39.github.io/ecma262/#prod-AssignmentExpression
     * Note: AssignmentExpression here is equivalent to ES Expression because we don't parse the comma operator
     *
     * AssignmentExpression :
     * 1. ConditionalExpression
     * 2. LeftHandSideExpression = AssignmentExpression
     *
     * IsValidAssignmentTarget
     * 1,2 = false
     */
    if (consumeOpt(state, 1048616 /* Equals */)) {
        if (!state.assignable) {
            throw new Error(`Left hand side of expression is not assignable: '${state.input}'`);
        }
        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.AssignExpression(result, parse(state, access, 62 /* Assign */, bindingType));
    }
    if (61 /* Variadic */ < minPrecedence) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return result;
    }
    /** parseValueConverter
     */
    while (consumeOpt(state, 1572884 /* Bar */)) {
        if (state.currentToken === 1572864 /* EOF */) {
            throw new Error(`Expected identifier to come after ValueConverter operator: '${state.input}'`);
        }
        const name = state.tokenValue;
        nextToken(state);
        const args = new Array();
        while (consumeOpt(state, 1572879 /* Colon */)) {
            args.push(parse(state, access, 62 /* Assign */, bindingType));
        }
        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.ValueConverterExpression(result, name, args);
    }
    /** parseBindingBehavior
     */
    while (consumeOpt(state, 1572883 /* Ampersand */)) {
        if (state.currentToken === 1572864 /* EOF */) {
            throw new Error(`Expected identifier to come after BindingBehavior operator: '${state.input}'`);
        }
        const name = state.tokenValue;
        nextToken(state);
        const args = new Array();
        while (consumeOpt(state, 1572879 /* Colon */)) {
            args.push(parse(state, access, 62 /* Assign */, bindingType));
        }
        result = new _ast_js__WEBPACK_IMPORTED_MODULE_1__.BindingBehaviorExpression(result, name, args);
    }
    if (state.currentToken !== 1572864 /* EOF */) {
        if (bindingType & 2048 /* Interpolation */) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return result;
        }
        if (state.tokenRaw === 'of') {
            throw new Error(`Unexpected keyword "of": '${state.input}'`);
        }
        throw new Error(`Unconsumed token: '${state.input}'`);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return result;
}
/**
 * parseArrayLiteralExpression
 * https://tc39.github.io/ecma262/#prod-ArrayLiteralExpression
 *
 * ArrayLiteralExpression :
 * [ Elision(opt) ]
 * [ ElementList ]
 * [ ElementList, Elision(opt) ]
 *
 * ElementList :
 * Elision(opt) AssignmentExpression
 * ElementList, Elision(opt) AssignmentExpression
 *
 * Elision :
 * ,
 * Elision ,
 */
function parseArrayLiteralExpression(state, access, bindingType) {
    nextToken(state);
    const elements = new Array();
    while (state.currentToken !== 1835022 /* CloseBracket */) {
        if (consumeOpt(state, 1572876 /* Comma */)) {
            elements.push($undefined);
            if (state.currentToken === 1835022 /* CloseBracket */) {
                break;
            }
        }
        else {
            elements.push(parse(state, access, 62 /* Assign */, bindingType & ~512 /* IsIterator */));
            if (consumeOpt(state, 1572876 /* Comma */)) {
                if (state.currentToken === 1835022 /* CloseBracket */) {
                    break;
                }
            }
            else {
                break;
            }
        }
    }
    consume(state, 1835022 /* CloseBracket */);
    if (bindingType & 512 /* IsIterator */) {
        return new _ast_js__WEBPACK_IMPORTED_MODULE_1__.ArrayBindingPattern(elements);
    }
    else {
        state.assignable = false;
        return new _ast_js__WEBPACK_IMPORTED_MODULE_1__.ArrayLiteralExpression(elements);
    }
}
function parseForOfStatement(state, result) {
    if ((result.$kind & 65536 /* IsForDeclaration */) === 0) {
        throw new Error(`Invalid BindingIdentifier at left hand side of "of": '${state.input}'`);
    }
    if (state.currentToken !== 1051180 /* OfKeyword */) {
        throw new Error(`Invalid BindingIdentifier at left hand side of "of": '${state.input}'`);
    }
    nextToken(state);
    const declaration = result;
    const statement = parse(state, 0 /* Reset */, 61 /* Variadic */, 0 /* None */);
    return new _ast_js__WEBPACK_IMPORTED_MODULE_1__.ForOfStatement(declaration, statement);
}
/**
 * parseObjectLiteralExpression
 * https://tc39.github.io/ecma262/#prod-Literal
 *
 * ObjectLiteralExpression :
 * { }
 * { PropertyDefinitionList }
 *
 * PropertyDefinitionList :
 * PropertyDefinition
 * PropertyDefinitionList, PropertyDefinition
 *
 * PropertyDefinition :
 * IdentifierName
 * PropertyName : AssignmentExpression
 *
 * PropertyName :
 * IdentifierName
 * StringLiteral
 * NumericLiteral
 */
function parseObjectLiteralExpression(state, bindingType) {
    const keys = new Array();
    const values = new Array();
    nextToken(state);
    while (state.currentToken !== 1835018 /* CloseBrace */) {
        keys.push(state.tokenValue);
        // Literal = mandatory colon
        if (state.currentToken & 12288 /* StringOrNumericLiteral */) {
            nextToken(state);
            consume(state, 1572879 /* Colon */);
            values.push(parse(state, 0 /* Reset */, 62 /* Assign */, bindingType & ~512 /* IsIterator */));
        }
        else if (state.currentToken & 3072 /* IdentifierName */) {
            // IdentifierName = optional colon
            const { currentChar, currentToken, index } = state;
            nextToken(state);
            if (consumeOpt(state, 1572879 /* Colon */)) {
                values.push(parse(state, 0 /* Reset */, 62 /* Assign */, bindingType & ~512 /* IsIterator */));
            }
            else {
                // Shorthand
                state.currentChar = currentChar;
                state.currentToken = currentToken;
                state.index = index;
                values.push(parse(state, 0 /* Reset */, 450 /* Primary */, bindingType & ~512 /* IsIterator */));
            }
        }
        else {
            throw new Error(`Invalid or unsupported property definition in object literal: '${state.input}'`);
        }
        if (state.currentToken !== 1835018 /* CloseBrace */) {
            consume(state, 1572876 /* Comma */);
        }
    }
    consume(state, 1835018 /* CloseBrace */);
    if (bindingType & 512 /* IsIterator */) {
        return new _ast_js__WEBPACK_IMPORTED_MODULE_1__.ObjectBindingPattern(keys, values);
    }
    else {
        state.assignable = false;
        return new _ast_js__WEBPACK_IMPORTED_MODULE_1__.ObjectLiteralExpression(keys, values);
    }
}
function parseInterpolation(state) {
    const parts = [];
    const expressions = [];
    const length = state.length;
    let result = '';
    while (state.index < length) {
        switch (state.currentChar) {
            case 36 /* Dollar */:
                if (state.input.charCodeAt(state.index + 1) === 123 /* OpenBrace */) {
                    parts.push(result);
                    result = '';
                    state.index += 2;
                    state.currentChar = state.input.charCodeAt(state.index);
                    nextToken(state);
                    const expression = parse(state, 0 /* Reset */, 61 /* Variadic */, 2048 /* Interpolation */);
                    expressions.push(expression);
                    continue;
                }
                else {
                    result += '$';
                }
                break;
            case 92 /* Backslash */:
                result += String.fromCharCode(unescapeCode(nextChar(state)));
                break;
            default:
                result += String.fromCharCode(state.currentChar);
        }
        nextChar(state);
    }
    if (expressions.length) {
        parts.push(result);
        return new _ast_js__WEBPACK_IMPORTED_MODULE_1__.Interpolation(parts, expressions);
    }
    return null;
}
/**
 * parseTemplateLiteralExpression
 * https://tc39.github.io/ecma262/#prod-Literal
 *
 * TemplateExpression :
 * NoSubstitutionTemplate
 * TemplateHead
 *
 * NoSubstitutionTemplate :
 * ` TemplateCharacters(opt) `
 *
 * TemplateHead :
 * ` TemplateCharacters(opt) ${
 *
 * TemplateSubstitutionTail :
 * TemplateMiddle
 * TemplateTail
 *
 * TemplateMiddle :
 * } TemplateCharacters(opt) ${
 *
 * TemplateTail :
 * } TemplateCharacters(opt) `
 *
 * TemplateCharacters :
 * TemplateCharacter TemplateCharacters(opt)
 *
 * TemplateCharacter :
 * $ [lookahead ≠ {]
 * \ EscapeSequence
 * SourceCharacter (but not one of ` or \ or $)
 */
function parseTemplate(state, access, bindingType, result, tagged) {
    const cooked = [state.tokenValue];
    // TODO: properly implement raw parts / decide whether we want this
    consume(state, 540715 /* TemplateContinuation */);
    const expressions = [parse(state, access, 62 /* Assign */, bindingType)];
    while ((state.currentToken = scanTemplateTail(state)) !== 540714 /* TemplateTail */) {
        cooked.push(state.tokenValue);
        consume(state, 540715 /* TemplateContinuation */);
        expressions.push(parse(state, access, 62 /* Assign */, bindingType));
    }
    cooked.push(state.tokenValue);
    state.assignable = false;
    if (tagged) {
        nextToken(state);
        return new _ast_js__WEBPACK_IMPORTED_MODULE_1__.TaggedTemplateExpression(cooked, cooked, result, expressions);
    }
    else {
        nextToken(state);
        return new _ast_js__WEBPACK_IMPORTED_MODULE_1__.TemplateExpression(cooked, expressions);
    }
}
function nextToken(state) {
    while (state.index < state.length) {
        state.startIndex = state.index;
        if ((state.currentToken = (CharScanners[state.currentChar](state))) != null) { // a null token means the character must be skipped
            return;
        }
    }
    state.currentToken = 1572864 /* EOF */;
}
function nextChar(state) {
    return state.currentChar = state.input.charCodeAt(++state.index);
}
function scanIdentifier(state) {
    // run to the next non-idPart
    while (IdParts[nextChar(state)])
        ;
    const token = KeywordLookup[state.tokenValue = state.tokenRaw];
    return token === undefined ? 1024 /* Identifier */ : token;
}
function scanNumber(state, isFloat) {
    let char = state.currentChar;
    if (isFloat === false) {
        do {
            char = nextChar(state);
        } while (char <= 57 /* Nine */ && char >= 48 /* Zero */);
        if (char !== 46 /* Dot */) {
            state.tokenValue = parseInt(state.tokenRaw, 10);
            return 8192 /* NumericLiteral */;
        }
        // past this point it's always a float
        char = nextChar(state);
        if (state.index >= state.length) {
            // unless the number ends with a dot - that behaves a little different in native ES expressions
            // but in our AST that behavior has no effect because numbers are always stored in variables
            state.tokenValue = parseInt(state.tokenRaw.slice(0, -1), 10);
            return 8192 /* NumericLiteral */;
        }
    }
    if (char <= 57 /* Nine */ && char >= 48 /* Zero */) {
        do {
            char = nextChar(state);
        } while (char <= 57 /* Nine */ && char >= 48 /* Zero */);
    }
    else {
        state.currentChar = state.input.charCodeAt(--state.index);
    }
    state.tokenValue = parseFloat(state.tokenRaw);
    return 8192 /* NumericLiteral */;
}
function scanString(state) {
    const quote = state.currentChar;
    nextChar(state); // Skip initial quote.
    let unescaped = 0;
    const buffer = new Array();
    let marker = state.index;
    while (state.currentChar !== quote) {
        if (state.currentChar === 92 /* Backslash */) {
            buffer.push(state.input.slice(marker, state.index));
            nextChar(state);
            unescaped = unescapeCode(state.currentChar);
            nextChar(state);
            buffer.push(String.fromCharCode(unescaped));
            marker = state.index;
        }
        else if (state.index >= state.length) {
            throw new Error(`Unterminated quote in string literal: '${state.input}'`);
        }
        else {
            nextChar(state);
        }
    }
    const last = state.input.slice(marker, state.index);
    nextChar(state); // Skip terminating quote.
    // Compute the unescaped string value.
    buffer.push(last);
    const unescapedStr = buffer.join('');
    state.tokenValue = unescapedStr;
    return 4096 /* StringLiteral */;
}
function scanTemplate(state) {
    let tail = true;
    let result = '';
    while (nextChar(state) !== 96 /* Backtick */) {
        if (state.currentChar === 36 /* Dollar */) {
            if ((state.index + 1) < state.length && state.input.charCodeAt(state.index + 1) === 123 /* OpenBrace */) {
                state.index++;
                tail = false;
                break;
            }
            else {
                result += '$';
            }
        }
        else if (state.currentChar === 92 /* Backslash */) {
            result += String.fromCharCode(unescapeCode(nextChar(state)));
        }
        else {
            if (state.index >= state.length) {
                throw new Error(`Unterminated template string: '${state.input}'`);
            }
            result += String.fromCharCode(state.currentChar);
        }
    }
    nextChar(state);
    state.tokenValue = result;
    if (tail) {
        return 540714 /* TemplateTail */;
    }
    return 540715 /* TemplateContinuation */;
}
function scanTemplateTail(state) {
    if (state.index >= state.length) {
        throw new Error(`Unterminated template string: '${state.input}'`);
    }
    state.index--;
    return scanTemplate(state);
}
function consumeOpt(state, token) {
    if (state.currentToken === token) {
        nextToken(state);
        return true;
    }
    return false;
}
function consume(state, token) {
    if (state.currentToken === token) {
        nextToken(state);
    }
    else {
        throw new Error(`Missing expected token: '${state.input}'`);
    }
}
/**
 * Array for mapping tokens to token values. The indices of the values
 * correspond to the token bits 0-38.
 * For this to work properly, the values in the array must be kept in
 * the same order as the token bits.
 * Usage: TokenValues[token & Token.Type]
 */
const TokenValues = [
    $false, $true, $null, $undefined, '$this', '$host', '$parent',
    '(', '{', '.', '}', ')', ',', '[', ']', ':', '?', '\'', '"',
    '&', '|', '||', '&&', '==', '!=', '===', '!==', '<', '>',
    '<=', '>=', 'in', 'instanceof', '+', '-', 'typeof', 'void', '*', '%', '/', '=', '!',
    540714 /* TemplateTail */, 540715 /* TemplateContinuation */,
    'of'
];
const KeywordLookup = Object.create(null);
KeywordLookup.true = 2049 /* TrueKeyword */;
KeywordLookup.null = 2050 /* NullKeyword */;
KeywordLookup.false = 2048 /* FalseKeyword */;
KeywordLookup.undefined = 2051 /* UndefinedKeyword */;
KeywordLookup.$this = 3076 /* ThisScope */;
KeywordLookup.$host = 3077 /* HostScope */;
KeywordLookup.$parent = 3078 /* ParentScope */;
KeywordLookup.in = 1640799 /* InKeyword */;
KeywordLookup.instanceof = 1640800 /* InstanceOfKeyword */;
KeywordLookup.typeof = 34851 /* TypeofKeyword */;
KeywordLookup.void = 34852 /* VoidKeyword */;
KeywordLookup.of = 1051180 /* OfKeyword */;
/**
 * Ranges of code points in pairs of 2 (eg 0x41-0x5B, 0x61-0x7B, ...) where the second value is not inclusive (5-7 means 5 and 6)
 * Single values are denoted by the second value being a 0
 *
 * Copied from output generated with "node build/generate-unicode.js"
 *
 * See also: https://en.wikibooks.org/wiki/Unicode/Character_reference/0000-0FFF
 */
const codes = {
    /* [$0-9A-Za_a-z] */
    AsciiIdPart: [0x24, 0, 0x30, 0x3A, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B],
    IdStart: /* IdentifierStart */ [0x24, 0, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B, 0xAA, 0, 0xBA, 0, 0xC0, 0xD7, 0xD8, 0xF7, 0xF8, 0x2B9, 0x2E0, 0x2E5, 0x1D00, 0x1D26, 0x1D2C, 0x1D5D, 0x1D62, 0x1D66, 0x1D6B, 0x1D78, 0x1D79, 0x1DBF, 0x1E00, 0x1F00, 0x2071, 0, 0x207F, 0, 0x2090, 0x209D, 0x212A, 0x212C, 0x2132, 0, 0x214E, 0, 0x2160, 0x2189, 0x2C60, 0x2C80, 0xA722, 0xA788, 0xA78B, 0xA7AF, 0xA7B0, 0xA7B8, 0xA7F7, 0xA800, 0xAB30, 0xAB5B, 0xAB5C, 0xAB65, 0xFB00, 0xFB07, 0xFF21, 0xFF3B, 0xFF41, 0xFF5B],
    Digit: /* DecimalNumber */ [0x30, 0x3A],
    Skip: /* Skippable */ [0, 0x21, 0x7F, 0xA1]
};
/**
 * Decompress the ranges into an array of numbers so that the char code
 * can be used as an index to the lookup
 */
function decompress(lookup, $set, compressed, value) {
    const rangeCount = compressed.length;
    for (let i = 0; i < rangeCount; i += 2) {
        const start = compressed[i];
        let end = compressed[i + 1];
        end = end > 0 ? end : start + 1;
        if (lookup) {
            lookup.fill(value, start, end);
        }
        if ($set) {
            for (let ch = start; ch < end; ch++) {
                $set.add(ch);
            }
        }
    }
}
// CharFuncLookup functions
function returnToken(token) {
    return s => {
        nextChar(s);
        return token;
    };
}
const unexpectedCharacter = s => {
    throw new Error(`Unexpected character: '${s.input}'`);
};
unexpectedCharacter.notMapped = true;
// ASCII IdentifierPart lookup
const AsciiIdParts = new Set();
decompress(null, AsciiIdParts, codes.AsciiIdPart, true);
// IdentifierPart lookup
const IdParts = new Uint8Array(0xFFFF);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
decompress(IdParts, null, codes.IdStart, 1);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
decompress(IdParts, null, codes.Digit, 1);
// Character scanning function lookup
const CharScanners = new Array(0xFFFF);
CharScanners.fill(unexpectedCharacter, 0, 0xFFFF);
decompress(CharScanners, null, codes.Skip, s => {
    nextChar(s);
    return null;
});
decompress(CharScanners, null, codes.IdStart, scanIdentifier);
decompress(CharScanners, null, codes.Digit, s => scanNumber(s, false));
CharScanners[34 /* DoubleQuote */] =
    CharScanners[39 /* SingleQuote */] = s => {
        return scanString(s);
    };
CharScanners[96 /* Backtick */] = s => {
    return scanTemplate(s);
};
// !, !=, !==
CharScanners[33 /* Exclamation */] = s => {
    if (nextChar(s) !== 61 /* Equals */) {
        return 32809 /* Exclamation */;
    }
    if (nextChar(s) !== 61 /* Equals */) {
        return 1638680 /* ExclamationEquals */;
    }
    nextChar(s);
    return 1638682 /* ExclamationEqualsEquals */;
};
// =, ==, ===
CharScanners[61 /* Equals */] = s => {
    if (nextChar(s) !== 61 /* Equals */) {
        return 1048616 /* Equals */;
    }
    if (nextChar(s) !== 61 /* Equals */) {
        return 1638679 /* EqualsEquals */;
    }
    nextChar(s);
    return 1638681 /* EqualsEqualsEquals */;
};
// &, &&
CharScanners[38 /* Ampersand */] = s => {
    if (nextChar(s) !== 38 /* Ampersand */) {
        return 1572883 /* Ampersand */;
    }
    nextChar(s);
    return 1638614 /* AmpersandAmpersand */;
};
// |, ||
CharScanners[124 /* Bar */] = s => {
    if (nextChar(s) !== 124 /* Bar */) {
        return 1572884 /* Bar */;
    }
    nextChar(s);
    return 1638549 /* BarBar */;
};
// .
CharScanners[46 /* Dot */] = s => {
    if (nextChar(s) <= 57 /* Nine */ && s.currentChar >= 48 /* Zero */) {
        return scanNumber(s, true);
    }
    return 16393 /* Dot */;
};
// <, <=
CharScanners[60 /* LessThan */] = s => {
    if (nextChar(s) !== 61 /* Equals */) {
        return 1638747 /* LessThan */;
    }
    nextChar(s);
    return 1638749 /* LessThanEquals */;
};
// >, >=
CharScanners[62 /* GreaterThan */] = s => {
    if (nextChar(s) !== 61 /* Equals */) {
        return 1638748 /* GreaterThan */;
    }
    nextChar(s);
    return 1638750 /* GreaterThanEquals */;
};
CharScanners[37 /* Percent */] = returnToken(1638886 /* Percent */);
CharScanners[40 /* OpenParen */] = returnToken(671751 /* OpenParen */);
CharScanners[41 /* CloseParen */] = returnToken(1835019 /* CloseParen */);
CharScanners[42 /* Asterisk */] = returnToken(1638885 /* Asterisk */);
CharScanners[43 /* Plus */] = returnToken(623009 /* Plus */);
CharScanners[44 /* Comma */] = returnToken(1572876 /* Comma */);
CharScanners[45 /* Minus */] = returnToken(623010 /* Minus */);
CharScanners[47 /* Slash */] = returnToken(1638887 /* Slash */);
CharScanners[58 /* Colon */] = returnToken(1572879 /* Colon */);
CharScanners[63 /* Question */] = returnToken(1572880 /* Question */);
CharScanners[91 /* OpenBracket */] = returnToken(671757 /* OpenBracket */);
CharScanners[93 /* CloseBracket */] = returnToken(1835022 /* CloseBracket */);
CharScanners[123 /* OpenBrace */] = returnToken(131080 /* OpenBrace */);
CharScanners[125 /* CloseBrace */] = returnToken(1835018 /* CloseBrace */);
//# sourceMappingURL=expression-parser.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IPlatform": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IPlatform,
/* harmony export */   "Platform": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.Platform,
/* harmony export */   "TaskQueue": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.TaskQueue,
/* harmony export */   "Task": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.Task,
/* harmony export */   "TaskAbortError": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.TaskAbortError,
/* harmony export */   "TaskQueuePriority": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.TaskQueuePriority,
/* harmony export */   "TaskStatus": () => /* reexport safe */ _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__.TaskStatus,
/* harmony export */   "alias": () => /* reexport safe */ _alias_js__WEBPACK_IMPORTED_MODULE_2__.alias,
/* harmony export */   "registerAliases": () => /* reexport safe */ _alias_js__WEBPACK_IMPORTED_MODULE_2__.registerAliases,
/* harmony export */   "ExpressionKind": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.ExpressionKind,
/* harmony export */   "CallFunctionExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.CallFunctionExpression,
/* harmony export */   "CustomExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.CustomExpression,
/* harmony export */   "BindingBehaviorExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.BindingBehaviorExpression,
/* harmony export */   "ValueConverterExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.ValueConverterExpression,
/* harmony export */   "AssignExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.AssignExpression,
/* harmony export */   "ConditionalExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.ConditionalExpression,
/* harmony export */   "AccessThisExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.AccessThisExpression,
/* harmony export */   "AccessScopeExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.AccessScopeExpression,
/* harmony export */   "AccessMemberExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.AccessMemberExpression,
/* harmony export */   "AccessKeyedExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.AccessKeyedExpression,
/* harmony export */   "CallScopeExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.CallScopeExpression,
/* harmony export */   "CallMemberExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.CallMemberExpression,
/* harmony export */   "BinaryExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.BinaryExpression,
/* harmony export */   "UnaryExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.UnaryExpression,
/* harmony export */   "PrimitiveLiteralExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.PrimitiveLiteralExpression,
/* harmony export */   "HtmlLiteralExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.HtmlLiteralExpression,
/* harmony export */   "ArrayLiteralExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.ArrayLiteralExpression,
/* harmony export */   "ObjectLiteralExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.ObjectLiteralExpression,
/* harmony export */   "TemplateExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.TemplateExpression,
/* harmony export */   "TaggedTemplateExpression": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.TaggedTemplateExpression,
/* harmony export */   "ArrayBindingPattern": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.ArrayBindingPattern,
/* harmony export */   "ObjectBindingPattern": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.ObjectBindingPattern,
/* harmony export */   "BindingIdentifier": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.BindingIdentifier,
/* harmony export */   "ForOfStatement": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.ForOfStatement,
/* harmony export */   "Interpolation": () => /* reexport safe */ _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__.Interpolation,
/* harmony export */   "connectable": () => /* reexport safe */ _binding_connectable_js__WEBPACK_IMPORTED_MODULE_4__.connectable,
/* harmony export */   "BindingMediator": () => /* reexport safe */ _binding_connectable_js__WEBPACK_IMPORTED_MODULE_4__.BindingMediator,
/* harmony export */   "BindingObserverRecord": () => /* reexport safe */ _binding_connectable_js__WEBPACK_IMPORTED_MODULE_4__.BindingObserverRecord,
/* harmony export */   "IExpressionParser": () => /* reexport safe */ _binding_expression_parser_js__WEBPACK_IMPORTED_MODULE_5__.IExpressionParser,
/* harmony export */   "BindingType": () => /* reexport safe */ _binding_expression_parser_js__WEBPACK_IMPORTED_MODULE_5__.BindingType,
/* harmony export */   "parseExpression": () => /* reexport safe */ _binding_expression_parser_js__WEBPACK_IMPORTED_MODULE_5__.parseExpression,
/* harmony export */   "Char": () => /* reexport safe */ _binding_expression_parser_js__WEBPACK_IMPORTED_MODULE_5__.Char,
/* harmony export */   "Access": () => /* reexport safe */ _binding_expression_parser_js__WEBPACK_IMPORTED_MODULE_5__.Access,
/* harmony export */   "Precedence": () => /* reexport safe */ _binding_expression_parser_js__WEBPACK_IMPORTED_MODULE_5__.Precedence,
/* harmony export */   "parse": () => /* reexport safe */ _binding_expression_parser_js__WEBPACK_IMPORTED_MODULE_5__.parse,
/* harmony export */   "ParserState": () => /* reexport safe */ _binding_expression_parser_js__WEBPACK_IMPORTED_MODULE_5__.ParserState,
/* harmony export */   "ArrayObserver": () => /* reexport safe */ _observation_array_observer_js__WEBPACK_IMPORTED_MODULE_6__.ArrayObserver,
/* harmony export */   "ArrayIndexObserver": () => /* reexport safe */ _observation_array_observer_js__WEBPACK_IMPORTED_MODULE_6__.ArrayIndexObserver,
/* harmony export */   "enableArrayObservation": () => /* reexport safe */ _observation_array_observer_js__WEBPACK_IMPORTED_MODULE_6__.enableArrayObservation,
/* harmony export */   "disableArrayObservation": () => /* reexport safe */ _observation_array_observer_js__WEBPACK_IMPORTED_MODULE_6__.disableArrayObservation,
/* harmony export */   "applyMutationsToIndices": () => /* reexport safe */ _observation_array_observer_js__WEBPACK_IMPORTED_MODULE_6__.applyMutationsToIndices,
/* harmony export */   "synchronizeIndices": () => /* reexport safe */ _observation_array_observer_js__WEBPACK_IMPORTED_MODULE_6__.synchronizeIndices,
/* harmony export */   "MapObserver": () => /* reexport safe */ _observation_map_observer_js__WEBPACK_IMPORTED_MODULE_7__.MapObserver,
/* harmony export */   "enableMapObservation": () => /* reexport safe */ _observation_map_observer_js__WEBPACK_IMPORTED_MODULE_7__.enableMapObservation,
/* harmony export */   "disableMapObservation": () => /* reexport safe */ _observation_map_observer_js__WEBPACK_IMPORTED_MODULE_7__.disableMapObservation,
/* harmony export */   "SetObserver": () => /* reexport safe */ _observation_set_observer_js__WEBPACK_IMPORTED_MODULE_8__.SetObserver,
/* harmony export */   "enableSetObservation": () => /* reexport safe */ _observation_set_observer_js__WEBPACK_IMPORTED_MODULE_8__.enableSetObservation,
/* harmony export */   "disableSetObservation": () => /* reexport safe */ _observation_set_observer_js__WEBPACK_IMPORTED_MODULE_8__.disableSetObservation,
/* harmony export */   "BindingContext": () => /* reexport safe */ _observation_binding_context_js__WEBPACK_IMPORTED_MODULE_9__.BindingContext,
/* harmony export */   "Scope": () => /* reexport safe */ _observation_binding_context_js__WEBPACK_IMPORTED_MODULE_9__.Scope,
/* harmony export */   "OverrideContext": () => /* reexport safe */ _observation_binding_context_js__WEBPACK_IMPORTED_MODULE_9__.OverrideContext,
/* harmony export */   "CollectionLengthObserver": () => /* reexport safe */ _observation_collection_length_observer_js__WEBPACK_IMPORTED_MODULE_10__.CollectionLengthObserver,
/* harmony export */   "CollectionSizeObserver": () => /* reexport safe */ _observation_collection_length_observer_js__WEBPACK_IMPORTED_MODULE_10__.CollectionSizeObserver,
/* harmony export */   "ComputedObserver": () => /* reexport safe */ _observation_computed_observer_js__WEBPACK_IMPORTED_MODULE_11__.ComputedObserver,
/* harmony export */   "IDirtyChecker": () => /* reexport safe */ _observation_dirty_checker_js__WEBPACK_IMPORTED_MODULE_12__.IDirtyChecker,
/* harmony export */   "DirtyCheckProperty": () => /* reexport safe */ _observation_dirty_checker_js__WEBPACK_IMPORTED_MODULE_12__.DirtyCheckProperty,
/* harmony export */   "DirtyCheckSettings": () => /* reexport safe */ _observation_dirty_checker_js__WEBPACK_IMPORTED_MODULE_12__.DirtyCheckSettings,
/* harmony export */   "observable": () => /* reexport safe */ _observation_observable_js__WEBPACK_IMPORTED_MODULE_13__.observable,
/* harmony export */   "IObserverLocator": () => /* reexport safe */ _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_14__.IObserverLocator,
/* harmony export */   "INodeObserverLocator": () => /* reexport safe */ _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_14__.INodeObserverLocator,
/* harmony export */   "getCollectionObserver": () => /* reexport safe */ _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_14__.getCollectionObserver,
/* harmony export */   "ObserverLocator": () => /* reexport safe */ _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_14__.ObserverLocator,
/* harmony export */   "PrimitiveObserver": () => /* reexport safe */ _observation_primitive_observer_js__WEBPACK_IMPORTED_MODULE_15__.PrimitiveObserver,
/* harmony export */   "PropertyAccessor": () => /* reexport safe */ _observation_property_accessor_js__WEBPACK_IMPORTED_MODULE_16__.PropertyAccessor,
/* harmony export */   "ProxyObservable": () => /* reexport safe */ _observation_proxy_observation_js__WEBPACK_IMPORTED_MODULE_17__.ProxyObservable,
/* harmony export */   "SetterObserver": () => /* reexport safe */ _observation_setter_observer_js__WEBPACK_IMPORTED_MODULE_18__.SetterObserver,
/* harmony export */   "ISignaler": () => /* reexport safe */ _observation_signaler_js__WEBPACK_IMPORTED_MODULE_19__.ISignaler,
/* harmony export */   "SubscriberRecord": () => /* reexport safe */ _observation_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_20__.SubscriberRecord,
/* harmony export */   "subscriberCollection": () => /* reexport safe */ _observation_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_20__.subscriberCollection,
/* harmony export */   "ConnectableSwitcher": () => /* reexport safe */ _observation_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_21__.ConnectableSwitcher,
/* harmony export */   "bindingBehavior": () => /* reexport safe */ _binding_behavior_js__WEBPACK_IMPORTED_MODULE_22__.bindingBehavior,
/* harmony export */   "BindingBehavior": () => /* reexport safe */ _binding_behavior_js__WEBPACK_IMPORTED_MODULE_22__.BindingBehavior,
/* harmony export */   "BindingBehaviorDefinition": () => /* reexport safe */ _binding_behavior_js__WEBPACK_IMPORTED_MODULE_22__.BindingBehaviorDefinition,
/* harmony export */   "BindingInterceptor": () => /* reexport safe */ _binding_behavior_js__WEBPACK_IMPORTED_MODULE_22__.BindingInterceptor,
/* harmony export */   "BindingBehaviorFactory": () => /* reexport safe */ _binding_behavior_js__WEBPACK_IMPORTED_MODULE_22__.BindingBehaviorFactory,
/* harmony export */   "BindingBehaviorStrategy": () => /* reexport safe */ _binding_behavior_js__WEBPACK_IMPORTED_MODULE_22__.BindingBehaviorStrategy,
/* harmony export */   "ValueConverter": () => /* reexport safe */ _value_converter_js__WEBPACK_IMPORTED_MODULE_23__.ValueConverter,
/* harmony export */   "ValueConverterDefinition": () => /* reexport safe */ _value_converter_js__WEBPACK_IMPORTED_MODULE_23__.ValueConverterDefinition,
/* harmony export */   "valueConverter": () => /* reexport safe */ _value_converter_js__WEBPACK_IMPORTED_MODULE_23__.valueConverter,
/* harmony export */   "BindingMode": () => /* reexport safe */ _observation_js__WEBPACK_IMPORTED_MODULE_24__.BindingMode,
/* harmony export */   "LifecycleFlags": () => /* reexport safe */ _observation_js__WEBPACK_IMPORTED_MODULE_24__.LifecycleFlags,
/* harmony export */   "AccessorType": () => /* reexport safe */ _observation_js__WEBPACK_IMPORTED_MODULE_24__.AccessorType,
/* harmony export */   "CollectionKind": () => /* reexport safe */ _observation_js__WEBPACK_IMPORTED_MODULE_24__.CollectionKind,
/* harmony export */   "DelegationStrategy": () => /* reexport safe */ _observation_js__WEBPACK_IMPORTED_MODULE_24__.DelegationStrategy,
/* harmony export */   "isIndexMap": () => /* reexport safe */ _observation_js__WEBPACK_IMPORTED_MODULE_24__.isIndexMap,
/* harmony export */   "copyIndexMap": () => /* reexport safe */ _observation_js__WEBPACK_IMPORTED_MODULE_24__.copyIndexMap,
/* harmony export */   "cloneIndexMap": () => /* reexport safe */ _observation_js__WEBPACK_IMPORTED_MODULE_24__.cloneIndexMap,
/* harmony export */   "createIndexMap": () => /* reexport safe */ _observation_js__WEBPACK_IMPORTED_MODULE_24__.createIndexMap
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/platform */ "./node_modules/@aurelia/platform/dist/esm/index.js");
/* harmony import */ var _alias_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./alias.js */ "./node_modules/@aurelia/runtime/dist/esm/alias.js");
/* harmony import */ var _binding_ast_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./binding/ast.js */ "./node_modules/@aurelia/runtime/dist/esm/binding/ast.js");
/* harmony import */ var _binding_connectable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./binding/connectable.js */ "./node_modules/@aurelia/runtime/dist/esm/binding/connectable.js");
/* harmony import */ var _binding_expression_parser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./binding/expression-parser.js */ "./node_modules/@aurelia/runtime/dist/esm/binding/expression-parser.js");
/* harmony import */ var _observation_array_observer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./observation/array-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/array-observer.js");
/* harmony import */ var _observation_map_observer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./observation/map-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/map-observer.js");
/* harmony import */ var _observation_set_observer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./observation/set-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/set-observer.js");
/* harmony import */ var _observation_binding_context_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./observation/binding-context.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/binding-context.js");
/* harmony import */ var _observation_collection_length_observer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./observation/collection-length-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/collection-length-observer.js");
/* harmony import */ var _observation_computed_observer_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./observation/computed-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/computed-observer.js");
/* harmony import */ var _observation_dirty_checker_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./observation/dirty-checker.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/dirty-checker.js");
/* harmony import */ var _observation_observable_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./observation/observable.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/observable.js");
/* harmony import */ var _observation_observer_locator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./observation/observer-locator.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/observer-locator.js");
/* harmony import */ var _observation_primitive_observer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./observation/primitive-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/primitive-observer.js");
/* harmony import */ var _observation_property_accessor_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./observation/property-accessor.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/property-accessor.js");
/* harmony import */ var _observation_proxy_observation_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./observation/proxy-observation.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/proxy-observation.js");
/* harmony import */ var _observation_setter_observer_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./observation/setter-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/setter-observer.js");
/* harmony import */ var _observation_signaler_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./observation/signaler.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/signaler.js");
/* harmony import */ var _observation_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./observation/subscriber-collection.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/subscriber-collection.js");
/* harmony import */ var _observation_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./observation/connectable-switcher.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/connectable-switcher.js");
/* harmony import */ var _binding_behavior_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./binding-behavior.js */ "./node_modules/@aurelia/runtime/dist/esm/binding-behavior.js");
/* harmony import */ var _value_converter_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./value-converter.js */ "./node_modules/@aurelia/runtime/dist/esm/value-converter.js");
/* harmony import */ var _observation_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./observation.js */ "./node_modules/@aurelia/runtime/dist/esm/observation.js");

























//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindingMode": () => /* binding */ BindingMode,
/* harmony export */   "LifecycleFlags": () => /* binding */ LifecycleFlags,
/* harmony export */   "SubscriberFlags": () => /* binding */ SubscriberFlags,
/* harmony export */   "DelegationStrategy": () => /* binding */ DelegationStrategy,
/* harmony export */   "CollectionKind": () => /* binding */ CollectionKind,
/* harmony export */   "AccessorType": () => /* binding */ AccessorType,
/* harmony export */   "copyIndexMap": () => /* binding */ copyIndexMap,
/* harmony export */   "createIndexMap": () => /* binding */ createIndexMap,
/* harmony export */   "cloneIndexMap": () => /* binding */ cloneIndexMap,
/* harmony export */   "isIndexMap": () => /* binding */ isIndexMap
/* harmony export */ });
/*
* Note: the oneTime binding now has a non-zero value for 2 reasons:
*  - plays nicer with bitwise operations (more consistent code, more explicit settings)
*  - allows for potentially having something like BindingMode.oneTime | BindingMode.fromView, where an initial value is set once to the view but updates from the view also propagate back to the view model
*
* Furthermore, the "default" mode would be for simple ".bind" expressions to make it explicit for our logic that the default is being used.
* This essentially adds extra information which binding could use to do smarter things and allows bindingBehaviors that add a mode instead of simply overwriting it
*/
var BindingMode;
(function (BindingMode) {
    BindingMode[BindingMode["oneTime"] = 1] = "oneTime";
    BindingMode[BindingMode["toView"] = 2] = "toView";
    BindingMode[BindingMode["fromView"] = 4] = "fromView";
    BindingMode[BindingMode["twoWay"] = 6] = "twoWay";
    BindingMode[BindingMode["default"] = 8] = "default";
})(BindingMode || (BindingMode = {}));
var LifecycleFlags;
(function (LifecycleFlags) {
    LifecycleFlags[LifecycleFlags["none"] = 0] = "none";
    // Bitmask for flags that need to be stored on a binding during $bind for mutation
    // callbacks outside of $bind
    LifecycleFlags[LifecycleFlags["persistentBindingFlags"] = 15367] = "persistentBindingFlags";
    LifecycleFlags[LifecycleFlags["allowParentScopeTraversal"] = 1024] = "allowParentScopeTraversal";
    LifecycleFlags[LifecycleFlags["observeLeafPropertiesOnly"] = 2048] = "observeLeafPropertiesOnly";
    LifecycleFlags[LifecycleFlags["targetObserverFlags"] = 12295] = "targetObserverFlags";
    LifecycleFlags[LifecycleFlags["noFlush"] = 4096] = "noFlush";
    LifecycleFlags[LifecycleFlags["persistentTargetObserverQueue"] = 8192] = "persistentTargetObserverQueue";
    LifecycleFlags[LifecycleFlags["bindingStrategy"] = 7] = "bindingStrategy";
    LifecycleFlags[LifecycleFlags["getterSetterStrategy"] = 1] = "getterSetterStrategy";
    LifecycleFlags[LifecycleFlags["proxyStrategy"] = 2] = "proxyStrategy";
    LifecycleFlags[LifecycleFlags["isStrictBindingStrategy"] = 4] = "isStrictBindingStrategy";
    LifecycleFlags[LifecycleFlags["update"] = 24] = "update";
    LifecycleFlags[LifecycleFlags["updateTarget"] = 8] = "updateTarget";
    LifecycleFlags[LifecycleFlags["updateSource"] = 16] = "updateSource";
    LifecycleFlags[LifecycleFlags["from"] = 96] = "from";
    LifecycleFlags[LifecycleFlags["fromBind"] = 32] = "fromBind";
    LifecycleFlags[LifecycleFlags["fromUnbind"] = 64] = "fromUnbind";
    LifecycleFlags[LifecycleFlags["mustEvaluate"] = 128] = "mustEvaluate";
    LifecycleFlags[LifecycleFlags["isTraversingParentScope"] = 256] = "isTraversingParentScope";
    LifecycleFlags[LifecycleFlags["dispose"] = 512] = "dispose";
})(LifecycleFlags || (LifecycleFlags = {}));
/** @internal */
var SubscriberFlags;
(function (SubscriberFlags) {
    SubscriberFlags[SubscriberFlags["None"] = 0] = "None";
    SubscriberFlags[SubscriberFlags["Subscriber0"] = 1] = "Subscriber0";
    SubscriberFlags[SubscriberFlags["Subscriber1"] = 2] = "Subscriber1";
    SubscriberFlags[SubscriberFlags["Subscriber2"] = 4] = "Subscriber2";
    SubscriberFlags[SubscriberFlags["SubscribersRest"] = 8] = "SubscribersRest";
    SubscriberFlags[SubscriberFlags["Any"] = 15] = "Any";
})(SubscriberFlags || (SubscriberFlags = {}));
var DelegationStrategy;
(function (DelegationStrategy) {
    DelegationStrategy[DelegationStrategy["none"] = 0] = "none";
    DelegationStrategy[DelegationStrategy["capturing"] = 1] = "capturing";
    DelegationStrategy[DelegationStrategy["bubbling"] = 2] = "bubbling";
})(DelegationStrategy || (DelegationStrategy = {}));
var CollectionKind;
(function (CollectionKind) {
    CollectionKind[CollectionKind["indexed"] = 8] = "indexed";
    CollectionKind[CollectionKind["keyed"] = 4] = "keyed";
    CollectionKind[CollectionKind["array"] = 9] = "array";
    CollectionKind[CollectionKind["map"] = 6] = "map";
    CollectionKind[CollectionKind["set"] = 7] = "set";
})(CollectionKind || (CollectionKind = {}));
var AccessorType;
(function (AccessorType) {
    AccessorType[AccessorType["None"] = 0] = "None";
    AccessorType[AccessorType["Observer"] = 1] = "Observer";
    AccessorType[AccessorType["Node"] = 2] = "Node";
    // misc characteristic of accessors/observers when update
    //
    // by default, everything is synchronous
    // except changes that are supposed to cause reflow/heavy computation
    // an observer can use this flag to signal binding that don't carelessly tell it to update
    // queue it instead
    // todo: https://gist.github.com/paulirish/5d52fb081b3570c81e3a
    // todo: https://csstriggers.com/
    AccessorType[AccessorType["Layout"] = 4] = "Layout";
    // by default, everything is an object
    // eg: a property is accessed on an object
    // unless explicitly not so
    AccessorType[AccessorType["Primtive"] = 8] = "Primtive";
    AccessorType[AccessorType["Array"] = 18] = "Array";
    AccessorType[AccessorType["Set"] = 34] = "Set";
    AccessorType[AccessorType["Map"] = 66] = "Map";
})(AccessorType || (AccessorType = {}));
function copyIndexMap(existing, deletedItems) {
    const { length } = existing;
    const arr = Array(length);
    let i = 0;
    while (i < length) {
        arr[i] = existing[i];
        ++i;
    }
    if (deletedItems !== void 0) {
        arr.deletedItems = deletedItems.slice(0);
    }
    else if (existing.deletedItems !== void 0) {
        arr.deletedItems = existing.deletedItems.slice(0);
    }
    else {
        arr.deletedItems = [];
    }
    arr.isIndexMap = true;
    return arr;
}
function createIndexMap(length = 0) {
    const arr = Array(length);
    let i = 0;
    while (i < length) {
        arr[i] = i++;
    }
    arr.deletedItems = [];
    arr.isIndexMap = true;
    return arr;
}
function cloneIndexMap(indexMap) {
    const clone = indexMap.slice();
    clone.deletedItems = indexMap.deletedItems.slice();
    clone.isIndexMap = true;
    return clone;
}
function isIndexMap(value) {
    return value instanceof Array && value.isIndexMap === true;
}
//# sourceMappingURL=observation.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/array-observer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/array-observer.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "enableArrayObservation": () => /* binding */ enableArrayObservation,
/* harmony export */   "disableArrayObservation": () => /* binding */ disableArrayObservation,
/* harmony export */   "ArrayObserver": () => /* binding */ ArrayObserver,
/* harmony export */   "ArrayIndexObserver": () => /* binding */ ArrayIndexObserver,
/* harmony export */   "getArrayObserver": () => /* binding */ getArrayObserver,
/* harmony export */   "applyMutationsToIndices": () => /* binding */ applyMutationsToIndices,
/* harmony export */   "synchronizeIndices": () => /* binding */ synchronizeIndices
/* harmony export */ });
/* harmony import */ var _observation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observation.js */ "./node_modules/@aurelia/runtime/dist/esm/observation.js");
/* harmony import */ var _collection_length_observer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./collection-length-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/collection-length-observer.js");
/* harmony import */ var _subscriber_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./subscriber-collection.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/subscriber-collection.js");
/* harmony import */ var _utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities-objects.js */ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js");




const observerLookup = new WeakMap();
// https://tc39.github.io/ecma262/#sec-sortcompare
function sortCompare(x, y) {
    if (x === y) {
        return 0;
    }
    x = x === null ? 'null' : x.toString();
    y = y === null ? 'null' : y.toString();
    return x < y ? -1 : 1;
}
function preSortCompare(x, y) {
    if (x === void 0) {
        if (y === void 0) {
            return 0;
        }
        else {
            return 1;
        }
    }
    if (y === void 0) {
        return -1;
    }
    return 0;
}
function insertionSort(arr, indexMap, from, to, compareFn) {
    let velement, ielement, vtmp, itmp, order;
    let i, j;
    for (i = from + 1; i < to; i++) {
        velement = arr[i];
        ielement = indexMap[i];
        for (j = i - 1; j >= from; j--) {
            vtmp = arr[j];
            itmp = indexMap[j];
            order = compareFn(vtmp, velement);
            if (order > 0) {
                arr[j + 1] = vtmp;
                indexMap[j + 1] = itmp;
            }
            else {
                break;
            }
        }
        arr[j + 1] = velement;
        indexMap[j + 1] = ielement;
    }
}
function quickSort(arr, indexMap, from, to, compareFn) {
    let thirdIndex = 0, i = 0;
    let v0, v1, v2;
    let i0, i1, i2;
    let c01, c02, c12;
    let vtmp, itmp;
    let vpivot, ipivot, lowEnd, highStart;
    let velement, ielement, order, vtopElement;
    // eslint-disable-next-line no-constant-condition
    while (true) {
        if (to - from <= 10) {
            insertionSort(arr, indexMap, from, to, compareFn);
            return;
        }
        thirdIndex = from + ((to - from) >> 1);
        v0 = arr[from];
        i0 = indexMap[from];
        v1 = arr[to - 1];
        i1 = indexMap[to - 1];
        v2 = arr[thirdIndex];
        i2 = indexMap[thirdIndex];
        c01 = compareFn(v0, v1);
        if (c01 > 0) {
            vtmp = v0;
            itmp = i0;
            v0 = v1;
            i0 = i1;
            v1 = vtmp;
            i1 = itmp;
        }
        c02 = compareFn(v0, v2);
        if (c02 >= 0) {
            vtmp = v0;
            itmp = i0;
            v0 = v2;
            i0 = i2;
            v2 = v1;
            i2 = i1;
            v1 = vtmp;
            i1 = itmp;
        }
        else {
            c12 = compareFn(v1, v2);
            if (c12 > 0) {
                vtmp = v1;
                itmp = i1;
                v1 = v2;
                i1 = i2;
                v2 = vtmp;
                i2 = itmp;
            }
        }
        arr[from] = v0;
        indexMap[from] = i0;
        arr[to - 1] = v2;
        indexMap[to - 1] = i2;
        vpivot = v1;
        ipivot = i1;
        lowEnd = from + 1;
        highStart = to - 1;
        arr[thirdIndex] = arr[lowEnd];
        indexMap[thirdIndex] = indexMap[lowEnd];
        arr[lowEnd] = vpivot;
        indexMap[lowEnd] = ipivot;
        partition: for (i = lowEnd + 1; i < highStart; i++) {
            velement = arr[i];
            ielement = indexMap[i];
            order = compareFn(velement, vpivot);
            if (order < 0) {
                arr[i] = arr[lowEnd];
                indexMap[i] = indexMap[lowEnd];
                arr[lowEnd] = velement;
                indexMap[lowEnd] = ielement;
                lowEnd++;
            }
            else if (order > 0) {
                do {
                    highStart--;
                    // eslint-disable-next-line eqeqeq
                    if (highStart == i) {
                        break partition;
                    }
                    vtopElement = arr[highStart];
                    order = compareFn(vtopElement, vpivot);
                } while (order > 0);
                arr[i] = arr[highStart];
                indexMap[i] = indexMap[highStart];
                arr[highStart] = velement;
                indexMap[highStart] = ielement;
                if (order < 0) {
                    velement = arr[i];
                    ielement = indexMap[i];
                    arr[i] = arr[lowEnd];
                    indexMap[i] = indexMap[lowEnd];
                    arr[lowEnd] = velement;
                    indexMap[lowEnd] = ielement;
                    lowEnd++;
                }
            }
        }
        if (to - highStart < lowEnd - from) {
            quickSort(arr, indexMap, highStart, to, compareFn);
            to = lowEnd;
        }
        else {
            quickSort(arr, indexMap, from, lowEnd, compareFn);
            from = highStart;
        }
    }
}
const proto = Array.prototype;
const $push = proto.push;
const $unshift = proto.unshift;
const $pop = proto.pop;
const $shift = proto.shift;
const $splice = proto.splice;
const $reverse = proto.reverse;
const $sort = proto.sort;
const native = { push: $push, unshift: $unshift, pop: $pop, shift: $shift, splice: $splice, reverse: $reverse, sort: $sort };
const methods = ['push', 'unshift', 'pop', 'shift', 'splice', 'reverse', 'sort'];
const observe = {
    // https://tc39.github.io/ecma262/#sec-array.prototype.push
    push: function (...args) {
        const o = observerLookup.get(this);
        if (o === void 0) {
            return $push.apply(this, args);
        }
        const len = this.length;
        const argCount = args.length;
        if (argCount === 0) {
            return len;
        }
        this.length = o.indexMap.length = len + argCount;
        let i = len;
        while (i < this.length) {
            this[i] = args[i - len];
            o.indexMap[i] = -2;
            i++;
        }
        o.notify();
        return this.length;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.unshift
    unshift: function (...args) {
        const o = observerLookup.get(this);
        if (o === void 0) {
            return $unshift.apply(this, args);
        }
        const argCount = args.length;
        const inserts = new Array(argCount);
        let i = 0;
        while (i < argCount) {
            inserts[i++] = -2;
        }
        $unshift.apply(o.indexMap, inserts);
        const len = $unshift.apply(this, args);
        o.notify();
        return len;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.pop
    pop: function () {
        const o = observerLookup.get(this);
        if (o === void 0) {
            return $pop.call(this);
        }
        const indexMap = o.indexMap;
        const element = $pop.call(this);
        // only mark indices as deleted if they actually existed in the original array
        const index = indexMap.length - 1;
        if (indexMap[index] > -1) {
            indexMap.deletedItems.push(indexMap[index]);
        }
        $pop.call(indexMap);
        o.notify();
        return element;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.shift
    shift: function () {
        const o = observerLookup.get(this);
        if (o === void 0) {
            return $shift.call(this);
        }
        const indexMap = o.indexMap;
        const element = $shift.call(this);
        // only mark indices as deleted if they actually existed in the original array
        if (indexMap[0] > -1) {
            indexMap.deletedItems.push(indexMap[0]);
        }
        $shift.call(indexMap);
        o.notify();
        return element;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.splice
    splice: function (...args) {
        const start = args[0];
        const deleteCount = args[1];
        const o = observerLookup.get(this);
        if (o === void 0) {
            return $splice.apply(this, args);
        }
        const len = this.length;
        const relativeStart = start | 0;
        const actualStart = relativeStart < 0 ? Math.max((len + relativeStart), 0) : Math.min(relativeStart, len);
        const indexMap = o.indexMap;
        const argCount = args.length;
        const actualDeleteCount = argCount === 0 ? 0 : argCount === 1 ? len - actualStart : deleteCount;
        if (actualDeleteCount > 0) {
            let i = actualStart;
            const to = i + actualDeleteCount;
            while (i < to) {
                if (indexMap[i] > -1) {
                    indexMap.deletedItems.push(indexMap[i]);
                }
                i++;
            }
        }
        if (argCount > 2) {
            const itemCount = argCount - 2;
            const inserts = new Array(itemCount);
            let i = 0;
            while (i < itemCount) {
                inserts[i++] = -2;
            }
            $splice.call(indexMap, start, deleteCount, ...inserts);
        }
        else {
            $splice.apply(indexMap, args);
        }
        const deleted = $splice.apply(this, args);
        o.notify();
        return deleted;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.reverse
    reverse: function () {
        const o = observerLookup.get(this);
        if (o === void 0) {
            $reverse.call(this);
            return this;
        }
        const len = this.length;
        const middle = (len / 2) | 0;
        let lower = 0;
        while (lower !== middle) {
            const upper = len - lower - 1;
            const lowerValue = this[lower];
            const lowerIndex = o.indexMap[lower];
            const upperValue = this[upper];
            const upperIndex = o.indexMap[upper];
            this[lower] = upperValue;
            o.indexMap[lower] = upperIndex;
            this[upper] = lowerValue;
            o.indexMap[upper] = lowerIndex;
            lower++;
        }
        o.notify();
        return this;
    },
    // https://tc39.github.io/ecma262/#sec-array.prototype.sort
    // https://github.com/v8/v8/blob/master/src/js/array.js
    sort: function (compareFn) {
        const o = observerLookup.get(this);
        if (o === void 0) {
            $sort.call(this, compareFn);
            return this;
        }
        const len = this.length;
        if (len < 2) {
            return this;
        }
        quickSort(this, o.indexMap, 0, len, preSortCompare);
        let i = 0;
        while (i < len) {
            if (this[i] === void 0) {
                break;
            }
            i++;
        }
        if (compareFn === void 0 || typeof compareFn !== 'function' /* spec says throw a TypeError, should we do that too? */) {
            compareFn = sortCompare;
        }
        quickSort(this, o.indexMap, 0, i, compareFn);
        o.notify();
        return this;
    }
};
for (const method of methods) {
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__.def)(observe[method], 'observing', { value: true, writable: false, configurable: false, enumerable: false });
}
let enableArrayObservationCalled = false;
function enableArrayObservation() {
    for (const method of methods) {
        if (proto[method].observing !== true) {
            (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__.defineHiddenProp)(proto, method, observe[method]);
        }
    }
}
function disableArrayObservation() {
    for (const method of methods) {
        if (proto[method].observing === true) {
            (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__.defineHiddenProp)(proto, method, native[method]);
        }
    }
}
class ArrayObserver {
    constructor(array) {
        this.type = 18 /* Array */;
        if (!enableArrayObservationCalled) {
            enableArrayObservationCalled = true;
            enableArrayObservation();
        }
        this.indexObservers = {};
        this.collection = array;
        this.indexMap = (0,_observation_js__WEBPACK_IMPORTED_MODULE_0__.createIndexMap)(array.length);
        this.lenObs = void 0;
        observerLookup.set(array, this);
    }
    notify() {
        const indexMap = this.indexMap;
        const length = this.collection.length;
        this.indexMap = (0,_observation_js__WEBPACK_IMPORTED_MODULE_0__.createIndexMap)(length);
        this.subs.notifyCollection(indexMap, 8 /* updateTarget */);
    }
    getLengthObserver() {
        return this.lenObs ?? (this.lenObs = new _collection_length_observer_js__WEBPACK_IMPORTED_MODULE_1__.CollectionLengthObserver(this));
    }
    getIndexObserver(index) {
        var _a;
        // It's unnecessary to destroy/recreate index observer all the time,
        // so just create once, and add/remove instead
        return (_a = this.indexObservers)[index] ?? (_a[index] = new ArrayIndexObserver(this, index));
    }
}
class ArrayIndexObserver {
    constructor(owner, index) {
        this.owner = owner;
        this.index = index;
        this.value = this.getValue();
    }
    getValue() {
        return this.owner.collection[this.index];
    }
    setValue(newValue, flags) {
        if (newValue === this.getValue()) {
            return;
        }
        const arrayObserver = this.owner;
        const index = this.index;
        const indexMap = arrayObserver.indexMap;
        if (indexMap[index] > -1) {
            indexMap.deletedItems.push(indexMap[index]);
        }
        indexMap[index] = -2;
        // do not need to update current value here
        // as it will be updated inside handle collection change
        arrayObserver.collection[index] = newValue;
        arrayObserver.notify();
    }
    /**
     * From interface `ICollectionSubscriber`
     */
    handleCollectionChange(indexMap, flags) {
        const index = this.index;
        const noChange = indexMap[index] === index;
        if (noChange) {
            return;
        }
        const prevValue = this.value;
        const currValue = this.value = this.getValue();
        // hmm
        if (prevValue !== currValue) {
            this.subs.notify(currValue, prevValue, flags);
        }
    }
    subscribe(subscriber) {
        if (this.subs.add(subscriber) && this.subs.count === 1) {
            this.owner.subscribe(this);
        }
    }
    unsubscribe(subscriber) {
        if (this.subs.remove(subscriber) && this.subs.count === 0) {
            this.owner.unsubscribe(this);
        }
    }
}
(0,_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_2__.subscriberCollection)(ArrayObserver);
(0,_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_2__.subscriberCollection)(ArrayIndexObserver);
function getArrayObserver(array) {
    let observer = observerLookup.get(array);
    if (observer === void 0) {
        observer = new ArrayObserver(array);
    }
    return observer;
}
/**
 * Applies offsets to the non-negative indices in the IndexMap
 * based on added and deleted items relative to those indices.
 *
 * e.g. turn `[-2, 0, 1]` into `[-2, 1, 2]`, allowing the values at the indices to be
 * used for sorting/reordering items if needed
 */
function applyMutationsToIndices(indexMap) {
    let offset = 0;
    let j = 0;
    const len = indexMap.length;
    for (let i = 0; i < len; ++i) {
        while (indexMap.deletedItems[j] <= i - offset) {
            ++j;
            --offset;
        }
        if (indexMap[i] === -2) {
            ++offset;
        }
        else {
            indexMap[i] += offset;
        }
    }
}
/**
 * After `applyMutationsToIndices`, this function can be used to reorder items in a derived
 * array (e.g.  the items in the `views` in the repeater are derived from the `items` property)
 */
function synchronizeIndices(items, indexMap) {
    const copy = items.slice();
    const len = indexMap.length;
    let to = 0;
    let from = 0;
    while (to < len) {
        from = indexMap[to];
        if (from !== -2) {
            items[to] = copy[from];
        }
        ++to;
    }
}
//# sourceMappingURL=array-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/binding-context.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/binding-context.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BindingContext": () => /* binding */ BindingContext,
/* harmony export */   "Scope": () => /* binding */ Scope,
/* harmony export */   "OverrideContext": () => /* binding */ OverrideContext
/* harmony export */ });
const marker = Object.freeze({});
class BindingContext {
    constructor(keyOrObj, value) {
        if (keyOrObj !== void 0) {
            if (value !== void 0) {
                // if value is defined then it's just a property and a value to initialize with
                this[keyOrObj] = value;
            }
            else {
                // can either be some random object or another bindingContext to clone from
                for (const prop in keyOrObj) {
                    if (Object.prototype.hasOwnProperty.call(keyOrObj, prop)) {
                        this[prop] = keyOrObj[prop];
                    }
                }
            }
        }
    }
    static create(keyOrObj, value) {
        return new BindingContext(keyOrObj, value);
    }
    static get(scope, name, ancestor, flags, hostScope) {
        if (scope == null && hostScope == null) {
            throw new Error(`Scope is ${scope} and HostScope is ${hostScope}.`);
        }
        const hasOtherScope = hostScope !== scope && hostScope != null;
        /* eslint-disable jsdoc/check-indentation */
        /**
         * This fallback is needed to support the following case:
         * <div au-slot="s1">
         *  <let outer-host.bind="$host"></let>
         *  ${outerHost.prop}
         * </div>
         * To enable the `let` binding for 'hostScope', the property is added to `hostScope.overrideContext`. That enables us to use such let binding also inside a repeater.
         * However, as the expression `${outerHost.prop}` does not start with `$host`, it is considered that to evaluate this expression, we don't need the access to hostScope.
         * This artifact raises the need for this fallback.
         */
        /* eslint-enable jsdoc/check-indentation */
        let context = chooseContext(scope, name, ancestor);
        if (context !== null
            && ((context == null ? false : name in context)
                || !hasOtherScope)) {
            return context;
        }
        if (hasOtherScope) {
            context = chooseContext(hostScope, name, ancestor);
            if (context !== null) {
                return context;
            }
        }
        // still nothing found. return the root binding context (or null
        // if this is a parent scope traversal, to ensure we fall back to the
        // correct level)
        if (flags & 256 /* isTraversingParentScope */) {
            return marker;
        }
        return scope.bindingContext || scope.overrideContext;
    }
}
function chooseContext(scope, name, ancestor) {
    let overrideContext = scope.overrideContext;
    let currentScope = scope;
    if (ancestor > 0) {
        // jump up the required number of ancestor contexts (eg $parent.$parent requires two jumps)
        while (ancestor > 0) {
            ancestor--;
            currentScope = currentScope.parentScope;
            if (currentScope?.overrideContext == null) {
                return void 0;
            }
        }
        overrideContext = currentScope.overrideContext;
        return name in overrideContext ? overrideContext : overrideContext.bindingContext;
    }
    // traverse the context and it's ancestors, searching for a context that has the name.
    while (!currentScope?.isComponentBoundary
        && overrideContext
        && !(name in overrideContext)
        && !(overrideContext.bindingContext
            && name in overrideContext.bindingContext)) {
        currentScope = currentScope.parentScope ?? null;
        overrideContext = currentScope?.overrideContext ?? null;
    }
    if (overrideContext) {
        return name in overrideContext ? overrideContext : overrideContext.bindingContext;
    }
    return null;
}
class Scope {
    constructor(parentScope, bindingContext, overrideContext, isComponentBoundary) {
        this.parentScope = parentScope;
        this.bindingContext = bindingContext;
        this.overrideContext = overrideContext;
        this.isComponentBoundary = isComponentBoundary;
    }
    static create(bc, oc, isComponentBoundary) {
        return new Scope(null, bc, oc == null ? OverrideContext.create(bc) : oc, isComponentBoundary ?? false);
    }
    static fromOverride(oc) {
        if (oc == null) {
            throw new Error(`OverrideContext is ${oc}`);
        }
        return new Scope(null, oc.bindingContext, oc, false);
    }
    static fromParent(ps, bc) {
        if (ps == null) {
            throw new Error(`ParentScope is ${ps}`);
        }
        return new Scope(ps, bc, OverrideContext.create(bc), false);
    }
}
class OverrideContext {
    constructor(bindingContext) {
        this.bindingContext = bindingContext;
    }
    static create(bc) {
        return new OverrideContext(bc);
    }
}
//# sourceMappingURL=binding-context.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/collection-length-observer.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/collection-length-observer.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CollectionLengthObserver": () => /* binding */ CollectionLengthObserver,
/* harmony export */   "CollectionSizeObserver": () => /* binding */ CollectionSizeObserver
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _subscriber_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subscriber-collection.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/subscriber-collection.js");
/* harmony import */ var _utilities_objects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities-objects.js */ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js");



class CollectionLengthObserver {
    constructor(owner) {
        this.owner = owner;
        this.type = 18 /* Array */;
        this.value = (this.obj = owner.collection).length;
    }
    getValue() {
        return this.obj.length;
    }
    setValue(newValue, flags) {
        const currentValue = this.value;
        // if in the template, length is two-way bound directly
        // then there's a chance that the new value is invalid
        // add a guard so that we don't accidentally broadcast invalid values
        if (newValue !== currentValue && (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.isArrayIndex)(newValue)) {
            if ((flags & 4096 /* noFlush */) === 0) {
                this.obj.length = newValue;
            }
            this.value = newValue;
            this.subs.notify(newValue, currentValue, flags | 8 /* updateTarget */);
        }
    }
    handleCollectionChange(_, flags) {
        const oldValue = this.value;
        const value = this.obj.length;
        if ((this.value = value) !== oldValue) {
            this.subs.notify(value, oldValue, flags);
        }
    }
}
class CollectionSizeObserver {
    constructor(owner) {
        this.owner = owner;
        this.value = (this.obj = owner.collection).size;
        this.type = this.obj instanceof Map ? 66 /* Map */ : 34 /* Set */;
    }
    getValue() {
        return this.obj.size;
    }
    setValue() {
        throw new Error('Map/Set "size" is a readonly property');
    }
    handleCollectionChange(_, flags) {
        const oldValue = this.value;
        const value = this.obj.size;
        this.value = value;
        if (value !== oldValue) {
            this.subs.notify(value, oldValue, flags);
        }
    }
}
function implementLengthObserver(klass) {
    const proto = klass.prototype;
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_2__.ensureProto)(proto, 'subscribe', subscribe, true);
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_2__.ensureProto)(proto, 'unsubscribe', unsubscribe, true);
    (0,_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_1__.subscriberCollection)(klass);
}
function subscribe(subscriber) {
    if (this.subs.add(subscriber) && this.subs.count === 1) {
        this.owner.subscribe(this);
    }
}
function unsubscribe(subscriber) {
    if (this.subs.remove(subscriber) && this.subs.count === 0) {
        this.owner.subscribe(this);
    }
}
implementLengthObserver(CollectionLengthObserver);
implementLengthObserver(CollectionSizeObserver);
//# sourceMappingURL=collection-length-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/computed-observer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/computed-observer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComputedObserver": () => /* binding */ ComputedObserver
/* harmony export */ });
/* harmony import */ var _subscriber_collection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscriber-collection.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/subscriber-collection.js");
/* harmony import */ var _connectable_switcher_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./connectable-switcher.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/connectable-switcher.js");
/* harmony import */ var _binding_connectable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../binding/connectable.js */ "./node_modules/@aurelia/runtime/dist/esm/binding/connectable.js");
/* harmony import */ var _proxy_observation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proxy-observation.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/proxy-observation.js");
/* harmony import */ var _utilities_objects_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities-objects.js */ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js");





class ComputedObserver {
    constructor(obj, get, set, useProxy, observerLocator) {
        this.obj = obj;
        this.get = get;
        this.set = set;
        this.useProxy = useProxy;
        this.observerLocator = observerLocator;
        this.interceptor = this;
        this.type = 1 /* Observer */;
        this.value = void 0;
        // todo: maybe use a counter allow recursive call to a certain level
        /**
         * @internal
         */
        this.running = false;
        this.isDirty = false;
        _binding_connectable_js__WEBPACK_IMPORTED_MODULE_2__.connectable.assignIdTo(this);
    }
    static create(obj, key, descriptor, observerLocator, useProxy) {
        const getter = descriptor.get;
        const setter = descriptor.set;
        const observer = new ComputedObserver(obj, getter, setter, useProxy, observerLocator);
        const $get = (( /* Computed Observer */) => observer.getValue());
        $get.getObserver = () => observer;
        (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_4__.def)(obj, key, {
            enumerable: descriptor.enumerable,
            configurable: true,
            get: $get,
            set: (/* Computed Observer */ v) => {
                observer.setValue(v, 0 /* none */);
            },
        });
        return observer;
    }
    getValue() {
        if (this.subs.count === 0) {
            return this.get.call(this.obj, this);
        }
        if (this.isDirty) {
            this.compute();
            this.isDirty = false;
        }
        return this.value;
    }
    // deepscan-disable-next-line
    setValue(v, _flags) {
        if (typeof this.set === 'function') {
            if (v !== this.value) {
                // setting running true as a form of batching
                this.running = true;
                this.set.call(this.obj, v);
                this.running = false;
                this.run();
            }
        }
        else {
            throw new Error('Property is readonly');
        }
    }
    handleChange() {
        this.isDirty = true;
        if (this.subs.count > 0) {
            this.run();
        }
    }
    handleCollectionChange() {
        this.isDirty = true;
        if (this.subs.count > 0) {
            this.run();
        }
    }
    subscribe(subscriber) {
        // in theory, a collection subscriber could be added before a property subscriber
        // and it should be handled similarly in subscribeToCollection
        // though not handling for now, and wait until the merge of normal + collection subscription
        if (this.subs.add(subscriber) && this.subs.count === 1) {
            this.compute();
            this.isDirty = false;
        }
    }
    unsubscribe(subscriber) {
        if (this.subs.remove(subscriber) && this.subs.count === 0) {
            this.isDirty = true;
            this.obs.clear(true);
        }
    }
    run() {
        if (this.running) {
            return;
        }
        const oldValue = this.value;
        const newValue = this.compute();
        this.isDirty = false;
        if (!Object.is(newValue, oldValue)) {
            // should optionally queue
            this.subs.notify(newValue, oldValue, 0 /* none */);
        }
    }
    compute() {
        this.running = true;
        this.obs.version++;
        try {
            (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_1__.enterConnectable)(this);
            return this.value = (0,_proxy_observation_js__WEBPACK_IMPORTED_MODULE_3__.unwrap)(this.get.call(this.useProxy ? (0,_proxy_observation_js__WEBPACK_IMPORTED_MODULE_3__.wrap)(this.obj) : this.obj, this));
        }
        finally {
            this.obs.clear(false);
            this.running = false;
            (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_1__.exitConnectable)(this);
        }
    }
}
(0,_binding_connectable_js__WEBPACK_IMPORTED_MODULE_2__.connectable)(ComputedObserver);
(0,_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_0__.subscriberCollection)(ComputedObserver);
//# sourceMappingURL=computed-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/connectable-switcher.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/connectable-switcher.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "connecting": () => /* binding */ connecting,
/* harmony export */   "pauseConnecting": () => /* binding */ pauseConnecting,
/* harmony export */   "resumeConnecting": () => /* binding */ resumeConnecting,
/* harmony export */   "currentConnectable": () => /* binding */ currentConnectable,
/* harmony export */   "enterConnectable": () => /* binding */ enterConnectable,
/* harmony export */   "exitConnectable": () => /* binding */ exitConnectable,
/* harmony export */   "ConnectableSwitcher": () => /* binding */ ConnectableSwitcher
/* harmony export */ });
/**
 * Current subscription collector
 */
let _connectable = null;
const connectables = [];
// eslint-disable-next-line
let connecting = false;
// todo: layer based collection pause/resume?
function pauseConnecting() {
    connecting = false;
}
function resumeConnecting() {
    connecting = true;
}
function currentConnectable() {
    return _connectable;
}
function enterConnectable(connectable) {
    if (connectable == null) {
        throw new Error('connectable cannot be null/undefined');
    }
    if (_connectable == null) {
        _connectable = connectable;
        connectables[0] = _connectable;
        connecting = true;
        return;
    }
    if (_connectable === connectable) {
        throw new Error(`Already in this connectable ${connectable.id}`);
    }
    connectables.push(_connectable);
    _connectable = connectable;
    connecting = true;
}
function exitConnectable(connectable) {
    if (connectable == null) {
        throw new Error('Connectable cannot be null/undefined');
    }
    if (_connectable !== connectable) {
        throw new Error(`${connectable.id} is not currently collecting`);
    }
    connectables.pop();
    _connectable = connectables.length > 0 ? connectables[connectables.length - 1] : null;
    connecting = _connectable != null;
}
const ConnectableSwitcher = Object.freeze({
    get current() {
        return _connectable;
    },
    get connecting() {
        return connecting;
    },
    enter: enterConnectable,
    exit: exitConnectable,
    pause: pauseConnecting,
    resume: resumeConnecting,
});
//# sourceMappingURL=connectable-switcher.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/dirty-checker.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/dirty-checker.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IDirtyChecker": () => /* binding */ IDirtyChecker,
/* harmony export */   "DirtyCheckSettings": () => /* binding */ DirtyCheckSettings,
/* harmony export */   "DirtyChecker": () => /* binding */ DirtyChecker,
/* harmony export */   "DirtyCheckProperty": () => /* binding */ DirtyCheckProperty
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _subscriber_collection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subscriber-collection.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/subscriber-collection.js");


const IDirtyChecker = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IDirtyChecker', x => x.singleton(DirtyChecker));
const DirtyCheckSettings = {
    /**
     * Default: `6`
     *
     * Adjust the global dirty check frequency.
     * Measures in "timeouts per check", such that (given a default of 250 timeouts per second in modern browsers):
     * - A value of 1 will result in 250 dirty checks per second (or 1 dirty check per second for an inactive tab)
     * - A value of 25 will result in 10 dirty checks per second (or 1 dirty check per 25 seconds for an inactive tab)
     */
    timeoutsPerCheck: 25,
    /**
     * Default: `false`
     *
     * Disable dirty-checking entirely. Properties that cannot be observed without dirty checking
     * or an adapter, will simply not be observed.
     */
    disabled: false,
    /**
     * Default: `false`
     *
     * Throw an error if a property is being dirty-checked.
     */
    throw: false,
    /**
     * Resets all dirty checking settings to the framework's defaults.
     */
    resetToDefault() {
        this.timeoutsPerCheck = 6;
        this.disabled = false;
        this.throw = false;
    }
};
const queueTaskOpts = {
    persistent: true,
};
class DirtyChecker {
    constructor(platform) {
        this.platform = platform;
        this.tracked = [];
        this.task = null;
        this.elapsedFrames = 0;
        this.check = () => {
            if (DirtyCheckSettings.disabled) {
                return;
            }
            if (++this.elapsedFrames < DirtyCheckSettings.timeoutsPerCheck) {
                return;
            }
            this.elapsedFrames = 0;
            const tracked = this.tracked;
            const len = tracked.length;
            let current;
            let i = 0;
            for (; i < len; ++i) {
                current = tracked[i];
                if (current.isDirty()) {
                    current.flush(0 /* none */);
                }
            }
        };
    }
    createProperty(obj, propertyName) {
        if (DirtyCheckSettings.throw) {
            throw new Error(`Property '${propertyName}' is being dirty-checked.`);
        }
        return new DirtyCheckProperty(this, obj, propertyName);
    }
    addProperty(property) {
        this.tracked.push(property);
        if (this.tracked.length === 1) {
            this.task = this.platform.macroTaskQueue.queueTask(this.check, queueTaskOpts);
        }
    }
    removeProperty(property) {
        this.tracked.splice(this.tracked.indexOf(property), 1);
        if (this.tracked.length === 0) {
            this.task.cancel();
            this.task = null;
        }
    }
}
/**
 * @internal
 */
DirtyChecker.inject = [_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IPlatform];
class DirtyCheckProperty {
    constructor(dirtyChecker, obj, propertyKey) {
        this.dirtyChecker = dirtyChecker;
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.type = 0 /* None */;
    }
    getValue() {
        return this.obj[this.propertyKey];
    }
    setValue(v, f) {
        // todo: this should be allowed, probably
        // but the construction of dirty checker should throw instead
        throw new Error(`Trying to set value for property ${this.propertyKey} in dirty checker`);
    }
    isDirty() {
        return this.oldValue !== this.obj[this.propertyKey];
    }
    flush(flags) {
        const oldValue = this.oldValue;
        const newValue = this.getValue();
        this.subs.notify(newValue, oldValue, flags | 8 /* updateTarget */);
        this.oldValue = newValue;
    }
    subscribe(subscriber) {
        if (this.subs.add(subscriber) && this.subs.count === 1) {
            this.oldValue = this.obj[this.propertyKey];
            this.dirtyChecker.addProperty(this);
        }
    }
    unsubscribe(subscriber) {
        if (this.subs.remove(subscriber) && this.subs.count === 0) {
            this.dirtyChecker.removeProperty(this);
        }
    }
}
(0,_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_1__.subscriberCollection)(DirtyCheckProperty);
//# sourceMappingURL=dirty-checker.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/map-observer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/map-observer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "enableMapObservation": () => /* binding */ enableMapObservation,
/* harmony export */   "disableMapObservation": () => /* binding */ disableMapObservation,
/* harmony export */   "MapObserver": () => /* binding */ MapObserver,
/* harmony export */   "getMapObserver": () => /* binding */ getMapObserver
/* harmony export */ });
/* harmony import */ var _observation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observation.js */ "./node_modules/@aurelia/runtime/dist/esm/observation.js");
/* harmony import */ var _collection_length_observer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./collection-length-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/collection-length-observer.js");
/* harmony import */ var _subscriber_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./subscriber-collection.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/subscriber-collection.js");
/* harmony import */ var _utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities-objects.js */ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js");




const observerLookup = new WeakMap();
const proto = Map.prototype;
const $set = proto.set;
const $clear = proto.clear;
const $delete = proto.delete;
const native = { set: $set, clear: $clear, delete: $delete };
const methods = ['set', 'clear', 'delete'];
// note: we can't really do much with Map due to the internal data structure not being accessible so we're just using the native calls
// fortunately, map/delete/clear are easy to reconstruct for the indexMap
const observe = {
    // https://tc39.github.io/ecma262/#sec-map.prototype.map
    set: function (key, value) {
        const o = observerLookup.get(this);
        if (o === undefined) {
            $set.call(this, key, value);
            return this;
        }
        const oldValue = this.get(key);
        const oldSize = this.size;
        $set.call(this, key, value);
        const newSize = this.size;
        if (newSize === oldSize) {
            let i = 0;
            for (const entry of this.entries()) {
                if (entry[0] === key) {
                    if (entry[1] !== oldValue) {
                        o.indexMap.deletedItems.push(o.indexMap[i]);
                        o.indexMap[i] = -2;
                        o.notify();
                    }
                    return this;
                }
                i++;
            }
            return this;
        }
        o.indexMap[oldSize] = -2;
        o.notify();
        return this;
    },
    // https://tc39.github.io/ecma262/#sec-map.prototype.clear
    clear: function () {
        const o = observerLookup.get(this);
        if (o === undefined) {
            return $clear.call(this);
        }
        const size = this.size;
        if (size > 0) {
            const indexMap = o.indexMap;
            let i = 0;
            // deepscan-disable-next-line
            for (const _ of this.keys()) {
                if (indexMap[i] > -1) {
                    indexMap.deletedItems.push(indexMap[i]);
                }
                i++;
            }
            $clear.call(this);
            indexMap.length = 0;
            o.notify();
        }
        return undefined;
    },
    // https://tc39.github.io/ecma262/#sec-map.prototype.delete
    delete: function (value) {
        const o = observerLookup.get(this);
        if (o === undefined) {
            return $delete.call(this, value);
        }
        const size = this.size;
        if (size === 0) {
            return false;
        }
        let i = 0;
        const indexMap = o.indexMap;
        for (const entry of this.keys()) {
            if (entry === value) {
                if (indexMap[i] > -1) {
                    indexMap.deletedItems.push(indexMap[i]);
                }
                indexMap.splice(i, 1);
                const deleteResult = $delete.call(this, value);
                if (deleteResult === true) {
                    o.notify();
                }
                return deleteResult;
            }
            ++i;
        }
        return false;
    }
};
const descriptorProps = {
    writable: true,
    enumerable: false,
    configurable: true
};
for (const method of methods) {
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__.def)(observe[method], 'observing', { value: true, writable: false, configurable: false, enumerable: false });
}
let enableMapObservationCalled = false;
function enableMapObservation() {
    for (const method of methods) {
        if (proto[method].observing !== true) {
            (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__.def)(proto, method, { ...descriptorProps, value: observe[method] });
        }
    }
}
function disableMapObservation() {
    for (const method of methods) {
        if (proto[method].observing === true) {
            (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__.def)(proto, method, { ...descriptorProps, value: native[method] });
        }
    }
}
class MapObserver {
    constructor(map) {
        this.type = 66 /* Map */;
        if (!enableMapObservationCalled) {
            enableMapObservationCalled = true;
            enableMapObservation();
        }
        this.collection = map;
        this.indexMap = (0,_observation_js__WEBPACK_IMPORTED_MODULE_0__.createIndexMap)(map.size);
        this.lenObs = void 0;
        observerLookup.set(map, this);
    }
    notify() {
        const indexMap = this.indexMap;
        const size = this.collection.size;
        this.indexMap = (0,_observation_js__WEBPACK_IMPORTED_MODULE_0__.createIndexMap)(size);
        this.subs.notifyCollection(indexMap, 8 /* updateTarget */);
    }
    getLengthObserver() {
        return this.lenObs ?? (this.lenObs = new _collection_length_observer_js__WEBPACK_IMPORTED_MODULE_1__.CollectionSizeObserver(this));
    }
}
(0,_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_2__.subscriberCollection)(MapObserver);
function getMapObserver(map) {
    let observer = observerLookup.get(map);
    if (observer === void 0) {
        observer = new MapObserver(map);
    }
    return observer;
}
//# sourceMappingURL=map-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/observable.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/observable.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "observable": () => /* binding */ observable
/* harmony export */ });
/* harmony import */ var _setter_observer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setter-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/setter-observer.js");
/* harmony import */ var _utilities_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities-objects.js */ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js");


function getObserversLookup(obj) {
    if (obj.$observers === void 0) {
        (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_1__.def)(obj, '$observers', { value: {} });
        // todo: define in a weakmap
    }
    return obj.$observers;
}
const noValue = {};
// impl, wont be seen
function observable(targetOrConfig, key, descriptor) {
    // either this check, or arguments.length === 3
    // or could be both, so can throw against user error for better DX
    if (key == null) {
        // for:
        //    @observable('prop')
        //    class {}
        //
        //    @observable({ name: 'prop', callback: ... })
        //    class {}
        //
        //    class {
        //      @observable() prop
        //      @observable({ callback: ... }) prop2
        //    }
        return ((t, k, d) => deco(t, k, d, targetOrConfig));
    }
    // for:
    //    class {
    //      @observable prop
    //    }
    return deco(targetOrConfig, key, descriptor);
    function deco(target, key, descriptor, config) {
        // class decorator?
        const isClassDecorator = key === void 0;
        config = typeof config !== 'object'
            ? { name: config }
            : (config || {});
        if (isClassDecorator) {
            key = config.name;
        }
        if (key == null || key === '') {
            throw new Error('Invalid usage, cannot determine property name for @observable');
        }
        // determine callback name based on config or convention.
        const callback = config.callback || `${String(key)}Changed`;
        let initialValue = noValue;
        if (descriptor) {
            // we're adding a getter and setter which means the property descriptor
            // cannot have a "value" or "writable" attribute
            delete descriptor.value;
            delete descriptor.writable;
            initialValue = descriptor.initializer?.();
            delete descriptor.initializer;
        }
        else {
            descriptor = { configurable: true };
        }
        // make the accessor enumerable by default, as fields are enumerable
        if (!('enumerable' in descriptor)) {
            descriptor.enumerable = true;
        }
        // todo(bigopon/fred): discuss string api for converter
        const $set = config.set;
        descriptor.get = function g( /* @observable */) {
            return getNotifier(this, key, callback, initialValue, $set).getValue();
        };
        descriptor.set = function s(newValue) {
            getNotifier(this, key, callback, initialValue, $set).setValue(newValue, 0 /* none */);
        };
        descriptor.get.getObserver = function gO(/* @observable */ obj) {
            return getNotifier(obj, key, callback, initialValue, $set);
        };
        if (isClassDecorator) {
            (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_1__.def)(target.prototype, key, descriptor);
        }
        else {
            return descriptor;
        }
    }
}
function getNotifier(obj, key, callbackKey, initialValue, set) {
    const lookup = getObserversLookup(obj);
    let notifier = lookup[key];
    if (notifier == null) {
        notifier = new _setter_observer_js__WEBPACK_IMPORTED_MODULE_0__.SetterNotifier(obj, callbackKey, set, initialValue === noValue ? void 0 : initialValue);
        lookup[key] = notifier;
    }
    return notifier;
}
/*
          | typescript       | babel
----------|------------------|-------------------------
property  | config           | config
w/parens  | target, key      | target, key, descriptor
----------|------------------|-------------------------
property  | target, key      | target, key, descriptor
no parens | n/a              | n/a
----------|------------------|-------------------------
class     | config           | config
          | target           | target
*/
//# sourceMappingURL=observable.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/observer-locator.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/observer-locator.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "propertyAccessor": () => /* binding */ propertyAccessor,
/* harmony export */   "IObserverLocator": () => /* binding */ IObserverLocator,
/* harmony export */   "INodeObserverLocator": () => /* binding */ INodeObserverLocator,
/* harmony export */   "ObserverLocator": () => /* binding */ ObserverLocator,
/* harmony export */   "getCollectionObserver": () => /* binding */ getCollectionObserver
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _array_observer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/array-observer.js");
/* harmony import */ var _computed_observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./computed-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/computed-observer.js");
/* harmony import */ var _dirty_checker_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dirty-checker.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/dirty-checker.js");
/* harmony import */ var _map_observer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./map-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/map-observer.js");
/* harmony import */ var _primitive_observer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./primitive-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/primitive-observer.js");
/* harmony import */ var _property_accessor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./property-accessor.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/property-accessor.js");
/* harmony import */ var _set_observer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./set-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/set-observer.js");
/* harmony import */ var _setter_observer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./setter-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/setter-observer.js");
/* harmony import */ var _utilities_objects_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities-objects.js */ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js");










const propertyAccessor = new _property_accessor_js__WEBPACK_IMPORTED_MODULE_6__.PropertyAccessor();
const IObserverLocator = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('IObserverLocator', x => x.singleton(ObserverLocator));
const INodeObserverLocator = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('INodeObserverLocator', x => x.cachedCallback(handler => {
    handler.getAll(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.ILogger).forEach(logger => {
        logger.error('Using default INodeObserverLocator implementation. Will not be able to observe nodes (HTML etc...).');
    });
    return new DefaultNodeObserverLocator();
}));
class DefaultNodeObserverLocator {
    handles() {
        return false;
    }
    getObserver() {
        return propertyAccessor;
    }
    getAccessor() {
        return propertyAccessor;
    }
}
class ObserverLocator {
    constructor(dirtyChecker, nodeObserverLocator) {
        this.dirtyChecker = dirtyChecker;
        this.nodeObserverLocator = nodeObserverLocator;
        this.adapters = [];
    }
    addAdapter(adapter) {
        this.adapters.push(adapter);
    }
    getObserver(obj, key) {
        return obj.$observers?.[key]
            ?? this.cache(obj, key, this.createObserver(obj, key));
    }
    getAccessor(obj, key) {
        const cached = obj.$observers?.[key];
        if (cached !== void 0) {
            return cached;
        }
        if (this.nodeObserverLocator.handles(obj, key, this)) {
            return this.nodeObserverLocator.getAccessor(obj, key, this);
        }
        return propertyAccessor;
    }
    getArrayObserver(observedArray) {
        return (0,_array_observer_js__WEBPACK_IMPORTED_MODULE_1__.getArrayObserver)(observedArray);
    }
    getMapObserver(observedMap) {
        return (0,_map_observer_js__WEBPACK_IMPORTED_MODULE_4__.getMapObserver)(observedMap);
    }
    getSetObserver(observedSet) {
        return (0,_set_observer_js__WEBPACK_IMPORTED_MODULE_7__.getSetObserver)(observedSet);
    }
    createObserver(obj, key) {
        if (!(obj instanceof Object)) {
            return new _primitive_observer_js__WEBPACK_IMPORTED_MODULE_5__.PrimitiveObserver(obj, key);
        }
        if (this.nodeObserverLocator.handles(obj, key, this)) {
            return this.nodeObserverLocator.getObserver(obj, key, this);
        }
        switch (key) {
            case 'length':
                if (obj instanceof Array) {
                    return (0,_array_observer_js__WEBPACK_IMPORTED_MODULE_1__.getArrayObserver)(obj).getLengthObserver();
                }
                break;
            case 'size':
                if (obj instanceof Map) {
                    return (0,_map_observer_js__WEBPACK_IMPORTED_MODULE_4__.getMapObserver)(obj).getLengthObserver();
                }
                else if (obj instanceof Set) {
                    return (0,_set_observer_js__WEBPACK_IMPORTED_MODULE_7__.getSetObserver)(obj).getLengthObserver();
                }
                break;
            default:
                if (obj instanceof Array && (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.isArrayIndex)(key)) {
                    return (0,_array_observer_js__WEBPACK_IMPORTED_MODULE_1__.getArrayObserver)(obj).getIndexObserver(Number(key));
                }
                break;
        }
        let pd = Object.getOwnPropertyDescriptor(obj, key);
        // Only instance properties will yield a descriptor here, otherwise walk up the proto chain
        if (pd === void 0) {
            let proto = Object.getPrototypeOf(obj);
            while (proto !== null) {
                pd = Object.getOwnPropertyDescriptor(proto, key);
                if (pd === void 0) {
                    proto = Object.getPrototypeOf(proto);
                }
                else {
                    break;
                }
            }
        }
        // If the descriptor does not have a 'value' prop, it must have a getter and/or setter
        if (pd !== void 0 && !Object.prototype.hasOwnProperty.call(pd, 'value')) {
            let obs = this.getAdapterObserver(obj, key, pd);
            if (obs == null) {
                obs = (pd.get?.getObserver ?? pd.set?.getObserver)?.(obj, this);
            }
            return obs == null
                ? pd.configurable
                    ? _computed_observer_js__WEBPACK_IMPORTED_MODULE_2__.ComputedObserver.create(obj, key, pd, this, /* AOT: not true for IE11 */ true)
                    : this.dirtyChecker.createProperty(obj, key)
                : obs;
        }
        // Ordinary get/set observation (the common use case)
        // TODO: think about how to handle a data property that does not sit on the instance (should we do anything different?)
        return new _setter_observer_js__WEBPACK_IMPORTED_MODULE_8__.SetterObserver(obj, key);
    }
    getAdapterObserver(obj, propertyName, pd) {
        if (this.adapters.length > 0) {
            for (const adapter of this.adapters) {
                const observer = adapter.getObserver(obj, propertyName, pd, this);
                if (observer != null) {
                    return observer;
                }
            }
        }
        return null;
    }
    cache(obj, key, observer) {
        if (observer.doNotCache === true) {
            return observer;
        }
        if (obj.$observers === void 0) {
            (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_9__.def)(obj, '$observers', { value: { [key]: observer } });
            return observer;
        }
        return obj.$observers[key] = observer;
    }
}
ObserverLocator.inject = [_dirty_checker_js__WEBPACK_IMPORTED_MODULE_3__.IDirtyChecker, INodeObserverLocator];
function getCollectionObserver(collection) {
    let obs;
    if (collection instanceof Array) {
        obs = (0,_array_observer_js__WEBPACK_IMPORTED_MODULE_1__.getArrayObserver)(collection);
    }
    else if (collection instanceof Map) {
        obs = (0,_map_observer_js__WEBPACK_IMPORTED_MODULE_4__.getMapObserver)(collection);
    }
    else if (collection instanceof Set) {
        obs = (0,_set_observer_js__WEBPACK_IMPORTED_MODULE_7__.getSetObserver)(collection);
    }
    return obs;
}
//# sourceMappingURL=observer-locator.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/primitive-observer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/primitive-observer.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PrimitiveObserver": () => /* binding */ PrimitiveObserver
/* harmony export */ });
class PrimitiveObserver {
    constructor(obj, propertyKey) {
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.type = 0 /* None */;
    }
    get doNotCache() { return true; }
    getValue() {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-explicit-any
        return this.obj[this.propertyKey];
    }
    setValue() { }
    subscribe() { }
    unsubscribe() { }
}
//# sourceMappingURL=primitive-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/property-accessor.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/property-accessor.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PropertyAccessor": () => /* binding */ PropertyAccessor
/* harmony export */ });
class PropertyAccessor {
    constructor() {
        // the only thing can be guaranteed is it's an object
        // even if this property accessor is used to access an element
        this.type = 0 /* None */;
    }
    getValue(obj, key) {
        return obj[key];
    }
    setValue(value, flags, obj, key) {
        obj[key] = value;
    }
}
//# sourceMappingURL=property-accessor.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/proxy-observation.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/proxy-observation.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rawKey": () => /* binding */ rawKey,
/* harmony export */   "wrap": () => /* binding */ wrap,
/* harmony export */   "getProxy": () => /* binding */ getProxy,
/* harmony export */   "getRaw": () => /* binding */ getRaw,
/* harmony export */   "unwrap": () => /* binding */ unwrap,
/* harmony export */   "ProxyObservable": () => /* binding */ ProxyObservable
/* harmony export */ });
/* harmony import */ var _connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./connectable-switcher.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/connectable-switcher.js");

const R$get = Reflect.get;
const toStringTag = Object.prototype.toString;
const proxyMap = new WeakMap();
function canWrap(obj) {
    switch (toStringTag.call(obj)) {
        case '[object Object]':
        case '[object Array]':
        case '[object Map]':
        case '[object Set]':
            // it's unlikely that methods on the following 2 objects need to be observed for changes
            // so while they are valid/ we don't wrap them either
            // case '[object Math]':
            // case '[object Reflect]':
            return true;
        default:
            return false;
    }
}
const rawKey = '__raw__';
function wrap(v) {
    return canWrap(v) ? getProxy(v) : v;
}
function getProxy(obj) {
    // deepscan-disable-next-line
    return proxyMap.get(obj) ?? createProxy(obj);
}
function getRaw(obj) {
    // todo: get in a weakmap if null/undef
    return obj[rawKey] ?? obj;
}
function unwrap(v) {
    // eslint-disable-next-line
    return canWrap(v) && v[rawKey] || v;
}
function doNotCollect(key) {
    return key === 'constructor'
        || key === '__proto__'
        // probably should revert to v1 naming style for consistency with builtin?
        // __o__ is shorters & less chance of conflict with other libs as well
        || key === '$observers'
        || key === Symbol.toPrimitive
        || key === Symbol.toStringTag;
}
function createProxy(obj) {
    const handler = obj instanceof Array
        ? arrayHandler
        : obj instanceof Map || obj instanceof Set
            ? collectionHandler
            : objectHandler;
    const proxiedObj = new Proxy(obj, handler);
    proxyMap.set(obj, proxiedObj);
    return proxiedObj;
}
const objectHandler = {
    get(target, key, receiver) {
        // maybe use symbol?
        if (key === rawKey) {
            return target;
        }
        const connectable = (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)();
        if (!_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.connecting || doNotCollect(key) || connectable == null) {
            return R$get(target, key, receiver);
        }
        // todo: static
        connectable.observeProperty(target, key);
        return wrap(R$get(target, key, receiver));
    },
};
const arrayHandler = {
    get(target, key, receiver) {
        // maybe use symbol?
        if (key === rawKey) {
            return target;
        }
        const connectable = (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)();
        if (!_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.connecting || doNotCollect(key) || connectable == null) {
            return R$get(target, key, receiver);
        }
        switch (key) {
            case 'length':
                connectable.observeProperty(target, 'length');
                return target.length;
            case 'map':
                return wrappedArrayMap;
            case 'includes':
                return wrappedArrayIncludes;
            case 'indexOf':
                return wrappedArrayIndexOf;
            case 'lastIndexOf':
                return wrappedArrayLastIndexOf;
            case 'every':
                return wrappedArrayEvery;
            case 'filter':
                return wrappedArrayFilter;
            case 'findIndex':
                return wrappedArrayFindIndex;
            case 'flat':
                return wrappedArrayFlat;
            case 'flatMap':
                return wrappedArrayFlatMap;
            case 'join':
                return wrappedArrayJoin;
            case 'push':
                return wrappedArrayPush;
            case 'pop':
                return wrappedArrayPop;
            case 'reduce':
                return wrappedReduce;
            case 'reduceRight':
                return wrappedReduceRight;
            case 'reverse':
                return wrappedArrayReverse;
            case 'shift':
                return wrappedArrayShift;
            case 'unshift':
                return wrappedArrayUnshift;
            case 'slice':
                return wrappedArraySlice;
            case 'splice':
                return wrappedArraySplice;
            case 'some':
                return wrappedArraySome;
            case 'sort':
                return wrappedArraySort;
            case 'keys':
                return wrappedKeys;
            case 'values':
            case Symbol.iterator:
                return wrappedValues;
            case 'entries':
                return wrappedEntries;
        }
        connectable.observeProperty(target, key);
        return wrap(R$get(target, key, receiver));
    },
    // for (let i in array) ...
    ownKeys(target) {
        (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeProperty(target, 'length');
        return Reflect.ownKeys(target);
    },
};
function wrappedArrayMap(cb, thisArg) {
    const raw = getRaw(this);
    const res = raw.map((v, i) => 
    // do we wrap `thisArg`?
    unwrap(cb.call(thisArg, wrap(v), i, this)));
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return wrap(res);
}
function wrappedArrayEvery(cb, thisArg) {
    const raw = getRaw(this);
    const res = raw.every((v, i) => cb.call(thisArg, wrap(v), i, this));
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return res;
}
function wrappedArrayFilter(cb, thisArg) {
    const raw = getRaw(this);
    const res = raw.filter((v, i) => 
    // do we wrap `thisArg`?
    unwrap(cb.call(thisArg, wrap(v), i, this)));
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return wrap(res);
}
function wrappedArrayIncludes(v) {
    const raw = getRaw(this);
    const res = raw.includes(unwrap(v));
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return res;
}
function wrappedArrayIndexOf(v) {
    const raw = getRaw(this);
    const res = raw.indexOf(unwrap(v));
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return res;
}
function wrappedArrayLastIndexOf(v) {
    const raw = getRaw(this);
    const res = raw.lastIndexOf(unwrap(v));
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return res;
}
function wrappedArrayFindIndex(cb, thisArg) {
    const raw = getRaw(this);
    const res = raw.findIndex((v, i) => unwrap(cb.call(thisArg, wrap(v), i, this)));
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return res;
}
function wrappedArrayFlat() {
    const raw = getRaw(this);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return wrap(raw.flat());
}
function wrappedArrayFlatMap(cb, thisArg) {
    const raw = getRaw(this);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return getProxy(raw.flatMap((v, i) => wrap(cb.call(thisArg, wrap(v), i, this))));
}
function wrappedArrayJoin(separator) {
    const raw = getRaw(this);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return raw.join(separator);
}
function wrappedArrayPop() {
    return wrap(getRaw(this).pop());
}
function wrappedArrayPush(...args) {
    return getRaw(this).push(...args);
}
function wrappedArrayShift() {
    return wrap(getRaw(this).shift());
}
function wrappedArrayUnshift(...args) {
    return getRaw(this).unshift(...args);
}
function wrappedArraySplice(...args) {
    return wrap(getRaw(this).splice(...args));
}
function wrappedArrayReverse(...args) {
    const raw = getRaw(this);
    const res = raw.reverse();
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return wrap(res);
}
function wrappedArraySome(cb, thisArg) {
    const raw = getRaw(this);
    const res = raw.some((v, i) => unwrap(cb.call(thisArg, wrap(v), i, this)));
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return res;
}
function wrappedArraySort(cb) {
    const raw = getRaw(this);
    const res = raw.sort(cb);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return wrap(res);
}
function wrappedArraySlice(start, end) {
    const raw = getRaw(this);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return getProxy(raw.slice(start, end));
}
function wrappedReduce(cb, initValue) {
    const raw = getRaw(this);
    const res = raw.reduce((curr, v, i) => cb(curr, wrap(v), i, this), initValue);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return wrap(res);
}
function wrappedReduceRight(cb, initValue) {
    const raw = getRaw(this);
    const res = raw.reduceRight((curr, v, i) => cb(curr, wrap(v), i, this), initValue);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return wrap(res);
}
// the below logic takes inspiration from Vue, Mobx
// much thanks to them for working out this
const collectionHandler = {
    get(target, key, receiver) {
        // maybe use symbol?
        if (key === rawKey) {
            return target;
        }
        const connectable = (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)();
        if (!_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.connecting || doNotCollect(key) || connectable == null) {
            return R$get(target, key, receiver);
        }
        switch (key) {
            case 'size':
                connectable.observeProperty(target, 'size');
                return target.size;
            case 'clear':
                return wrappedClear;
            case 'delete':
                return wrappedDelete;
            case 'forEach':
                return wrappedForEach;
            case 'add':
                if (target instanceof Set) {
                    return wrappedAdd;
                }
                break;
            case 'get':
                if (target instanceof Map) {
                    return wrappedGet;
                }
                break;
            case 'set':
                if (target instanceof Map) {
                    return wrappedSet;
                }
                break;
            case 'has':
                return wrappedHas;
            case 'keys':
                return wrappedKeys;
            case 'values':
                return wrappedValues;
            case 'entries':
                return wrappedEntries;
            case Symbol.iterator:
                return target instanceof Map ? wrappedEntries : wrappedValues;
        }
        return wrap(R$get(target, key, receiver));
    },
};
function wrappedForEach(cb, thisArg) {
    const raw = getRaw(this);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return raw.forEach((v, key) => {
        cb.call(/* should wrap or not?? */ thisArg, wrap(v), wrap(key), this);
    });
}
function wrappedHas(v) {
    const raw = getRaw(this);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return raw.has(unwrap(v));
}
function wrappedGet(k) {
    const raw = getRaw(this);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    return wrap(raw.get(unwrap(k)));
}
function wrappedSet(k, v) {
    return wrap(getRaw(this).set(unwrap(k), unwrap(v)));
}
function wrappedAdd(v) {
    return wrap(getRaw(this).add(unwrap(v)));
}
function wrappedClear() {
    return wrap(getRaw(this).clear());
}
function wrappedDelete(k) {
    return wrap(getRaw(this).delete(unwrap(k)));
}
function wrappedKeys() {
    const raw = getRaw(this);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    const iterator = raw.keys();
    return {
        next() {
            const next = iterator.next();
            const value = next.value;
            const done = next.done;
            return done
                ? { value: void 0, done }
                : { value: wrap(value), done };
        },
        [Symbol.iterator]() {
            return this;
        },
    };
}
function wrappedValues() {
    const raw = getRaw(this);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    const iterator = raw.values();
    return {
        next() {
            const next = iterator.next();
            const value = next.value;
            const done = next.done;
            return done
                ? { value: void 0, done }
                : { value: wrap(value), done };
        },
        [Symbol.iterator]() {
            return this;
        },
    };
}
function wrappedEntries() {
    const raw = getRaw(this);
    (0,_connectable_switcher_js__WEBPACK_IMPORTED_MODULE_0__.currentConnectable)()?.observeCollection(raw);
    const iterator = raw.entries();
    // return a wrapped iterator which returns observed versions of the
    // values emitted from the real iterator
    return {
        next() {
            const next = iterator.next();
            const value = next.value;
            const done = next.done;
            return done
                ? { value: void 0, done }
                : { value: [wrap(value[0]), wrap(value[1])], done };
        },
        [Symbol.iterator]() {
            return this;
        },
    };
}
const ProxyObservable = Object.freeze({
    getProxy,
    getRaw,
    wrap,
    unwrap,
    rawKey,
});
//# sourceMappingURL=proxy-observation.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/set-observer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/set-observer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "enableSetObservation": () => /* binding */ enableSetObservation,
/* harmony export */   "disableSetObservation": () => /* binding */ disableSetObservation,
/* harmony export */   "SetObserver": () => /* binding */ SetObserver,
/* harmony export */   "getSetObserver": () => /* binding */ getSetObserver
/* harmony export */ });
/* harmony import */ var _observation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observation.js */ "./node_modules/@aurelia/runtime/dist/esm/observation.js");
/* harmony import */ var _collection_length_observer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./collection-length-observer.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/collection-length-observer.js");
/* harmony import */ var _subscriber_collection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./subscriber-collection.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/subscriber-collection.js");
/* harmony import */ var _utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities-objects.js */ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js");




const observerLookup = new WeakMap();
const proto = Set.prototype;
const $add = proto.add;
const $clear = proto.clear;
const $delete = proto.delete;
const native = { add: $add, clear: $clear, delete: $delete };
const methods = ['add', 'clear', 'delete'];
// note: we can't really do much with Set due to the internal data structure not being accessible so we're just using the native calls
// fortunately, add/delete/clear are easy to reconstruct for the indexMap
const observe = {
    // https://tc39.github.io/ecma262/#sec-set.prototype.add
    add: function (value) {
        const o = observerLookup.get(this);
        if (o === undefined) {
            $add.call(this, value);
            return this;
        }
        const oldSize = this.size;
        $add.call(this, value);
        const newSize = this.size;
        if (newSize === oldSize) {
            return this;
        }
        o.indexMap[oldSize] = -2;
        o.notify();
        return this;
    },
    // https://tc39.github.io/ecma262/#sec-set.prototype.clear
    clear: function () {
        const o = observerLookup.get(this);
        if (o === undefined) {
            return $clear.call(this);
        }
        const size = this.size;
        if (size > 0) {
            const indexMap = o.indexMap;
            let i = 0;
            // deepscan-disable-next-line
            for (const _ of this.keys()) {
                if (indexMap[i] > -1) {
                    indexMap.deletedItems.push(indexMap[i]);
                }
                i++;
            }
            $clear.call(this);
            indexMap.length = 0;
            o.notify();
        }
        return undefined;
    },
    // https://tc39.github.io/ecma262/#sec-set.prototype.delete
    delete: function (value) {
        const o = observerLookup.get(this);
        if (o === undefined) {
            return $delete.call(this, value);
        }
        const size = this.size;
        if (size === 0) {
            return false;
        }
        let i = 0;
        const indexMap = o.indexMap;
        for (const entry of this.keys()) {
            if (entry === value) {
                if (indexMap[i] > -1) {
                    indexMap.deletedItems.push(indexMap[i]);
                }
                indexMap.splice(i, 1);
                const deleteResult = $delete.call(this, value);
                if (deleteResult === true) {
                    o.notify();
                }
                return deleteResult;
            }
            i++;
        }
        return false;
    }
};
const descriptorProps = {
    writable: true,
    enumerable: false,
    configurable: true
};
for (const method of methods) {
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__.def)(observe[method], 'observing', { value: true, writable: false, configurable: false, enumerable: false });
}
let enableSetObservationCalled = false;
function enableSetObservation() {
    for (const method of methods) {
        if (proto[method].observing !== true) {
            (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__.def)(proto, method, { ...descriptorProps, value: observe[method] });
        }
    }
}
function disableSetObservation() {
    for (const method of methods) {
        if (proto[method].observing === true) {
            (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_3__.def)(proto, method, { ...descriptorProps, value: native[method] });
        }
    }
}
class SetObserver {
    constructor(observedSet) {
        this.type = 34 /* Set */;
        if (!enableSetObservationCalled) {
            enableSetObservationCalled = true;
            enableSetObservation();
        }
        this.collection = observedSet;
        this.indexMap = (0,_observation_js__WEBPACK_IMPORTED_MODULE_0__.createIndexMap)(observedSet.size);
        this.lenObs = void 0;
        observerLookup.set(observedSet, this);
    }
    notify() {
        const indexMap = this.indexMap;
        const size = this.collection.size;
        this.indexMap = (0,_observation_js__WEBPACK_IMPORTED_MODULE_0__.createIndexMap)(size);
        this.subs.notifyCollection(indexMap, 8 /* updateTarget */);
    }
    getLengthObserver() {
        return this.lenObs ?? (this.lenObs = new _collection_length_observer_js__WEBPACK_IMPORTED_MODULE_1__.CollectionSizeObserver(this));
    }
}
(0,_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_2__.subscriberCollection)(SetObserver);
function getSetObserver(observedSet) {
    let observer = observerLookup.get(observedSet);
    if (observer === void 0) {
        observer = new SetObserver(observedSet);
    }
    return observer;
}
//# sourceMappingURL=set-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/setter-observer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/setter-observer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetterObserver": () => /* binding */ SetterObserver,
/* harmony export */   "SetterNotifier": () => /* binding */ SetterNotifier
/* harmony export */ });
/* harmony import */ var _subscriber_collection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscriber-collection.js */ "./node_modules/@aurelia/runtime/dist/esm/observation/subscriber-collection.js");
/* harmony import */ var _utilities_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities-objects.js */ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js");


/**
 * Observer for the mutation of object property value employing getter-setter strategy.
 * This is used for observing object properties that has no decorator.
 */
class SetterObserver {
    constructor(obj, propertyKey) {
        this.obj = obj;
        this.propertyKey = propertyKey;
        this.currentValue = void 0;
        this.oldValue = void 0;
        this.inBatch = false;
        this.observing = false;
        // todo(bigopon): tweak the flag based on typeof obj (array/set/map/iterator/proxy etc...)
        this.type = 1 /* Observer */;
    }
    getValue() {
        return this.currentValue;
    }
    setValue(newValue, flags) {
        if (this.observing) {
            const currentValue = this.currentValue;
            this.currentValue = newValue;
            this.subs.notify(newValue, currentValue, flags);
        }
        else {
            // If subscribe() has been called, the target property descriptor is replaced by these getter/setter methods,
            // so calling obj[propertyKey] will actually return this.currentValue.
            // However, if subscribe() was not yet called (indicated by !this.observing), the target descriptor
            // is unmodified and we need to explicitly set the property value.
            // This will happen in one-time, to-view and two-way bindings during $bind, meaning that the $bind will not actually update the target value.
            // This wasn't visible in vCurrent due to connect-queue always doing a delayed update, so in many cases it didn't matter whether $bind updated the target or not.
            this.obj[this.propertyKey] = newValue;
        }
    }
    subscribe(subscriber) {
        if (this.observing === false) {
            this.start();
        }
        this.subs.add(subscriber);
    }
    start() {
        if (this.observing === false) {
            this.observing = true;
            this.currentValue = this.obj[this.propertyKey];
            (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_1__.def)(this.obj, this.propertyKey, {
                enumerable: true,
                configurable: true,
                get: ( /* Setter Observer */) => this.getValue(),
                set: (/* Setter Observer */ value) => {
                    this.setValue(value, 0 /* none */);
                },
            });
        }
        return this;
    }
    stop() {
        if (this.observing) {
            (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_1__.def)(this.obj, this.propertyKey, {
                enumerable: true,
                configurable: true,
                writable: true,
                value: this.currentValue,
            });
            this.observing = false;
            // todo(bigopon/fred): add .removeAllSubscribers()
        }
        return this;
    }
}
class SetterNotifier {
    constructor(obj, callbackKey, set, initialValue) {
        this.type = 1 /* Observer */;
        /**
         * @internal
         */
        this.v = void 0;
        this.obj = obj;
        this.s = set;
        const callback = obj[callbackKey];
        this.cb = typeof callback === 'function' ? callback : void 0;
        this.v = initialValue;
    }
    getValue() {
        return this.v;
    }
    setValue(value, flags) {
        if (typeof this.s === 'function') {
            value = this.s(value);
        }
        const oldValue = this.v;
        if (!Object.is(value, oldValue)) {
            this.v = value;
            this.cb?.call(this.obj, value, oldValue, flags);
            // there's a chance that cb.call(...)
            // changes the latest value of this observer
            // and thus making `value` stale
            // so for now, call with this.v
            // todo: should oldValue be treated the same way?
            this.subs.notify(this.v, oldValue, flags);
        }
    }
}
(0,_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_0__.subscriberCollection)(SetterObserver);
(0,_subscriber_collection_js__WEBPACK_IMPORTED_MODULE_0__.subscriberCollection)(SetterNotifier);
//# sourceMappingURL=setter-observer.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/signaler.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/signaler.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ISignaler": () => /* binding */ ISignaler,
/* harmony export */   "Signaler": () => /* binding */ Signaler
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");

const ISignaler = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createInterface('ISignaler', x => x.singleton(Signaler));
class Signaler {
    constructor() {
        this.signals = Object.create(null);
    }
    dispatchSignal(name, flags) {
        const listeners = this.signals[name];
        if (listeners === undefined) {
            return;
        }
        for (const listener of listeners.keys()) {
            listener.handleChange(undefined, undefined, flags | 8 /* updateTarget */);
        }
    }
    addSignalListener(name, listener) {
        const signals = this.signals;
        const listeners = signals[name];
        if (listeners === undefined) {
            signals[name] = new Set([listener]);
        }
        else {
            listeners.add(listener);
        }
    }
    removeSignalListener(name, listener) {
        const listeners = this.signals[name];
        if (listeners) {
            listeners.delete(listener);
        }
    }
}
//# sourceMappingURL=signaler.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/observation/subscriber-collection.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/observation/subscriber-collection.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subscriberCollection": () => /* binding */ subscriberCollection,
/* harmony export */   "SubscriberRecord": () => /* binding */ SubscriberRecord
/* harmony export */ });
/* harmony import */ var _utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities-objects.js */ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js");

function subscriberCollection(target) {
    return target == null ? subscriberCollectionDeco : subscriberCollectionDeco(target);
}
function subscriberCollectionDeco(target) {
    const proto = target.prototype;
    // not configurable, as in devtool, the getter could be invoked on the prototype,
    // and become permanently broken
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__.def)(proto, 'subs', { get: getSubscriberRecord });
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__.ensureProto)(proto, 'subscribe', addSubscriber);
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__.ensureProto)(proto, 'unsubscribe', removeSubscriber);
}
/* eslint-enable @typescript-eslint/ban-types */
class SubscriberRecord {
    constructor(owner) {
        /**
         * subscriber flags: bits indicating the existence status of the subscribers of this record
         */
        this._sf = 0 /* None */;
        this.count = 0;
        this.owner = owner;
    }
    add(subscriber) {
        if (this.has(subscriber)) {
            return false;
        }
        const subscriberFlags = this._sf;
        if ((subscriberFlags & 1 /* Subscriber0 */) === 0) {
            this._s0 = subscriber;
            this._sf |= 1 /* Subscriber0 */;
        }
        else if ((subscriberFlags & 2 /* Subscriber1 */) === 0) {
            this._s1 = subscriber;
            this._sf |= 2 /* Subscriber1 */;
        }
        else if ((subscriberFlags & 4 /* Subscriber2 */) === 0) {
            this._s2 = subscriber;
            this._sf |= 4 /* Subscriber2 */;
        }
        else if ((subscriberFlags & 8 /* SubscribersRest */) === 0) {
            this._sr = [subscriber];
            this._sf |= 8 /* SubscribersRest */;
        }
        else {
            this._sr.push(subscriber); // Non-null is implied by else branch of (subscriberFlags & SF.SubscribersRest) === 0
        }
        ++this.count;
        return true;
    }
    has(subscriber) {
        // Flags here is just a perf tweak
        // Compared to not using flags, it's a moderate speed-up when this collection does not have the subscriber;
        // and minor slow-down when it does, and the former is more common than the latter.
        const subscriberFlags = this._sf;
        if ((subscriberFlags & 1 /* Subscriber0 */) > 0 && this._s0 === subscriber) {
            return true;
        }
        if ((subscriberFlags & 2 /* Subscriber1 */) > 0 && this._s1 === subscriber) {
            return true;
        }
        if ((subscriberFlags & 4 /* Subscriber2 */) > 0 && this._s2 === subscriber) {
            return true;
        }
        if ((subscriberFlags & 8 /* SubscribersRest */) > 0) {
            const subscribers = this._sr; // Non-null is implied by (subscriberFlags & SF.SubscribersRest) > 0
            const ii = subscribers.length;
            let i = 0;
            for (; i < ii; ++i) {
                if (subscribers[i] === subscriber) {
                    return true;
                }
            }
        }
        return false;
    }
    any() {
        return this._sf !== 0 /* None */;
    }
    remove(subscriber) {
        const subscriberFlags = this._sf;
        if ((subscriberFlags & 1 /* Subscriber0 */) > 0 && this._s0 === subscriber) {
            this._s0 = void 0;
            this._sf = (this._sf | 1 /* Subscriber0 */) ^ 1 /* Subscriber0 */;
            --this.count;
            return true;
        }
        else if ((subscriberFlags & 2 /* Subscriber1 */) > 0 && this._s1 === subscriber) {
            this._s1 = void 0;
            this._sf = (this._sf | 2 /* Subscriber1 */) ^ 2 /* Subscriber1 */;
            --this.count;
            return true;
        }
        else if ((subscriberFlags & 4 /* Subscriber2 */) > 0 && this._s2 === subscriber) {
            this._s2 = void 0;
            this._sf = (this._sf | 4 /* Subscriber2 */) ^ 4 /* Subscriber2 */;
            --this.count;
            return true;
        }
        else if ((subscriberFlags & 8 /* SubscribersRest */) > 0) {
            const subscribers = this._sr; // Non-null is implied by (subscriberFlags & SF.SubscribersRest) > 0
            const ii = subscribers.length;
            let i = 0;
            for (; i < ii; ++i) {
                if (subscribers[i] === subscriber) {
                    subscribers.splice(i, 1);
                    if (ii === 1) {
                        this._sf = (this._sf | 8 /* SubscribersRest */) ^ 8 /* SubscribersRest */;
                    }
                    --this.count;
                    return true;
                }
            }
        }
        return false;
    }
    notify(val, oldVal, flags) {
        /**
         * Note: change handlers may have the side-effect of adding/removing subscribers to this collection during this
         * callSubscribers invocation, so we're caching them all before invoking any.
         * Subscribers added during this invocation are not invoked (and they shouldn't be).
         * Subscribers removed during this invocation will still be invoked (and they also shouldn't be,
         * however this is accounted for via $isBound and similar flags on the subscriber objects)
         */
        const owner = this.owner;
        const sub0 = this._s0;
        const sub1 = this._s1;
        const sub2 = this._s2;
        let subs = this._sr;
        if (subs !== void 0) {
            subs = subs.slice();
        }
        flags = (flags | 24 /* update */) ^ 24 /* update */;
        if (sub0 !== void 0) {
            sub0.handleChange(val, oldVal, flags | /* sub own flags */ (sub0.id === void 0 ? 0 : owner[sub0.id]));
        }
        if (sub1 !== void 0) {
            sub1.handleChange(val, oldVal, flags | /* sub own flags */ (sub1.id === void 0 ? 0 : owner[sub1.id]));
        }
        if (sub2 !== void 0) {
            sub2.handleChange(val, oldVal, flags | /* sub own flags */ (sub2.id === void 0 ? 0 : owner[sub2.id]));
        }
        if (subs !== void 0) {
            const ii = subs.length;
            let sub;
            let i = 0;
            for (; i < ii; ++i) {
                sub = subs[i];
                if (sub !== void 0) {
                    sub.handleChange(val, oldVal, flags | /* sub own flags */ (sub.id === void 0 ? 0 : owner[sub.id]));
                }
            }
        }
    }
    notifyCollection(indexMap, flags) {
        const sub0 = this._s0;
        const sub1 = this._s1;
        const sub2 = this._s2;
        let subs = this._sr;
        if (subs !== void 0) {
            subs = subs.slice();
        }
        if (sub0 !== void 0) {
            sub0.handleCollectionChange(indexMap, flags);
        }
        if (sub1 !== void 0) {
            sub1.handleCollectionChange(indexMap, flags);
        }
        if (sub2 !== void 0) {
            sub2.handleCollectionChange(indexMap, flags);
        }
        if (subs !== void 0) {
            const ii = subs.length;
            let sub;
            let i = 0;
            for (; i < ii; ++i) {
                sub = subs[i];
                if (sub !== void 0) {
                    sub.handleCollectionChange(indexMap, flags);
                }
            }
        }
    }
}
function getSubscriberRecord() {
    const record = new SubscriberRecord(this);
    (0,_utilities_objects_js__WEBPACK_IMPORTED_MODULE_0__.defineHiddenProp)(this, 'subs', record);
    return record;
}
function addSubscriber(subscriber) {
    return this.subs.add(subscriber);
}
function removeSubscriber(subscriber) {
    return this.subs.remove(subscriber);
}
//# sourceMappingURL=subscriber-collection.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/utilities-objects.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "def": () => /* binding */ def,
/* harmony export */   "defineHiddenProp": () => /* binding */ defineHiddenProp,
/* harmony export */   "ensureProto": () => /* binding */ ensureProto
/* harmony export */ });
const def = Reflect.defineProperty;
function defineHiddenProp(obj, key, value) {
    def(obj, key, {
        enumerable: false,
        configurable: true,
        writable: true,
        value
    });
}
function ensureProto(proto, key, defaultValue, force = false) {
    if (force || !Object.prototype.hasOwnProperty.call(proto, key)) {
        defineHiddenProp(proto, key, defaultValue);
    }
}
//# sourceMappingURL=utilities-objects.js.map

/***/ }),

/***/ "./node_modules/@aurelia/runtime/dist/esm/value-converter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aurelia/runtime/dist/esm/value-converter.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "valueConverter": () => /* binding */ valueConverter,
/* harmony export */   "ValueConverterDefinition": () => /* binding */ ValueConverterDefinition,
/* harmony export */   "ValueConverter": () => /* binding */ ValueConverter
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _alias_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alias.js */ "./node_modules/@aurelia/runtime/dist/esm/alias.js");


function valueConverter(nameOrDef) {
    return function (target) {
        return ValueConverter.define(nameOrDef, target);
    };
}
class ValueConverterDefinition {
    constructor(Type, name, aliases, key) {
        this.Type = Type;
        this.name = name;
        this.aliases = aliases;
        this.key = key;
    }
    static create(nameOrDef, Type) {
        let name;
        let def;
        if (typeof nameOrDef === 'string') {
            name = nameOrDef;
            def = { name };
        }
        else {
            name = nameOrDef.name;
            def = nameOrDef;
        }
        return new ValueConverterDefinition(Type, (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.firstDefined)(ValueConverter.getAnnotation(Type, 'name'), name), (0,_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(ValueConverter.getAnnotation(Type, 'aliases'), def.aliases, Type.aliases), ValueConverter.keyFrom(name));
    }
    register(container) {
        const { Type, key, aliases } = this;
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.singleton(key, Type).register(container);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.aliasTo(key, Type).register(container);
        (0,_alias_js__WEBPACK_IMPORTED_MODULE_1__.registerAliases)(aliases, ValueConverter, key, container);
    }
}
const ValueConverter = {
    name: _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.keyFor('value-converter'),
    keyFrom(name) {
        return `${ValueConverter.name}:${name}`;
    },
    isType(value) {
        return typeof value === 'function' && _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.hasOwn(ValueConverter.name, value);
    },
    define(nameOrDef, Type) {
        const definition = ValueConverterDefinition.create(nameOrDef, Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(ValueConverter.name, definition, definition.Type);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(ValueConverter.name, definition, definition);
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.resource.appendTo(Type, ValueConverter.name);
        return definition.Type;
    },
    getDefinition(Type) {
        const def = _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(ValueConverter.name, Type);
        if (def === void 0) {
            throw new Error(`No definition found for type ${Type.name}`);
        }
        return def;
    },
    annotate(Type, prop, value) {
        _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.define(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor(prop), value, Type);
    },
    getAnnotation(Type, prop) {
        return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata.getOwn(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Protocol.annotation.keyFor(prop), Type);
    },
};
//# sourceMappingURL=value-converter.js.map

/***/ }),

/***/ "./src/app.html":
/*!**********************!*\
  !*** ./src/app.html ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "name": () => /* binding */ name,
/* harmony export */   "template": () => /* binding */ template,
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__,
/* harmony export */   "dependencies": () => /* binding */ dependencies,
/* harmony export */   "register": () => /* binding */ register
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _reset_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reset.css */ "./src/reset.css");
/* harmony import */ var _app_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app.css */ "./src/app.css");




const name = "app";
const template = "<template>\n  \n  \n\n  <div id=\"au-dev-root\" class=\"${isDarkTheme ? 'dark' : ''}\">\n    <h1 class=\"app-header\">\n      <aurelia-logo></aurelia-logo>\n      <span class=\"logo-badge\">INSPECTOR</span>\n    </h1>\n\n    <main>\n      <p class=\"not-found\" style=\"margin-bottom: 10px\">\n        Select a node through the inspect window to scope into that node. Click\n        on the value will allow one to edit the value and bind to the view.\n      </p>\n      <!-- <debug-group heading=\"Binding Context\" show.bind=\"true\">\n        <template if.bind=\"debugInfo.bindingContext\">\n          <ul>\n            <li repeat.for=\"property of debugInfo.bindingContext.properties\">\n              <property-view property.bind=\"property\"></property-view>\n            </li>\n          </ul>\n        </template>\n        <template if.bind=\"!debugInfo.bindingContext\">\n          <span class=\"not-found\"\n            >No binding context found for the selected node.</span\n          >\n        </template>\n      </debug-group>\n\n      <debug-group heading=\"Override Context\">\n        <template\n          if.bind=\"debugInfo.overrideContext && debugInfo.overrideContext.properties.length\"\n        >\n          <ul>\n            <li repeat.for=\"property of debugInfo.overrideContext.properties\">\n              <property-view property.bind=\"property\"></property-view>\n            </li>\n          </ul>\n        </template>\n        <template\n          if.bind=\"!debugInfo.overrideContext || !debugInfo.overrideContext.properties.length\"\n        >\n          <span class=\"not-found\"\n            >No override context found for the selected node.</span\n          >\n        </template>\n      </debug-group> -->\n\n      <debug-group heading=\"Custom Element\">\n        <template au-slot>\n          <span if.bind=\"!selectedElement\" class=\"not-found\"\n            >The selected node is not a custom element.</span\n          >\n          <controller-view\n            else\n            controller.bind=\"selectedElement\"\n          ></controller-view>\n        </template>\n      </debug-group>\n\n      <debug-group heading=\"Custom Attributes\">\n        <template au-slot>\n          <span if.bind=\"!selectedElementAttributes\" class=\"not-found\"\n            >No custom attributes found on the selected node.</span\n          >\n          <ul else>\n            <li\n              repeat.for=\"customAttribute of selectedElementAttributes\"\n              class=\"custom-attribute\"\n            >\n              <h3 class=\"attribute-name\">${customAttribute.name}</h3>\n              &nbsp;<span class=\"block-token\">{</span>\n              <controller-view\n                controller.bind=\"customAttribute\"\n              ></controller-view>\n              <span class=\"block-token\">}</span>\n            </li>\n          </ul>\n        </template>\n      </debug-group>\n    </main>\n\n    <!-- <main>\n      <custom-element if.bind=\"selectedElement\">\n        ${JSON.stringify(selectedElement)}\n        <div>Name = ${selectedElement.name}</div>\n        <div>Key = ${selectedElement.key}</div>\n        <div>Aliases = ${selectedElement.aliases.join(', ')}</div>\n        <h3>Bindables</h3>\n        <div repeat.for=\"value of selectedElement.bindables\">\n          ${value.name} =\n          <input\n            value.bind=\"value.value\"\n            keyup.delegate=\"valueChanged(selectedElement)\"\n          />\n        </div>\n        <hr />\n      </custom-element>\n    </main> -->\n  </div>\n</template>\n";
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (template);
const dependencies = [ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_1__.Registration.defer('.css', _reset_css__WEBPACK_IMPORTED_MODULE_2__.default, _app_css__WEBPACK_IMPORTED_MODULE_3__.default) ];
let _e;
function register(container) {
  if (!_e) {
    _e = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.define({ name, template, dependencies });
  }
  container.register(_e);
}


/***/ }),

/***/ "./src/resources/elements/aurelia-logo.html":
/*!**************************************************!*\
  !*** ./src/resources/elements/aurelia-logo.html ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "name": () => /* binding */ name,
/* harmony export */   "template": () => /* binding */ template,
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__,
/* harmony export */   "dependencies": () => /* binding */ dependencies,
/* harmony export */   "register": () => /* binding */ register
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");

const name = "aurelia-logo";
const template = "<template>\n  <svg height=\"28px\" viewBox=\"315 19 140 41\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <defs>\n      <linearGradient x1=\"-388.147851%\" y1=\"-144.177425%\" x2=\"237.683809%\" y2=\"430.405754%\" id=\"linearGradient-1\">\n        <stop stop-color=\"#C06FBB\" offset=\"0%\"></stop>\n        <stop stop-color=\"#6E4D9B\" offset=\"100%\"></stop>\n      </linearGradient>\n      <linearGradient x1=\"72.9454854%\" y1=\"84.4240777%\" x2=\"-97.0517904%\" y2=\"-147.696591%\" id=\"linearGradient-2\">\n        <stop stop-color=\"#6E4D9B\" offset=\"0%\"></stop>\n        <stop stop-color=\"#77327A\" offset=\"14%\"></stop>\n        <stop stop-color=\"#B31777\" offset=\"29%\"></stop>\n        <stop stop-color=\"#CD0F7E\" offset=\"84%\"></stop>\n        <stop stop-color=\"#ED2C89\" offset=\"100%\"></stop>\n      </linearGradient>\n      <linearGradient x1=\"-283.884079%\" y1=\"-693.599872%\" x2=\"287.537417%\" y2=\"101.70976%\" id=\"linearGradient-3\">\n        <stop stop-color=\"#C06FBB\" offset=\"0%\"></stop>\n        <stop stop-color=\"#6E4D9B\" offset=\"100%\"></stop>\n      </linearGradient>\n      <linearGradient x1=\"-821.186214%\" y1=\"-469.047862%\" x2=\"101.985142%\" y2=\"288.23598%\" id=\"linearGradient-4\">\n        <stop stop-color=\"#C06FBB\" offset=\"0%\"></stop>\n        <stop stop-color=\"#6E4D9B\" offset=\"100%\"></stop>\n      </linearGradient>\n      <linearGradient x1=\"-140.359373%\" y1=\"-230.925718%\" x2=\"419.012316%\" y2=\"261.976742%\" id=\"linearGradient-5\">\n        <stop stop-color=\"#C06FBB\" offset=\"0%\"></stop>\n        <stop stop-color=\"#6E4D9B\" offset=\"100%\"></stop>\n      </linearGradient>\n      <linearGradient x1=\"191.083716%\" y1=\"253.952517%\" x2=\"20.3577022%\" y2=\"20.4029283%\" id=\"linearGradient-6\">\n        <stop stop-color=\"#6E4D9B\" offset=\"0%\"></stop>\n        <stop stop-color=\"#77327A\" offset=\"14%\"></stop>\n        <stop stop-color=\"#B31777\" offset=\"29%\"></stop>\n        <stop stop-color=\"#CD0F7E\" offset=\"84%\"></stop>\n        <stop stop-color=\"#ED2C89\" offset=\"100%\"></stop>\n      </linearGradient>\n      <linearGradient x1=\"-388.094004%\" y1=\"-173.850055%\" x2=\"237.674802%\" y2=\"518.990225%\" id=\"linearGradient-7\">\n        <stop stop-color=\"#C06FBB\" offset=\"0%\"></stop>\n        <stop stop-color=\"#6E4D9B\" offset=\"100%\"></stop>\n      </linearGradient>\n      <linearGradient x1=\"11.1884561%\" y1=\"89.6525993%\" x2=\"90.145125%\" y2=\"11.5773982%\" id=\"linearGradient-8\">\n        <stop stop-color=\"#6E4D9B\" offset=\"0%\"></stop>\n        <stop stop-color=\"#77327A\" offset=\"14%\"></stop>\n        <stop stop-color=\"#B31777\" offset=\"53%\"></stop>\n        <stop stop-color=\"#CD0F7E\" offset=\"79%\"></stop>\n        <stop stop-color=\"#ED2C89\" offset=\"100%\"></stop>\n      </linearGradient>\n      <rect id=\"path-9\" x=\"0.627498256\" y=\"0\" width=\"34\" height=\"16\" rx=\"2\"></rect>\n      <filter x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\" filterUnits=\"objectBoundingBox\" id=\"filter-10\">\n        <feOffset dx=\"0\" dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"></feOffset>\n        <feColorMatrix values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.15 0\" type=\"matrix\" in=\"shadowOffsetOuter1\"></feColorMatrix>\n      </filter>\n    </defs>\n    <g id=\"Group-3\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" transform=\"translate(317.000000, 21.000000)\">\n      <g id=\"Icon\" transform=\"translate(18.821436, 18.821436) rotate(11.283864) translate(-18.821436, -18.821436) translate(2.821436, 2.821436)\">\n        <g id=\"Group\" transform=\"translate(16.062217, 4.314649) rotate(-11.283864) translate(-16.062217, -4.314649) translate(12.909354, 0.852682)\"\n          fill=\"url(#linearGradient-1)\">\n          <polygon id=\"Shape\" points=\"6.24514134 4.78196568 3.21344731 6.8053618 0.0902584276 2.12490594 3.12195246 0.101509821\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(24.576671, 23.606062) rotate(-11.283864) translate(-24.576671, -23.606062) translate(18.394587, 16.929411)\"\n          fill=\"url(#linearGradient-2)\">\n          <polygon id=\"Shape\" points=\"7.16404632 1.47319064 12.3440146 9.23541541 6.17342916 13.3533016 0.993460912 5.5909532 0.0897638609 4.23695315 6.26047291 0.119066939\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(16.064001, 27.069671) rotate(-11.283864) translate(-16.064001, -27.069671) translate(12.602034, 23.854988)\"\n          fill=\"url(#linearGradient-3)\">\n          <polygon id=\"Shape\" points=\"5.69777962 1.46663763 6.83825049 3.17561295 2.14147393 6.30992958 0.0973060035 3.24683056 1.12340832 2.56210293 4.79420621 0.11251393\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(27.417287, 15.726712) rotate(-11.283864) translate(-27.417287, -15.726712) translate(24.820812, 13.130236)\"\n          fill=\"url(#linearGradient-4)\">\n          <path d=\"M1.81703815,0.894671208 L3.13444027,0.0155788519 L5.17848455,3.07867787 L2.14641959,5.10207399 L1.00594872,3.39309867 L2.72061156,2.24879491 L1.81703815,0.894671208 L1.81703815,0.894671208 Z M1.00594872,3.39309867 L0.102375312,2.03897497 L1.81703815,0.894671208 L2.72061156,2.24879491 L1.00594872,3.39309867 L1.00594872,3.39309867 Z\"\n            id=\"Shape\"></path>\n        </g>\n        <g id=\"Group\" transform=\"translate(4.721041, 15.716385) rotate(-11.283864) translate(-4.721041, -15.716385) translate(0.764507, 11.759851)\"\n          fill=\"url(#linearGradient-5)\">\n          <polygon id=\"Shape\" points=\"4.17241219 7.1450055 3.14643351 7.82973313 0.0229973528 3.14927727 4.71977391 0.0149606435 6.90909717 3.29579267 3.23842293 5.74538166 6.90909717 3.29579267 7.84321007 4.69554014\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(8.822560, 7.837609) rotate(-11.283864) translate(-8.822560, -7.837609) translate(2.640476, 1.160958)\"\n          fill=\"url(#linearGradient-6)\">\n          <polygon id=\"Shape\" points=\"11.3428879 7.75332257 12.2768771 9.15307005 6.10616809 13.2709563 5.17217883 11.8712088 0.0406781133 4.18168531 6.21138716 0.0637991077\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(16.122857, 4.300703) rotate(-11.283864) translate(-16.122857, -4.300703) translate(12.969994, 0.900557)\"\n          fill=\"url(#linearGradient-7)\">\n          <polygon id=\"Shape\" points=\"4.86604202 5.6013391 3.15137918 6.74551923 2.21726628 5.34589539 0.0279430201 2.06506337 3.06000798 0.0416672467 6.18344414 4.72212311\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(15.822071, 25.857155) rotate(-11.283864) translate(-15.822071, -25.857155) translate(13.472879, 23.878888)\"\n          fill=\"#714896\">\n          <polygon id=\"Shape\" points=\"0.914330236 3.91622662 0.0106331846 2.56210293 3.68143107 0.11251393 4.58500448 1.46663763\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(26.180721, 15.532164) rotate(-11.283864) translate(-26.180721, -15.532164) translate(24.758842, 14.233926)\"\n          fill=\"#6F4795\">\n          <polygon id=\"Shape\" points=\"1.00594872 2.5276069 0.102375312 1.1734832 1.81703815 0.0291794369 2.72061156 1.38330313\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(6.539242, 16.614393) rotate(-11.283864) translate(-6.539242, -16.614393) translate(4.190050, 14.636126)\"\n          fill=\"#88519F\">\n          <polygon id=\"Shape\" points=\"0.957728466 3.93032178 0.0237392029 2.53069794 3.69441345 0.0811089432 4.62852635 1.48085642\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(16.885795, 6.228777) rotate(-11.283864) translate(-16.885795, -6.228777) translate(15.463916, 4.868718)\"\n          fill=\"#85509E\">\n          <polygon id=\"Shape\" points=\"1.04947059 2.66534373 0.115357689 1.26571989 1.83014417 0.121416131 2.76413343 1.52116361\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(21.280404, 20.355313) rotate(-11.283864) translate(-21.280404, -20.355313) translate(17.694795, 17.511554)\"\n          fill=\"#8D166A\">\n          <polygon id=\"Shape\" points=\"7.16404632 1.47319064 0.993460912 5.5909532 0.0897638609 4.23695315 6.26047291 0.119066939\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(12.058201, 11.100454) rotate(-11.283864) translate(-12.058201, -11.100454) translate(8.410771, 8.256696)\"\n          fill=\"#A70D6F\">\n          <polygon id=\"Shape\" points=\"6.27357893 0.0875383106 7.20756819 1.48728579 1.03685914 5.605172 0.102869879 4.20542452\"></polygon>\n        </g>\n        <g id=\"Group\" transform=\"translate(1.853411, 10.678267) rotate(45.000000) translate(-1.853411, -10.678267) translate(0.797906, 9.622762)\"\n          fill=\"#9E61AD\">\n          <rect id=\"Rectangle-path\" x=\"1.66662571e-15\" y=\"0\" width=\"2.0982715\" height=\"2.0982715\"></rect>\n        </g>\n        <g id=\"Group\" transform=\"translate(12.115669, 29.966366) rotate(45.000000) translate(-12.115669, -29.966366) translate(11.060163, 28.910860)\"\n          fill=\"#8053A3\">\n          <rect id=\"Rectangle-path\" x=\"1.66662571e-15\" y=\"0\" width=\"2.0982715\" height=\"2.0982715\"></rect>\n        </g>\n        <g id=\"Group\" transform=\"translate(16.641954, 16.427437) rotate(0.000000) translate(-16.641954, -16.427437) translate(1.422442, 1.207924)\"\n          fill=\"url(#linearGradient-8)\">\n          <polygon id=\"Shape\" points=\"6.53446157 29.8878978 0.012982374 23.3175801 23.2186668 0.0630572451 29.9596099 6.46398583\"></polygon>\n        </g>\n      </g>\n      <g id=\"Aurelia-+-Type-something\" transform=\"translate(38.131960, 3.021427)\">\n        <g id=\"Aurelia\" transform=\"translate(0.929505, 0.290297)\">\n          <g id=\"A\" transform=\"translate(0.076673, 8.413465)\" fill=\"#ED2C88\">\n            <path d=\"M8.79524752,16.5403564 C8.91089109,16.5398812 9.02811881,16.5376634 9.14376238,16.5325941 C9.38930693,16.5216634 9.63326733,16.4993267 9.87722772,16.4652673 C10.5853465,16.3659406 11.2792079,16.167604 11.9334653,15.8765941 C12.7429703,15.5166733 13.4891089,15.0162376 14.1306931,14.4050693 C14.7358416,13.8271683 15.2475248,13.1512079 15.6388119,12.4104554 C15.969901,11.7821782 16.2138614,11.1084356 16.3611881,10.4133069 C16.540198,9.56356436 16.5750495,8.68324752 16.4657426,7.82178218 C16.3643564,7.03271287 16.1425743,6.26043564 15.8051485,5.53964356 C15.4186139,4.70954455 14.8815842,3.95025743 14.230495,3.30645545 C13.5445545,2.62922772 12.7334653,2.08110891 11.8479208,1.70011881 C11.3679208,1.49354455 10.8657426,1.33607921 10.3540594,1.23136634 C9.87405941,1.13314851 9.38455446,1.0810297 8.8950495,1.07485149 C8.41821782,1.06883168 7.94138614,1.10590099 7.47247525,1.18669307 C6.94019802,1.27841584 6.41742574,1.42653465 5.91524752,1.62788119 C5.03445545,1.98130693 4.22178218,2.49916832 3.52633663,3.14582178 C2.84514851,3.78011881 2.27960396,4.53687129 1.86455446,5.37061386 C1.51287129,6.08079208 1.27049505,6.8449901 1.15009901,7.6289901 C1.0170297,8.50407921 1.03287129,9.40229703 1.20079208,10.2718416 C1.3370297,10.9859802 1.57623762,11.6801584 1.90732673,12.3274455 C2.28910891,13.0731089 2.79287129,13.7552475 3.39326733,14.3405941 C4.01425743,14.9482772 4.73821782,15.450297 5.52712871,15.8181386 C6.15920792,16.1134257 6.83247525,16.321901 7.52,16.4359604 C7.76079208,16.4758812 8.00475248,16.504396 8.24871287,16.5213465 C8.38019802,16.5305347 8.51168317,16.5359208 8.64475248,16.5389307 C8.69544554,16.5397228 8.74455446,16.540198 8.79524752,16.5403564 L8.79524752,16.5403564 Z M16.8538614,12.199604 C16.769901,12.3988911 16.6780198,12.5950099 16.579802,12.7874851 C16.1330693,13.6613069 15.5374257,14.4579802 14.8261386,15.1353663 C14.1275248,15.8018218 13.3180198,16.3518416 12.440396,16.7550099 C11.7053465,17.0924356 10.9243564,17.3265743 10.1259406,17.4487129 C9.85188119,17.4905347 9.57623762,17.5193663 9.2990099,17.5350495 C9.16910891,17.542495 9.03762376,17.5466139 8.90772277,17.5486733 C8.86970297,17.5491485 8.83168317,17.5493069 8.79524752,17.5494653 C8.66376238,17.5489901 8.53227723,17.5466139 8.40079208,17.5407525 C8.12356436,17.528396 7.84792079,17.5030495 7.57227723,17.4647129 C6.77069307,17.352396 5.9849505,17.1277624 5.24514851,16.7987327 C4.34693069,16.3988911 3.51683168,15.8460198 2.80079208,15.1714851 C2.07366337,14.4861782 1.46534653,13.6768317 1.00910891,12.7874851 C0.641584158,12.0712871 0.375445545,11.3045545 0.218613861,10.5151683 C0.0316831683,9.57037624 0.00316831683,8.59453465 0.12990099,7.63992079 C0.247128713,6.76625743 0.495841584,5.91128713 0.86970297,5.11271287 C1.31485149,4.15857426 1.93425743,3.28760396 2.68831683,2.55192079 C3.46613861,1.79073267 4.38811881,1.17671287 5.39089109,0.752316832 C5.92,0.528633663 6.47128713,0.35770297 7.03366337,0.242693069 C7.59445545,0.128 8.16633663,0.0687524752 8.73821782,0.0652673267 C9.31168317,0.0616237624 9.88514851,0.113584158 10.4491089,0.221465347 C11.0130693,0.329663366 11.5675248,0.493940594 12.099802,0.711287129 C13.1089109,1.12364356 14.0372277,1.72689109 14.8261386,2.4790495 C15.5754455,3.1930297 16.1964356,4.03960396 16.6510891,4.96918812 C16.7223762,5.11588119 16.790495,5.26447525 16.8538614,5.4149703 L16.8538614,0.0944158416 L17.8439604,0.0944158416 L17.8439604,17.5201584 L16.8538614,17.5201584 L16.8538614,12.199604 L16.8538614,12.199604 Z\"\n              id=\"Shape\"></path>\n          </g>\n          <g id=\"U\" transform=\"translate(20.353901, 8.413465)\" fill=\"#CD0F7E\">\n            <path d=\"M16.5370297,12.8188515 C16.1710891,13.5234851 15.7116832,14.1790099 15.1714851,14.761505 C14.710495,15.2605149 14.1893069,15.7056634 13.6253465,16.0845941 C13.0106931,16.4967921 12.3421782,16.8299406 11.6435644,17.0724752 C11.0637624,17.2736634 10.4617822,17.4122772 9.85188119,17.4859406 C9.64910891,17.510495 9.44792079,17.5277624 9.24356436,17.5380594 C9.13108911,17.5437624 9.02019802,17.5469307 8.90772277,17.5486733 C8.86970297,17.5491485 8.83168317,17.5493069 8.79524752,17.5494653 C8.68118812,17.5491485 8.57029703,17.5472475 8.45623762,17.5429703 C8.21544554,17.5339406 7.97465347,17.5149307 7.73544554,17.486099 C7.03366337,17.401505 6.3429703,17.2318416 5.68079208,16.981703 C4.68910891,16.6065743 3.76712871,16.0505347 2.97188119,15.3492277 C2.40792079,14.8505347 1.90574257,14.2788119 1.48752475,13.6519604 C1.03445545,12.9745743 0.678019802,12.2330297 0.435643564,11.4553663 C0.256633663,10.8830099 0.139405941,10.291802 0.0855445545,9.69473267 C0.0586138614,9.39865347 0.0491089109,9.10162376 0.0522772277,8.80443564 L0.0522772277,0.0944158416 L1.06138614,0.0944158416 L1.06138614,8.81013861 L1.06138614,8.91453465 L1.06138614,9.0140198 C1.0629703,9.1130297 1.06455446,9.21188119 1.07089109,9.31073267 C1.0819802,9.53805941 1.10415842,9.76491089 1.13584158,9.99033663 C1.22772277,10.6333465 1.40356436,11.264 1.66019802,11.8613861 C2.01980198,12.7047921 2.53623762,13.4792871 3.16990099,14.1414653 C3.79564356,14.7939802 4.53544554,15.3357624 5.3449505,15.7362376 C6.05940594,16.0890297 6.82772277,16.3310891 7.6150495,16.4511683 C8.42613861,16.5747327 9.25782178,16.5704554 10.0673267,16.4359604 C10.7057426,16.3296634 11.3314851,16.1416238 11.9239604,15.8769109 C12.7714851,15.4979802 13.5477228,14.9631683 14.2067327,14.3089109 C14.8340594,13.6853861 15.3536634,12.9552475 15.740198,12.1587327 C16.0586139,11.5003564 16.2835644,10.7976238 16.4087129,10.0771485 C16.4578218,9.80308911 16.4910891,9.52665347 16.510099,9.24926733 C16.5180198,9.11651485 16.5243564,8.98376238 16.5275248,8.85069307 L16.5275248,8.80316832 L16.5370297,0.0944158416 L17.5271287,0.0944158416 L17.5271287,17.5201584 L16.5370297,17.5201584 L16.5370297,12.8188515 L16.5370297,12.8188515 Z\"\n              id=\"Shape\"></path>\n          </g>\n          <g id=\"R\" transform=\"translate(40.314297, 8.413465)\" fill=\"#B31776\">\n            <path d=\"M1.06455446,8.41552475 L1.04237624,17.5201584 L0.0522772277,17.5201584 L0.0522772277,0.0944158416 L1.04237624,0.0944158416 L1.04237624,4.55524752 C1.16594059,4.32966337 1.30059406,4.10978218 1.44316832,3.89639604 C1.83287129,3.31691089 2.29544554,2.78637624 2.81346535,2.31889109 C3.57069307,1.63611881 4.44831683,1.08910891 5.39405941,0.706693069 C6.08950495,0.425188119 6.82138614,0.232871287 7.56594059,0.133386139 C7.82257426,0.0993267327 8.07920792,0.076039604 8.33742574,0.0635247525 C8.48633663,0.0563960396 8.63524752,0.0532277228 8.78415842,0.0527524752 L8.78732673,1.08641584 C8.75247525,1.08657426 8.71920792,1.08673267 8.68594059,1.0870495 C8.65267327,1.08752475 8.61940594,1.08815842 8.58613861,1.0889505 C8.47049505,1.0919604 8.35485149,1.09687129 8.23920792,1.10463366 C7.99524752,1.12079208 7.75287129,1.14788119 7.51207921,1.18590099 C6.87366337,1.28681188 6.24792079,1.46550495 5.65227723,1.71849505 C4.82693069,2.0700198 4.06178218,2.56506931 3.40594059,3.17813861 C2.94653465,3.60712871 2.5409901,4.09346535 2.20356436,4.62320792 C1.85663366,5.16673267 1.5809901,5.75619802 1.38930693,6.37180198 C1.25306931,6.80966337 1.15960396,7.26035644 1.10891089,7.71611881 C1.0819802,7.94851485 1.06930693,8.18186139 1.06455446,8.41552475 L1.06455446,8.41552475 Z\"\n              id=\"Shape\"></path>\n          </g>\n          <g id=\"E\" transform=\"translate(48.393505, 8.413465)\" fill=\"#9B2073\">\n            <path d=\"M9.3750495,17.5510495 L8.81584158,17.5493069 C8.77940594,17.5488317 8.74138614,17.5483564 8.70336634,17.5478812 C8.59089109,17.5453465 8.48,17.5413861 8.36752475,17.5350495 C8.12831683,17.5214257 7.88910891,17.4979802 7.65148515,17.4647129 C6.98930693,17.3720396 6.33980198,17.2033267 5.71722772,16.9623762 C4.68277228,16.5620594 3.72910891,15.9626139 2.9180198,15.2072871 C2.12118812,14.4663762 1.46534653,13.5773465 0.993267327,12.5975446 C0.643168317,11.8707327 0.394455446,11.0954455 0.258217822,10.3003564 C0.0934653465,9.35081188 0.0887128713,8.37386139 0.239207921,7.42241584 C0.400792079,6.41489109 0.73980198,5.43778218 1.23722772,4.54732673 C1.78376238,3.56879208 2.52039604,2.69845545 3.39326733,1.99524752 C3.85742574,1.62075248 4.36118812,1.29394059 4.89188119,1.02178218 C5.3829703,0.770217822 5.89782178,0.565544554 6.42851485,0.411564356 C7.18574257,0.191524752 7.97148515,0.0757227723 8.76039604,0.0657425743 C9.64118812,0.0546534653 10.5235644,0.175366337 11.369505,0.426772277 C12.3184158,0.709386139 13.2182178,1.15564356 14.019802,1.73972277 C14.8673267,2.35849505 15.6023762,3.12966337 16.1805941,4.00665347 C16.5592079,4.58233663 16.869703,5.2030099 17.1025743,5.85172277 C17.3417822,6.51675248 17.4986139,7.21093069 17.569901,7.91413861 C17.5920792,8.13607921 17.6063366,8.35881188 17.6126733,8.58186139 C17.6126733,8.63825743 17.6142574,8.69449505 17.6142574,8.75073267 C17.6158416,8.78732673 17.6158416,8.82582178 17.6126733,8.86209901 C17.609505,8.8809505 17.6063366,8.89964356 17.6031683,8.91817822 C17.590495,8.97346535 17.5683168,9.02669307 17.5382178,9.07469307 C17.4780198,9.17132673 17.3845545,9.24562376 17.2768317,9.28332673 C17.2419802,9.29584158 17.2039604,9.30439604 17.1675248,9.30867327 C17.1485149,9.31073267 17.129505,9.31073267 17.110495,9.31184158 L9.0819802,9.31184158 L9.0819802,8.30273267 L16.5893069,8.30273267 C16.5718812,8.02867327 16.540198,7.75588119 16.4926733,7.48530693 C16.4023762,6.95271287 16.2534653,6.42962376 16.0522772,5.92807921 C15.7623762,5.20538614 15.3615842,4.528 14.8689109,3.92443564 C14.3112871,3.24007921 13.6364356,2.65188119 12.8823762,2.19342574 C12.2645545,1.81845545 11.5960396,1.53077228 10.8974257,1.34194059 C10.0625743,1.11588119 9.18970297,1.03287129 8.32633663,1.09322772 C7.90653465,1.12253465 7.48831683,1.18590099 7.07960396,1.28316832 C6.63287129,1.38914851 6.19722772,1.53520792 5.77584158,1.7189703 C4.89346535,2.10487129 4.08554455,2.65790099 3.40435644,3.33908911 C3.08752475,3.65655446 2.79762376,4.00158416 2.53940594,4.3689505 C2.21623762,4.82835644 1.94376238,5.32261386 1.72831683,5.84079208 C1.50336634,6.38384158 1.34019802,6.95287129 1.24356436,7.53314851 C1.16594059,8.00332673 1.13267327,8.48063366 1.14059406,8.95730693 C1.15168317,9.49449505 1.21663366,10.0305743 1.3370297,10.5541386 C1.47643564,11.1535842 1.68712871,11.7362376 1.96435644,12.2856238 C2.26534653,12.8817426 2.6439604,13.4382574 3.08594059,13.9375842 C3.49782178,14.4007921 3.96356436,14.8145743 4.47207921,15.1673663 C4.88237624,15.4514059 5.31960396,15.6958416 5.77584158,15.895604 C6.25584158,16.1050297 6.75485149,16.2653465 7.26653465,16.3733861 C7.59920792,16.4437228 7.93821782,16.4918812 8.27722772,16.517703 C8.45940594,16.5314851 8.64,16.5384554 8.82217822,16.540198 L9.37821782,16.5419406 C9.37821782,16.8782574 9.37663366,17.2145743 9.3750495,17.5510495 L9.3750495,17.5510495 Z\"\n              id=\"Shape\"></path>\n          </g>\n          <g id=\"L\" transform=\"translate(68.512317, 0.017426)\" fill=\"#8F2475\">\n            <path d=\"M5.15009901,25.945505 C4.98851485,25.9450297 4.82693069,25.9401188 4.66534653,25.9291881 C4.32475248,25.9062178 3.98415842,25.8577426 3.65148515,25.7802772 C3.31881188,25.7026535 2.99089109,25.5957228 2.67881188,25.4566337 C2.29227723,25.2849109 1.92633663,25.0642376 1.60158416,24.7947723 C1.43049505,24.6548911 1.27207921,24.5020198 1.12633663,24.3375842 C0.942574257,24.1314851 0.780990099,23.9074851 0.641584158,23.6692277 C0.467326733,23.3699802 0.331089109,23.0491881 0.234455446,22.7168317 C0.163168317,22.4693861 0.112475248,22.2157624 0.083960396,21.9597624 C0.0601980198,21.7470099 0.0491089109,21.5329901 0.0522772277,21.3189703 L0.0522772277,0.140673267 L1.06138614,0.140673267 L1.06138614,21.3253069 L1.06138614,21.430495 C1.0629703,21.5691089 1.07089109,21.7077228 1.08673267,21.8455446 C1.11207921,22.0673267 1.15643564,22.2870495 1.2229703,22.5001188 C1.30217822,22.7510495 1.40990099,22.9927921 1.54772277,23.2172673 C1.65227723,23.3893069 1.77425743,23.5510495 1.91049505,23.699802 C2.01821782,23.8186139 2.13544554,23.9291881 2.26059406,24.0305743 C2.36514851,24.1161188 2.4760396,24.1953267 2.59009901,24.2680396 C2.68831683,24.3306139 2.78970297,24.3884356 2.89267327,24.441505 C3.38534653,24.6930693 3.92712871,24.8370693 4.47524752,24.8991683 C4.70019802,24.9246733 4.92673267,24.9357624 5.15168317,24.936396 C5.15168317,25.2727129 5.15009901,25.6090297 5.15009901,25.945505 L5.15009901,25.945505 Z\"\n              id=\"Shape\"></path>\n          </g>\n          <g id=\"I\" transform=\"translate(75.957861, 0.017426)\" fill=\"#78327A\">\n            <path d=\"M0.148910891,25.916198 L0.148910891,8.49045545 L1.1390099,8.49045545 L1.1390099,25.916198 L0.148910891,25.916198 L0.148910891,25.916198 Z M0.153663366,2.47065347 L0.153663366,0.140673267 L1.13584158,0.140673267 L1.13584158,2.47065347 L0.153663366,2.47065347 L0.153663366,2.47065347 Z\"\n              id=\"Shape\"></path>\n          </g>\n          <g id=\"A1\" transform=\"translate(79.601426, 8.413465)\" fill=\"#6E4D9B\">\n            <path d=\"M8.79524752,16.5403564 C8.91089109,16.5398812 9.02811881,16.5376634 9.14376238,16.5325941 C9.38930693,16.5216634 9.63326733,16.4993267 9.87722772,16.4652673 C10.5853465,16.3659406 11.2792079,16.167604 11.9334653,15.8765941 C12.6716832,15.5480396 13.3576238,15.1027327 13.959604,14.5626931 C14.6281188,13.9616634 15.1920792,13.2446733 15.6166337,12.451802 C15.9588119,11.811802 16.2106931,11.1236436 16.3611881,10.4133069 C16.5433663,9.54756436 16.5766337,8.65029703 16.4594059,7.77330693 C16.3548515,6.98550495 16.1267327,6.21528713 15.7861386,5.49718812 C15.3932673,4.66946535 14.8514851,3.91382178 14.1972277,3.27382178 C13.5065347,2.60055446 12.6922772,2.0570297 11.8051485,1.68174257 C11.3378218,1.48419802 10.849901,1.33291089 10.3540594,1.23136634 C9.85663366,1.12982178 9.35128713,1.07754455 8.84435644,1.07437624 C8.33742574,1.07120792 7.82891089,1.1169901 7.32990099,1.21251485 C6.83089109,1.30819802 6.34138614,1.45346535 5.87247525,1.64546535 C4.9790099,2.01029703 4.15683168,2.54415842 3.45980198,3.20950495 C2.7960396,3.84126733 2.24633663,4.59041584 1.8439604,5.41275248 C1.49544554,6.12546535 1.25782178,6.89188119 1.14376238,7.6769901 C1.01861386,8.53671287 1.0360396,9.41813861 1.20079208,10.2716832 C1.34336634,11.0167129 1.59683168,11.7395644 1.95009901,12.4104554 C2.34138614,13.1512079 2.85306931,13.8271683 3.45980198,14.4050693 C4.07762376,14.9945347 4.79366337,15.4813465 5.56990099,15.8379406 C6.21940594,16.1362376 6.91009901,16.3432871 7.61663366,16.4511683 C7.8590099,16.4882376 8.1029703,16.5135842 8.34693069,16.5275248 C8.46257426,16.5341782 8.57821782,16.5378218 8.69386139,16.5397228 C8.72871287,16.5400396 8.76039604,16.540198 8.79524752,16.5403564 L8.79524752,16.5403564 Z M16.8538614,12.199604 C16.769901,12.3988911 16.6780198,12.5950099 16.579802,12.7874851 C16.1251485,13.6768317 15.5152475,14.4861782 14.7881188,15.1714851 C14.0720792,15.8460198 13.2435644,16.3988911 12.3437624,16.7987327 C11.6039604,17.1277624 10.8182178,17.352396 10.0166337,17.4647129 C9.74257426,17.5030495 9.46534653,17.528396 9.18811881,17.5407525 C9.05663366,17.5466139 8.92514851,17.5489901 8.79524752,17.5494653 C8.66376238,17.5489901 8.53227723,17.5466139 8.40079208,17.5407525 C8.12356436,17.528396 7.84792079,17.5030495 7.57227723,17.4647129 C6.77069307,17.352396 5.9849505,17.1277624 5.24514851,16.7987327 C4.33108911,16.3917624 3.48673267,15.8262178 2.76277228,15.1353663 C2.05306931,14.4579802 1.45742574,13.6613069 1.00910891,12.7874851 C0.633663366,12.0551287 0.364356436,11.269703 0.209108911,10.4616238 C0.0316831683,9.53362376 0.00475247525,8.57631683 0.12990099,7.63976238 C0.248712871,6.74867327 0.506930693,5.87706931 0.891881188,5.06471287 C1.34336634,4.11342574 1.96752475,3.24641584 2.72475248,2.51548515 C3.50891089,1.75873267 4.43405941,1.15009901 5.44,0.731722772 C5.98811881,0.504237624 6.55841584,0.332990099 7.13980198,0.221465347 C7.68475248,0.117069307 8.23920792,0.0651089109 8.79524752,0.0651089109 C9.34970297,0.0651089109 9.90415842,0.117069307 10.4491089,0.221465347 C11.030495,0.332990099 11.6007921,0.504237624 12.1489109,0.731722772 C13.1548515,1.15009901 14.08,1.75873267 14.8641584,2.51532673 C15.6087129,3.23390099 16.2249505,4.08443564 16.6748515,5.01687129 C16.7382178,5.1480396 16.7968317,5.28079208 16.8538614,5.4149703 L16.8538614,0.0944158416 L17.8439604,0.0944158416 L17.8439604,17.5201584 C17.8423762,17.5393267 16.8538614,17.5201584 16.8538614,17.5201584 L16.8538614,12.199604 L16.8538614,12.199604 Z\"\n              id=\"Shape\"></path>\n          </g>\n        </g>\n      </g>\n    </g>\n  </svg>\n</template>\n";
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (template);
const dependencies = [  ];
let _e;
function register(container) {
  if (!_e) {
    _e = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.define({ name, template, dependencies });
  }
  container.register(_e);
}


/***/ }),

/***/ "./src/resources/elements/controller-view.html":
/*!*****************************************************!*\
  !*** ./src/resources/elements/controller-view.html ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "name": () => /* binding */ name,
/* harmony export */   "template": () => /* binding */ template,
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__,
/* harmony export */   "dependencies": () => /* binding */ dependencies,
/* harmony export */   "bindables": () => /* binding */ bindables,
/* harmony export */   "register": () => /* binding */ register
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _controller_view_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controller-view.css */ "./src/resources/elements/controller-view.css");



const name = "controller-view";
const template = "<template >\n  \n\n  <div class=\"category\" if.bind=\"controller.bindables.length\">\n    <h4 class=\"category-name\">Bindables</h4>\n    <ul class=\"properties\">\n      <li repeat.for=\"bindable of controller.bindables\">\n        <property-view\n          controller.bind=\"controller\"\n          property.bind=\"bindable\"\n        ></property-view>\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"category\" if.bind=\"controller.properties.length\">\n    <h4 class=\"category-name\">Properties</h4>\n    <ul class=\"properties\">\n      <li repeat.for=\"property of controller.properties\">\n        <property-view\n          controller.bind=\"controller\"\n          property.bind=\"property\"\n        ></property-view>\n      </li>\n    </ul>\n  </div>\n</template>\n";
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (template);
const dependencies = [ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_1__.Registration.defer('.css', _controller_view_css__WEBPACK_IMPORTED_MODULE_2__.default) ];
const bindables = {"controller":{}};
let _e;
function register(container) {
  if (!_e) {
    _e = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.define({ name, template, dependencies, bindables });
  }
  container.register(_e);
}


/***/ }),

/***/ "./src/resources/elements/debug-group.html":
/*!*************************************************!*\
  !*** ./src/resources/elements/debug-group.html ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "name": () => /* binding */ name,
/* harmony export */   "template": () => /* binding */ template,
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__,
/* harmony export */   "dependencies": () => /* binding */ dependencies,
/* harmony export */   "register": () => /* binding */ register
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _debug_group_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug-group.css */ "./src/resources/elements/debug-group.css");



const name = "debug-group";
const template = "\n<section>\n  <h2 class=\"header\">${heading}</h2>\n  <div class=\"content\">\n    <au-slot></au-slot>\n  </div>\n</section>\n";
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (template);
const dependencies = [ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_1__.Registration.defer('.css', _debug_group_css__WEBPACK_IMPORTED_MODULE_2__.default) ];
let _e;
function register(container) {
  if (!_e) {
    _e = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.define({ name, template, dependencies });
  }
  container.register(_e);
}


/***/ }),

/***/ "./src/resources/elements/property-view.html":
/*!***************************************************!*\
  !*** ./src/resources/elements/property-view.html ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "name": () => /* binding */ name,
/* harmony export */   "template": () => /* binding */ template,
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__,
/* harmony export */   "dependencies": () => /* binding */ dependencies,
/* harmony export */   "register": () => /* binding */ register
/* harmony export */ });
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _property_view_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./property-view.css */ "./src/resources/elements/property-view.css");



const name = "property-view";
const template = "\n\n<span class=\"property-line\">\n  <span\n    css=\"opacity: ${property.canExpand ? 1 : 0}\"\n    class=\"arrow\"\n    click.trigger=\"debugHost.toggleDebugValueExpansion(property)\"\n  >\n    <span if.bind=\"property.isExpanded\" class=\"down\">▼</span>\n    <span if.bind=\"!property.isExpanded\" class=\"right\">▶</span>\n  </span>\n  <span class=\"property-name\">${property.name}</span\n  ><span class=\"token-colon\">:</span>&nbsp;\n\n  <span class=\"value-container\">\n    <span\n      if.bind=\"property.type === 'string' && !property.isEditing\"\n      class=\"property-value string\"\n      >\"</span\n    ><span\n      if.bind=\"!property.isEditing\"\n      class=\"property-value ${property.type}\"\n      click.trigger=\"beginEditing()\"\n      >${property.value}</span\n    ><span\n      if.bind=\"property.type === 'string' && !property.isEditing\"\n      class=\"property-value string\"\n      >\"</span\n    >\n\n    <!-- <select\n      if.bind=\"property.isEditing &&  property.type === 'boolean'\"\n      class=\"property-editor\"\n      value.bind=\"false\"\n    >\n      <option model.bind=\"true\">True</option>\n      <option model.bind=\"false\">False</option>\n    </select> -->\n\n    <input\n      if.bind=\"property.isEditing\"\n      class=\"property-editor\"\n      ref=\"editor\"\n      type=\"text\"\n      value.bind=\"property.value\"\n      keyup.trigger=\"onKeyDown($event)\"\n      blur.trigger=\"endEditing()\"\n    />\n  </span>\n</span>\n\n<ul if.bind=\"property.isExpanded && property.expandedValue\" class=\"properties\">\n  <div\n    if.bind=\"!property.expandedValue.properties.length\"\n    class=\"no-properties\"\n  >\n    Object has no properties.\n  </div>\n  <li repeat.for=\"p of property.expandedValue.properties\">\n    <property-view property.bind=\"p\"></property-view>\n  </li>\n</ul>\n";
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (template);
const dependencies = [ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_1__.Registration.defer('.css', _property_view_css__WEBPACK_IMPORTED_MODULE_2__.default) ];
let _e;
function register(container) {
  if (!_e) {
    _e = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_0__.CustomElement.define({ name, template, dependencies });
  }
  container.register(_e);
}


/***/ }),

/***/ "./node_modules/aurelia/dist/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/aurelia/dist/esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PLATFORM": () => /* binding */ PLATFORM,
/* harmony export */   "IPlatform": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.IPlatform,
/* harmony export */   "Aurelia": () => /* binding */ Aurelia,
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__,
/* harmony export */   "json": () => /* reexport safe */ _aurelia_fetch_client__WEBPACK_IMPORTED_MODULE_3__.json,
/* harmony export */   "HttpClientConfiguration": () => /* reexport safe */ _aurelia_fetch_client__WEBPACK_IMPORTED_MODULE_3__.HttpClientConfiguration,
/* harmony export */   "HttpClient": () => /* reexport safe */ _aurelia_fetch_client__WEBPACK_IMPORTED_MODULE_3__.HttpClient,
/* harmony export */   "IHttpClient": () => /* reexport safe */ _aurelia_fetch_client__WEBPACK_IMPORTED_MODULE_3__.IHttpClient,
/* harmony export */   "all": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.all,
/* harmony export */   "DI": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI,
/* harmony export */   "IContainer": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IContainer,
/* harmony export */   "inject": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.inject,
/* harmony export */   "IServiceLocator": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IServiceLocator,
/* harmony export */   "lazy": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.lazy,
/* harmony export */   "optional": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.optional,
/* harmony export */   "Registration": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration,
/* harmony export */   "singleton": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.singleton,
/* harmony export */   "transient": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.transient,
/* harmony export */   "InstanceProvider": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.InstanceProvider,
/* harmony export */   "Metadata": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Metadata,
/* harmony export */   "ColorOptions": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.ColorOptions,
/* harmony export */   "ILogger": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.ILogger,
/* harmony export */   "LoggerConfiguration": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.LoggerConfiguration,
/* harmony export */   "emptyArray": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyArray,
/* harmony export */   "emptyObject": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.emptyObject,
/* harmony export */   "noop": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.noop,
/* harmony export */   "LogLevel": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.LogLevel,
/* harmony export */   "EventAggregator": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.EventAggregator,
/* harmony export */   "IEventAggregator": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.IEventAggregator,
/* harmony export */   "isArrayIndex": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.isArrayIndex,
/* harmony export */   "camelCase": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.camelCase,
/* harmony export */   "kebabCase": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.kebabCase,
/* harmony export */   "pascalCase": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.pascalCase,
/* harmony export */   "toArray": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.toArray,
/* harmony export */   "bound": () => /* reexport safe */ _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.bound,
/* harmony export */   "NavRoute": () => /* reexport safe */ _aurelia_router__WEBPACK_IMPORTED_MODULE_4__.NavRoute,
/* harmony export */   "RouterOptions": () => /* reexport safe */ _aurelia_router__WEBPACK_IMPORTED_MODULE_4__.RouterOptions,
/* harmony export */   "IRouter": () => /* reexport safe */ _aurelia_router__WEBPACK_IMPORTED_MODULE_4__.IRouter,
/* harmony export */   "Router": () => /* reexport safe */ _aurelia_router__WEBPACK_IMPORTED_MODULE_4__.Router,
/* harmony export */   "ViewportInstruction": () => /* reexport safe */ _aurelia_router__WEBPACK_IMPORTED_MODULE_4__.ViewportInstruction,
/* harmony export */   "RouterConfiguration": () => /* reexport safe */ _aurelia_router__WEBPACK_IMPORTED_MODULE_4__.RouterConfiguration,
/* harmony export */   "RouterRegistration": () => /* reexport safe */ _aurelia_router__WEBPACK_IMPORTED_MODULE_4__.RouterRegistration,
/* harmony export */   "ComputedObserver": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.ComputedObserver,
/* harmony export */   "ComputedWatcher": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.ComputedWatcher,
/* harmony export */   "ExpressionWatcher": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.ExpressionWatcher,
/* harmony export */   "Watch": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.Watch,
/* harmony export */   "watch": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.watch,
/* harmony export */   "IObserverLocator": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.IObserverLocator,
/* harmony export */   "ISignaler": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.ISignaler,
/* harmony export */   "subscriberCollection": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.subscriberCollection,
/* harmony export */   "bindingBehavior": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindingBehavior,
/* harmony export */   "BindingBehavior": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.BindingBehavior,
/* harmony export */   "customAttribute": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.customAttribute,
/* harmony export */   "CustomAttribute": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.CustomAttribute,
/* harmony export */   "templateController": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.templateController,
/* harmony export */   "containerless": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.containerless,
/* harmony export */   "customElement": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.customElement,
/* harmony export */   "CustomElement": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.CustomElement,
/* harmony export */   "useShadowDOM": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.useShadowDOM,
/* harmony export */   "ValueConverter": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.ValueConverter,
/* harmony export */   "valueConverter": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.valueConverter,
/* harmony export */   "AppTask": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.AppTask,
/* harmony export */   "TaskQueuePriority": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.TaskQueuePriority,
/* harmony export */   "bindable": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindable,
/* harmony export */   "Bindable": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.Bindable,
/* harmony export */   "children": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.children,
/* harmony export */   "Controller": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.Controller,
/* harmony export */   "ViewFactory": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.ViewFactory,
/* harmony export */   "IAppRoot": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.IAppRoot,
/* harmony export */   "alias": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.alias,
/* harmony export */   "registerAliases": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.registerAliases,
/* harmony export */   "INode": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.INode,
/* harmony export */   "IEventTarget": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.IEventTarget,
/* harmony export */   "IRenderLocation": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.IRenderLocation,
/* harmony export */   "BindingMode": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.BindingMode,
/* harmony export */   "LifecycleFlags": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.LifecycleFlags,
/* harmony export */   "renderer": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.renderer,
/* harmony export */   "IAurelia": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.IAurelia,
/* harmony export */   "NodeObserverLocator": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.NodeObserverLocator,
/* harmony export */   "attributePattern": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.attributePattern,
/* harmony export */   "IAttributePattern": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.IAttributePattern,
/* harmony export */   "IAttrSyntaxTransformer": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.IAttrSyntaxTransformer,
/* harmony export */   "bindingCommand": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.bindingCommand,
/* harmony export */   "getTarget": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.getTarget,
/* harmony export */   "ShortHandBindingSyntax": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.ShortHandBindingSyntax,
/* harmony export */   "createElement": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.createElement,
/* harmony export */   "StyleConfiguration": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.StyleConfiguration,
/* harmony export */   "cssModules": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.cssModules,
/* harmony export */   "shadowCSS": () => /* reexport safe */ _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.shadowCSS
/* harmony export */ });
/* harmony import */ var _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aurelia/kernel */ "./node_modules/@aurelia/kernel/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _aurelia_platform_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aurelia/platform-browser */ "./node_modules/@aurelia/platform-browser/dist/esm/index.js");
/* harmony import */ var _aurelia_fetch_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aurelia/fetch-client */ "./node_modules/@aurelia/fetch-client/dist/esm/index.js");
/* harmony import */ var _aurelia_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aurelia/router */ "./node_modules/@aurelia/router/dist/esm/index.js");



const PLATFORM = _aurelia_platform_browser__WEBPACK_IMPORTED_MODULE_2__.BrowserPlatform.getOrCreate(globalThis);

function createContainer() {
    return _aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.DI.createContainer()
        .register(_aurelia_kernel__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.IPlatform, PLATFORM), _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.StandardConfiguration);
}
class Aurelia extends _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.Aurelia {
    constructor(container = createContainer()) {
        super(container);
    }
    static start(root) {
        return new Aurelia().start(root);
    }
    static app(config) {
        return new Aurelia().app(config);
    }
    static enhance(config) {
        return new Aurelia().enhance(config);
    }
    static register(...params) {
        return new Aurelia().register(...params);
    }
    app(config) {
        if (_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.CustomElement.isType(config)) {
            // Default to custom element element name
            const definition = _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.CustomElement.getDefinition(config);
            let host = document.querySelector(definition.name);
            if (host === null) {
                // When no target is found, default to body.
                // For example, when user forgot to write <my-app></my-app> in html.
                host = document.body;
            }
            return super.app({
                host: host,
                component: config
            });
        }
        return super.app(config);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Aurelia);




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/app.css":
/*!***********************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/app.css ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".app-header {\n  background: #f4f4f4;\n  padding: 0;\n  padding: 5px 0 0 0;\n  text-align: center;\n}\n\n.dark .app-header {\n  background: #2a2a2a;\n}\n\n.logo-badge {\n  position: relative;\n  top: -7px;\n  font-weight: 100;\n  font-size: 16px;\n  color: #BB79A8;\n}\n\n.not-found {\n  font-style: italic;\n  font-size: 10px;\n}\n\n.dark .not-found {\n  color: #989898;\n}\n\n.custom-attribute {\n  margin-bottom: 4px;\n}\n\n.custom-attribute .attribute-name {\n  color: saddlebrown;\n}\n.dark .custom-attribute .attribute-name {\n  color: #ef9565;\n}\n\n.custom-attribute .block-token {\n  color: gray;\n}\n\n.custom-attribute .attribute-name, .custom-attribute .block-token {\n  font-size: 12px;\n  display: inline;\n  font-family: monospace;\n}\n\n.custom-attribute controller-view {\n  margin-left: 8px;\n  display: block;\n}\n\ncustom-element {\n  margin-top: 2px;\n  display: block;\n}\n\ncustom-element .arrow {\n  font-size: 10px;\n  color: dimgray;\n  cursor: default;\n}\n\ncustom-element .arrow .right {\n  margin-right: 1px;\n}\n\ncustom-element .property-line {\n  white-space: nowrap;\n}\n\ncustom-element .property-name {\n  font-size: 12px;\n  color: purple;\n  font-family: monospace;\n  margin-left: 1px;\n}\n\n.dark custom-element .property-name {\n  color: #34c7bb;\n}\ncustom-element .value-container {\n  position: relative;\n}\n\ncustom-element .property-editor {\n  font-family: monospace;\n  font-size: 12px;\n  margin: 0;\n  height: 12px;\n  outline: none;\n  border: 1px solid darkgray;\n  box-shadow: 0 0 5px rgba(0,0,0,.5);\n  position: absolute;\n  top: 4px;\n  left: 2px;\n  padding: 0 0 0 2px;\n}\n\ncustom-element .property-value, custom-element .token-colon {\n  font-size: 12px;\n  color: dimgray;\n  font-family: monospace;\n}\n\ncustom-element .property-value.null, custom-element .property-value.undefined {\n  color: dimgray;\n}\n\ncustom-element .property-value.boolean {\n  color: deeppink;\n}\n\ncustom-element .property-value.string {\n  color: red;\n  white-space: nowrap;\n}\n.dark custom-element .property-value.string {\n  color:#cbcbcb;\n}\n\ncustom-element .property-value.number {\n  color: blue;\n}\n\n.dark custom-element .property-value.number {\n  color: #59a6ca;\n}\n\ncustom-element .property-value.array {\n  color: black;\n}\n\n.dark custom-element .property-value.array {\n  color: #cbcbcb;\n}\n\ncustom-element .property-value.object, custom-element .property-value.node {\n  color: black;\n}\n\n.dark custom-element .property-value.object, custom-element .property-value.node {\n  color: #cbcbcb;\n}\n\ncustom-element ul.properties {\n  margin-left: 16px;\n}\n\ncustom-element .no-properties {\n  margin-top: 4px;\n  font-size: 10px;\n}\n\n.dark custom-element .no-properties {\n  color: #989898;\n}\n", "",{"version":3,"sources":["webpack://./src/app.css"],"names":[],"mappings":"AAAA;EACE,mBAAmB;EACnB,UAAU;EACV,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,gBAAgB;EAChB,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,cAAc;AAChB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,eAAe;EACf,eAAe;EACf,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,eAAe;EACf,SAAS;EACT,YAAY;EACZ,aAAa;EACb,0BAA0B;EAC1B,kCAAkC;EAClC,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,cAAc;EACd,sBAAsB;AACxB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,UAAU;EACV,mBAAmB;AACrB;AACA;EACE,aAAa;AACf;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB","sourcesContent":[".app-header {\n  background: #f4f4f4;\n  padding: 0;\n  padding: 5px 0 0 0;\n  text-align: center;\n}\n\n.dark .app-header {\n  background: #2a2a2a;\n}\n\n.logo-badge {\n  position: relative;\n  top: -7px;\n  font-weight: 100;\n  font-size: 16px;\n  color: #BB79A8;\n}\n\n.not-found {\n  font-style: italic;\n  font-size: 10px;\n}\n\n.dark .not-found {\n  color: #989898;\n}\n\n.custom-attribute {\n  margin-bottom: 4px;\n}\n\n.custom-attribute .attribute-name {\n  color: saddlebrown;\n}\n.dark .custom-attribute .attribute-name {\n  color: #ef9565;\n}\n\n.custom-attribute .block-token {\n  color: gray;\n}\n\n.custom-attribute .attribute-name, .custom-attribute .block-token {\n  font-size: 12px;\n  display: inline;\n  font-family: monospace;\n}\n\n.custom-attribute controller-view {\n  margin-left: 8px;\n  display: block;\n}\n\ncustom-element {\n  margin-top: 2px;\n  display: block;\n}\n\ncustom-element .arrow {\n  font-size: 10px;\n  color: dimgray;\n  cursor: default;\n}\n\ncustom-element .arrow .right {\n  margin-right: 1px;\n}\n\ncustom-element .property-line {\n  white-space: nowrap;\n}\n\ncustom-element .property-name {\n  font-size: 12px;\n  color: purple;\n  font-family: monospace;\n  margin-left: 1px;\n}\n\n.dark custom-element .property-name {\n  color: #34c7bb;\n}\ncustom-element .value-container {\n  position: relative;\n}\n\ncustom-element .property-editor {\n  font-family: monospace;\n  font-size: 12px;\n  margin: 0;\n  height: 12px;\n  outline: none;\n  border: 1px solid darkgray;\n  box-shadow: 0 0 5px rgba(0,0,0,.5);\n  position: absolute;\n  top: 4px;\n  left: 2px;\n  padding: 0 0 0 2px;\n}\n\ncustom-element .property-value, custom-element .token-colon {\n  font-size: 12px;\n  color: dimgray;\n  font-family: monospace;\n}\n\ncustom-element .property-value.null, custom-element .property-value.undefined {\n  color: dimgray;\n}\n\ncustom-element .property-value.boolean {\n  color: deeppink;\n}\n\ncustom-element .property-value.string {\n  color: red;\n  white-space: nowrap;\n}\n.dark custom-element .property-value.string {\n  color:#cbcbcb;\n}\n\ncustom-element .property-value.number {\n  color: blue;\n}\n\n.dark custom-element .property-value.number {\n  color: #59a6ca;\n}\n\ncustom-element .property-value.array {\n  color: black;\n}\n\n.dark custom-element .property-value.array {\n  color: #cbcbcb;\n}\n\ncustom-element .property-value.object, custom-element .property-value.node {\n  color: black;\n}\n\n.dark custom-element .property-value.object, custom-element .property-value.node {\n  color: #cbcbcb;\n}\n\ncustom-element ul.properties {\n  margin-left: 16px;\n}\n\ncustom-element .no-properties {\n  margin-top: 4px;\n  font-size: 10px;\n}\n\n.dark custom-element .no-properties {\n  color: #989898;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/reset.css":
/*!*************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/reset.css ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Change the default font family in all browsers (opinionated).\n * 2. Correct the line height in all browsers.\n * 3. Prevent adjustments of font size after orientation changes in\n *    IE on Windows Phone and in iOS.\n */\n\nhtml {\n  font-family: sans-serif; /* 1 */\n  line-height: 1.15; /* 2 */\n  -ms-text-size-adjust: 100%; /* 3 */\n  -webkit-text-size-adjust: 100%; /* 3 */\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers (opinionated).\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: sans-serif; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\n *    controls in Android 4.\n * 2. Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\nhtml [type=\"button\"], /* 1 */\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button; /* 2 */\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Change the border, margin, and padding in all browsers (opinionated).\n */\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * 1. Add the correct display in IE 9-.\n * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  display: inline-block; /* 1 */\n  vertical-align: baseline; /* 2 */\n}\n\n/**\n * Remove the default vertical scrollbar in IE.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10-.\n * 2. Remove the padding in IE 10-.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.\n */\n\n[type=\"search\"]::-webkit-search-cancel-button,\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n", "",{"version":3,"sources":["webpack://./src/reset.css"],"names":[],"mappings":"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;;;EAKE;;AAEF;EACE,uBAAuB,EAAE,MAAM;EAC/B,iBAAiB,EAAE,MAAM;EACzB,0BAA0B,EAAE,MAAM;EAClC,8BAA8B,EAAE,MAAM;AACxC;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;;;;;EAKE,uBAAuB,EAAE,MAAM;EAC/B,eAAe,EAAE,MAAM;EACvB,iBAAiB,EAAE,MAAM;EACzB,SAAS,EAAE,MAAM;AACnB;;AAEA;;;EAGE;;AAEF;QACQ,MAAM;EACZ,iBAAiB;AACnB;;AAEA;;;EAGE;;AAEF;SACS,MAAM;EACb,oBAAoB;AACtB;;AAEA;;;;EAIE;;AAEF;;;;EAIE,0BAA0B,EAAE,MAAM;AACpC;;AAEA;;EAEE;;AAEF;;;;EAIE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;;EAEE;;AAEF;;;;EAIE,8BAA8B;AAChC;;AAEA;;EAEE;;AAEF;EACE,yBAAyB;EACzB,aAAa;EACb,8BAA8B;AAChC;;AAEA;;;;;EAKE;;AAEF;EACE,sBAAsB,EAAE,MAAM;EAC9B,cAAc,EAAE,MAAM;EACtB,cAAc,EAAE,MAAM;EACtB,eAAe,EAAE,MAAM;EACvB,UAAU,EAAE,MAAM;EAClB,mBAAmB,EAAE,MAAM;AAC7B;;AAEA;;;EAGE;;AAEF;EACE,qBAAqB,EAAE,MAAM;EAC7B,wBAAwB,EAAE,MAAM;AAClC;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,sBAAsB,EAAE,MAAM;EAC9B,UAAU,EAAE,MAAM;AACpB;;AAEA;;EAEE;;AAEF;;EAEE,YAAY;AACd;;AAEA;;;EAGE;;AAEF;EACE,6BAA6B,EAAE,MAAM;EACrC,oBAAoB,EAAE,MAAM;AAC9B;;AAEA;;EAEE;;AAEF;;EAEE,wBAAwB;AAC1B;;AAEA;;;EAGE;;AAEF;EACE,0BAA0B,EAAE,MAAM;EAClC,aAAa,EAAE,MAAM;AACvB","sourcesContent":["/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Change the default font family in all browsers (opinionated).\n * 2. Correct the line height in all browsers.\n * 3. Prevent adjustments of font size after orientation changes in\n *    IE on Windows Phone and in iOS.\n */\n\nhtml {\n  font-family: sans-serif; /* 1 */\n  line-height: 1.15; /* 2 */\n  -ms-text-size-adjust: 100%; /* 3 */\n  -webkit-text-size-adjust: 100%; /* 3 */\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers (opinionated).\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: sans-serif; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\n *    controls in Android 4.\n * 2. Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\nhtml [type=\"button\"], /* 1 */\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button; /* 2 */\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Change the border, margin, and padding in all browsers (opinionated).\n */\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * 1. Add the correct display in IE 9-.\n * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  display: inline-block; /* 1 */\n  vertical-align: baseline; /* 2 */\n}\n\n/**\n * Remove the default vertical scrollbar in IE.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10-.\n * 2. Remove the padding in IE 10-.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.\n */\n\n[type=\"search\"]::-webkit-search-cancel-button,\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/resources/elements/controller-view.css":
/*!******************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/resources/elements/controller-view.css ***!
  \******************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "controller-view .category-name {\n  font-size: 10px;\n  margin-bottom: 2px;\n  margin-top: 2px;\n  color: black;\n}\n\n.dark controller-view .category-name {\n  font-size: 10px;\n  margin-bottom: 2px;\n  margin-top: 2px;\n  color: white;\n}\n", "",{"version":3,"sources":["webpack://./src/resources/elements/controller-view.css"],"names":[],"mappings":"AAAA;EACE,eAAe;EACf,kBAAkB;EAClB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,eAAe;EACf,YAAY;AACd","sourcesContent":["controller-view .category-name {\n  font-size: 10px;\n  margin-bottom: 2px;\n  margin-top: 2px;\n  color: black;\n}\n\n.dark controller-view .category-name {\n  font-size: 10px;\n  margin-bottom: 2px;\n  margin-top: 2px;\n  color: white;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/resources/elements/debug-group.css":
/*!**************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/resources/elements/debug-group.css ***!
  \**************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "debug-group .header {\n  font-weight: normal;\n  font-size: 12px;\n  margin: 0;\n  padding: 4px;\n  background: #f4f4f4;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.25);\n  border-top: 1px solid rgba(0, 0, 0, 0.25);\n}\n\n.dark debug-group .header {\n  color: #989898;\n  background: #2a2a2a;\n  border-bottom: 1px solid #5c5c5c;\n  border-top: 1px solid #3d3d3d;\n}\n\ndebug-group .content {\n  margin: 4px;\n}\n", "",{"version":3,"sources":["webpack://./src/resources/elements/debug-group.css"],"names":[],"mappings":"AAAA;EACE,mBAAmB;EACnB,eAAe;EACf,SAAS;EACT,YAAY;EACZ,mBAAmB;EACnB,4CAA4C;EAC5C,yCAAyC;AAC3C;;AAEA;EACE,cAAc;EACd,mBAAmB;EACnB,gCAAgC;EAChC,6BAA6B;AAC/B;;AAEA;EACE,WAAW;AACb","sourcesContent":["debug-group .header {\n  font-weight: normal;\n  font-size: 12px;\n  margin: 0;\n  padding: 4px;\n  background: #f4f4f4;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.25);\n  border-top: 1px solid rgba(0, 0, 0, 0.25);\n}\n\n.dark debug-group .header {\n  color: #989898;\n  background: #2a2a2a;\n  border-bottom: 1px solid #5c5c5c;\n  border-top: 1px solid #3d3d3d;\n}\n\ndebug-group .content {\n  margin: 4px;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/resources/elements/property-view.css":
/*!****************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/resources/elements/property-view.css ***!
  \****************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "property-view {\n  padding-top: 2px;\n  padding-bottom: 2px;\n  display: block;\n}\n\nproperty-view .arrow {\n  font-size: 10px;\n  color: dimgray;\n  cursor: default;\n}\n\nproperty-view .arrow .right {\n  margin-right: 1px;\n}\n\nproperty-view .property-line {\n  white-space: nowrap;\n}\n\nproperty-view .property-name {\n  font-size: 12px;\n  color: purple;\n  font-family: monospace;\n  margin-left: 1px;\n}\n\n.dark property-view .property-name {\n  color: #34c7bb;\n}\nproperty-view .value-container {\n  position: relative;\n}\n\nproperty-view .property-editor {\n  font-family: monospace;\n  font-size: 12px;\n  margin: 0;\n  height: 12px;\n  outline: none;\n  border: 1px solid darkgray;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n  position: absolute;\n  top: 0;\n  left: 2px;\n  padding: 0 0 0 2px;\n}\n\nproperty-view .property-value,\nproperty-view .token-colon {\n  font-size: 12px;\n  color: dimgray;\n  font-family: monospace;\n}\n\nproperty-view .property-value.null,\nproperty-view .property-value.undefined {\n  color: dimgray;\n}\n\nproperty-view .property-value.boolean {\n  color: deeppink;\n}\n\nproperty-view .property-value.string {\n  color: red;\n  white-space: nowrap;\n}\n.dark property-view .property-value.string {\n  color: #cbcbcb;\n}\n\nproperty-view .property-value.number {\n  color: blue;\n}\n\n.dark property-view .property-value.number {\n  color: #59a6ca;\n}\n\nproperty-view .property-value.array {\n  color: black;\n}\n\n.dark property-view .property-value.array {\n  color: #cbcbcb;\n}\n\nproperty-view .property-value.object,\nproperty-view .property-value.node {\n  color: black;\n}\n\n.dark property-view .property-value.object,\nproperty-view .property-value.node {\n  color: #cbcbcb;\n}\n\nproperty-view ul.properties {\n  margin-left: 16px;\n}\n\nproperty-view .no-properties {\n  margin-top: 4px;\n  font-size: 10px;\n}\n\n.dark property-view .no-properties {\n  color: #989898;\n}\n", "",{"version":3,"sources":["webpack://./src/resources/elements/property-view.css"],"names":[],"mappings":"AAAA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,eAAe;EACf,SAAS;EACT,YAAY;EACZ,aAAa;EACb,0BAA0B;EAC1B,sCAAsC;EACtC,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,kBAAkB;AACpB;;AAEA;;EAEE,eAAe;EACf,cAAc;EACd,sBAAsB;AACxB;;AAEA;;EAEE,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,UAAU;EACV,mBAAmB;AACrB;AACA;EACE,cAAc;AAChB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;;EAEE,YAAY;AACd;;AAEA;;EAEE,cAAc;AAChB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB","sourcesContent":["property-view {\n  padding-top: 2px;\n  padding-bottom: 2px;\n  display: block;\n}\n\nproperty-view .arrow {\n  font-size: 10px;\n  color: dimgray;\n  cursor: default;\n}\n\nproperty-view .arrow .right {\n  margin-right: 1px;\n}\n\nproperty-view .property-line {\n  white-space: nowrap;\n}\n\nproperty-view .property-name {\n  font-size: 12px;\n  color: purple;\n  font-family: monospace;\n  margin-left: 1px;\n}\n\n.dark property-view .property-name {\n  color: #34c7bb;\n}\nproperty-view .value-container {\n  position: relative;\n}\n\nproperty-view .property-editor {\n  font-family: monospace;\n  font-size: 12px;\n  margin: 0;\n  height: 12px;\n  outline: none;\n  border: 1px solid darkgray;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n  position: absolute;\n  top: 0;\n  left: 2px;\n  padding: 0 0 0 2px;\n}\n\nproperty-view .property-value,\nproperty-view .token-colon {\n  font-size: 12px;\n  color: dimgray;\n  font-family: monospace;\n}\n\nproperty-view .property-value.null,\nproperty-view .property-value.undefined {\n  color: dimgray;\n}\n\nproperty-view .property-value.boolean {\n  color: deeppink;\n}\n\nproperty-view .property-value.string {\n  color: red;\n  white-space: nowrap;\n}\n.dark property-view .property-value.string {\n  color: #cbcbcb;\n}\n\nproperty-view .property-value.number {\n  color: blue;\n}\n\n.dark property-view .property-value.number {\n  color: #59a6ca;\n}\n\nproperty-view .property-value.array {\n  color: black;\n}\n\n.dark property-view .property-value.array {\n  color: #cbcbcb;\n}\n\nproperty-view .property-value.object,\nproperty-view .property-value.node {\n  color: black;\n}\n\n.dark property-view .property-value.object,\nproperty-view .property-value.node {\n  color: #cbcbcb;\n}\n\nproperty-view ul.properties {\n  margin-left: 16px;\n}\n\nproperty-view .no-properties {\n  margin-top: 4px;\n  font-size: 10px;\n}\n\n.dark property-view .no-properties {\n  color: #989898;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/cssWithMappingToString.js ***!
  \************************************************************************/
/***/ ((module) => {



function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

module.exports = function cssWithMappingToString(item) {
  var _item = _slicedToArray(item, 4),
      content = _item[1],
      cssMapping = _item[3];

  if (typeof btoa === 'function') {
    // eslint-disable-next-line no-undef
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
};

/***/ }),

/***/ "./src/app.css":
/*!*********************!*\
  !*** ./src/app.css ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_app_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./app.css */ "./node_modules/css-loader/dist/cjs.js!./src/app.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_app_css__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_app_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./src/reset.css":
/*!***********************!*\
  !*** ./src/reset.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_reset_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./reset.css */ "./node_modules/css-loader/dist/cjs.js!./src/reset.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_reset_css__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_reset_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./src/resources/elements/controller-view.css":
/*!****************************************************!*\
  !*** ./src/resources/elements/controller-view.css ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_controller_view_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!./controller-view.css */ "./node_modules/css-loader/dist/cjs.js!./src/resources/elements/controller-view.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_controller_view_css__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_controller_view_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./src/resources/elements/debug-group.css":
/*!************************************************!*\
  !*** ./src/resources/elements/debug-group.css ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_debug_group_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!./debug-group.css */ "./node_modules/css-loader/dist/cjs.js!./src/resources/elements/debug-group.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_debug_group_css__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_debug_group_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./src/resources/elements/property-view.css":
/*!**************************************************!*\
  !*** ./src/resources/elements/property-view.css ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_property_view_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!./property-view.css */ "./node_modules/css-loader/dist/cjs.js!./src/resources/elements/property-view.css");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_property_view_css__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_property_view_css__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : 0;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StringifyValueConverter": () => /* binding */ StringifyValueConverter,
/* harmony export */   "App": () => /* binding */ App
/* harmony export */ });
/* harmony import */ var _app_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app.html */ "./src/app.html");
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _backend_debug_host__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./backend/debug-host */ "./src/backend/debug-host.ts");
/* harmony import */ var aurelia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! aurelia */ "./node_modules/aurelia/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};




let StringifyValueConverter = class StringifyValueConverter {
    toView(value) {
        return JSON.stringify(value);
    }
};
StringifyValueConverter = __decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.valueConverter)('stringify')
], StringifyValueConverter);

let App = class App {
    constructor(debugHost, plat) {
        this.debugHost = debugHost;
        this.plat = plat;
        this.isDarkTheme = false;
        this.JSON = JSON;
        this.selectedElement = undefined;
        this.selectedElementAttributes = undefined;
        this.allAureliaObjects = undefined;
    }
    attaching() {
        this.debugHost.attach(this);
        this.isDarkTheme = chrome?.devtools?.panels?.themeName === "dark";
        [].join();
    }
    get currentController() {
        return this.selectedElement;
    }
    valueChanged(element) {
        this.plat.queueMicrotask(() => this.debugHost.updateValues(element));
    }
};
App = __decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.customElement)({ ..._app_html__WEBPACK_IMPORTED_MODULE_0__, dependencies: [..._app_html__WEBPACK_IMPORTED_MODULE_0__.dependencies, StringifyValueConverter] }),
    (0,aurelia__WEBPACK_IMPORTED_MODULE_3__.inject)(),
    __param(1, aurelia__WEBPACK_IMPORTED_MODULE_3__.IPlatform),
    __metadata("design:paramtypes", [_backend_debug_host__WEBPACK_IMPORTED_MODULE_2__.DebugHost, Object])
], App);



/***/ }),

/***/ "./src/backend/debug-host.ts":
/*!***********************************!*\
  !*** ./src/backend/debug-host.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectionChanged": () => /* binding */ SelectionChanged,
/* harmony export */   "DebugHost": () => /* binding */ DebugHost
/* harmony export */ });
/* harmony import */ var aurelia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia */ "./node_modules/aurelia/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

class SelectionChanged {
    constructor(debugInfo) {
        this.debugInfo = debugInfo;
    }
}
let DebugHost = class DebugHost {
    attach(consumer) {
        this.consumer = consumer;
        if (chrome && chrome.devtools) {
            chrome.devtools.network.onNavigated.addListener(() => {
                chrome.devtools.inspectedWindow.eval(`window.__AURELIA_DEVTOOLS_GLOBAL_HOOK__.getAllInfo()`, (debugObject) => {
                    this.consumer.allAureliaObjects = debugObject;
                });
            });
            chrome.devtools.panels.elements.onSelectionChanged.addListener(() => {
                chrome.devtools.inspectedWindow.eval(`window.__AURELIA_DEVTOOLS_GLOBAL_HOOK__.getCustomElementInfo($0, false)`, (debugObject) => {
                    this.consumer.selectedElement = debugObject?.customElementInfo;
                    this.consumer.selectedElementAttributes = debugObject?.customAttributesInfo;
                });
            });
            chrome.devtools.inspectedWindow.eval(`window.__AURELIA_DEVTOOLS_GLOBAL_HOOK__.getAllInfo()`, (debugObject) => {
                this.consumer.allAureliaObjects = debugObject;
            });
        }
    }
    updateValues(value) {
        chrome.devtools.inspectedWindow.eval(`window.__AURELIA_DEVTOOLS_GLOBAL_HOOK__.updateValues(${JSON.stringify(value)})`, (debugObject) => {
            // this.consumer.selectedElement = debugObject;
        });
    }
    updateDebugValue(debugInfo) {
        let value = debugInfo.value;
        if (debugInfo.type === "string") {
            value = "'" + value + "'";
        }
        let code = `aureliaDebugger.updateValueForId(${debugInfo.debugId}, ${value})`;
        chrome.devtools.inspectedWindow.eval(code);
    }
    toggleDebugValueExpansion(debugInfo) {
        if (debugInfo.canExpand) {
            debugInfo.isExpanded = !debugInfo.isExpanded;
            if (debugInfo.isExpanded && !debugInfo.expandedValue) {
                let code = `aureliaDebugger.getExpandedDebugValueForId(${debugInfo.debugId});`;
                chrome.devtools.inspectedWindow.eval(code, (expandedValue) => {
                    debugInfo.expandedValue = expandedValue;
                    debugInfo.isExpanded = true;
                });
            }
        }
    }
};
DebugHost = __decorate([
    (0,aurelia__WEBPACK_IMPORTED_MODULE_0__.inject)()
], DebugHost);



/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var aurelia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia */ "./node_modules/aurelia/dist/esm/index.js");
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app */ "./src/app.ts");
/* harmony import */ var _resources_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resources/index */ "./src/resources/index.ts");




const aurelia = new aurelia__WEBPACK_IMPORTED_MODULE_0__.default(aurelia__WEBPACK_IMPORTED_MODULE_0__.DI.createContainer()
    .register(aurelia__WEBPACK_IMPORTED_MODULE_0__.Registration.instance(aurelia__WEBPACK_IMPORTED_MODULE_0__.IPlatform, aurelia__WEBPACK_IMPORTED_MODULE_0__.PLATFORM), _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.StandardConfiguration, _resources_index__WEBPACK_IMPORTED_MODULE_3__)).app(_app__WEBPACK_IMPORTED_MODULE_2__.App);
aurelia.start();


/***/ }),

/***/ "./src/resources/elements/debug-group.ts":
/*!***********************************************!*\
  !*** ./src/resources/elements/debug-group.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DebugGroup": () => /* binding */ DebugGroup
/* harmony export */ });
/* harmony import */ var _debug_group_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-group.html */ "./src/resources/elements/debug-group.html");
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var aurelia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! aurelia */ "./node_modules/aurelia/dist/esm/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



let DebugGroup = class DebugGroup {
};
__decorate([
    aurelia__WEBPACK_IMPORTED_MODULE_2__.bindable,
    __metadata("design:type", String)
], DebugGroup.prototype, "heading", void 0);
DebugGroup = __decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.customElement)(_debug_group_html__WEBPACK_IMPORTED_MODULE_0__)
], DebugGroup);



/***/ }),

/***/ "./src/resources/elements/property-view.ts":
/*!*************************************************!*\
  !*** ./src/resources/elements/property-view.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PropertyView": () => /* binding */ PropertyView
/* harmony export */ });
/* harmony import */ var _property_view_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./property-view.html */ "./src/resources/elements/property-view.html");
/* harmony import */ var _aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aurelia/runtime-html */ "./node_modules/@aurelia/runtime-html/dist/esm/index.js");
/* harmony import */ var aurelia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! aurelia */ "./node_modules/aurelia/dist/esm/index.js");
/* harmony import */ var _backend_debug_host__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../backend/debug-host */ "./src/backend/debug-host.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};




const editableTypes = ['string', 'number', 'boolean', 'bigint'];
let PropertyView = class PropertyView {
    constructor(debugHost, platform) {
        this.debugHost = debugHost;
        this.platform = platform;
    }
    beginEditing() {
        if (editableTypes.some(x => x === this.property?.type || this.property.value == null)) {
            this.property.isEditing = true;
            this.platform.queueMicrotask(() => {
                this.editor.focus();
                this.editor.select();
            });
        }
    }
    keyup(e) {
        if (e.code === 'Enter') {
            this.endEditing();
        }
        if (this.property.type === 'undefined') {
            this.property.type = 'string';
        }
        this.platform.queueMicrotask(() => this.debugHost.updateValues(this.controller));
        return true;
    }
    endEditing() {
        this.property.isEditing = false;
    }
};
__decorate([
    aurelia__WEBPACK_IMPORTED_MODULE_2__.bindable,
    __metadata("design:type", Object)
], PropertyView.prototype, "property", void 0);
__decorate([
    aurelia__WEBPACK_IMPORTED_MODULE_2__.bindable,
    __metadata("design:type", Object)
], PropertyView.prototype, "controller", void 0);
PropertyView = __decorate([
    (0,_aurelia_runtime_html__WEBPACK_IMPORTED_MODULE_1__.customElement)(_property_view_html__WEBPACK_IMPORTED_MODULE_0__),
    (0,aurelia__WEBPACK_IMPORTED_MODULE_2__.inject)(),
    __param(1, aurelia__WEBPACK_IMPORTED_MODULE_2__.IPlatform),
    __metadata("design:paramtypes", [_backend_debug_host__WEBPACK_IMPORTED_MODULE_3__.DebugHost, Object])
], PropertyView);



/***/ }),

/***/ "./src/resources/index.ts":
/*!********************************!*\
  !*** ./src/resources/index.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DebugGroup": () => /* reexport safe */ _elements_debug_group__WEBPACK_IMPORTED_MODULE_0__.DebugGroup,
/* harmony export */   "PropertyView": () => /* reexport safe */ _elements_property_view__WEBPACK_IMPORTED_MODULE_1__.PropertyView,
/* harmony export */   "t": () => /* reexport module object */ _elements_aurelia_logo_html__WEBPACK_IMPORTED_MODULE_2__,
/* harmony export */   "t2": () => /* reexport module object */ _elements_controller_view_html__WEBPACK_IMPORTED_MODULE_3__
/* harmony export */ });
/* harmony import */ var _elements_debug_group__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elements/debug-group */ "./src/resources/elements/debug-group.ts");
/* harmony import */ var _elements_property_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elements/property-view */ "./src/resources/elements/property-view.ts");
/* harmony import */ var _elements_aurelia_logo_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./elements/aurelia-logo.html */ "./src/resources/elements/aurelia-logo.html");
/* harmony import */ var _elements_controller_view_html__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./elements/controller-view.html */ "./src/resources/elements/controller-view.html");






/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/main.ts");
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,